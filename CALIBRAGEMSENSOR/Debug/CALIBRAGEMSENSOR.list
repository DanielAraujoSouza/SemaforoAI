
C:\Users\Daniel\Desktop\teste\CALIBRAGEMSENSOR\Debug\CALIBRAGEMSENSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000913c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08009248  08009248  00019248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080092a8  080092a8  000192a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080092ac  080092ac  000192ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  080092b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d0  20000008  080092b8  00020008  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200000d8  080092b8  000200d8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   000129a6  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002a13  00000000  00000000  000329d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000268  00000000  00000000  000353f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00004b3f  00000000  00000000  00035658  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000363a  00000000  00000000  0003a197  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007c  00000000  00000000  0003d7d1  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00002cd4  00000000  00000000  0003d850  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000020  00000000  00000000  00040528  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000008 	.word	0x20000008
 8000128:	00000000 	.word	0x00000000
 800012c:	0800922c 	.word	0x0800922c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000000c 	.word	0x2000000c
 8000148:	0800922c 	.word	0x0800922c

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fae7 	bl	8000730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f82c 	bl	80001c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f008 fd5a 	bl	8008c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800017c:	4b09      	ldr	r3, [pc, #36]	; (80001a4 <HAL_DeInit+0x2c>)
 800017e:	f04f 32ff 	mov.w	r2, #4294967295
 8000182:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000184:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <HAL_DeInit+0x2c>)
 8000186:	2200      	movs	r2, #0
 8000188:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 800018a:	4b06      	ldr	r3, [pc, #24]	; (80001a4 <HAL_DeInit+0x2c>)
 800018c:	f04f 32ff 	mov.w	r2, #4294967295
 8000190:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <HAL_DeInit+0x2c>)
 8000194:	2200      	movs	r2, #0
 8000196:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif
  
  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000198:	f000 f80c 	bl	80001b4 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800019c:	2300      	movs	r3, #0
}
 800019e:	4618      	mov	r0, r3
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	40021000 	.word	0x40021000
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80001ac:	bf00      	nop
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr

080001b4 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80001b8:	bf00      	nop
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr

080001c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001c8:	4b09      	ldr	r3, [pc, #36]	; (80001f0 <HAL_InitTick+0x30>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a09      	ldr	r2, [pc, #36]	; (80001f4 <HAL_InitTick+0x34>)
 80001ce:	fba2 2303 	umull	r2, r3, r2, r3
 80001d2:	099b      	lsrs	r3, r3, #6
 80001d4:	4618      	mov	r0, r3
 80001d6:	f000 faf4 	bl	80007c2 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001da:	2200      	movs	r2, #0
 80001dc:	6879      	ldr	r1, [r7, #4]
 80001de:	f04f 30ff 	mov.w	r0, #4294967295
 80001e2:	f000 fab0 	bl	8000746 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80001e6:	2300      	movs	r3, #0
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	20000004 	.word	0x20000004
 80001f4:	10624dd3 	.word	0x10624dd3

080001f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
  uwTick++;
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <HAL_IncTick+0x18>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	3301      	adds	r3, #1
 8000202:	4a03      	ldr	r2, [pc, #12]	; (8000210 <HAL_IncTick+0x18>)
 8000204:	6013      	str	r3, [r2, #0]
}
 8000206:	bf00      	nop
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	20000030 	.word	0x20000030

08000214 <HAL_GetTick>:
  * @note  This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
  return uwTick;
 8000218:	4b02      	ldr	r3, [pc, #8]	; (8000224 <HAL_GetTick+0x10>)
 800021a:	681b      	ldr	r3, [r3, #0]
}
 800021c:	4618      	mov	r0, r3
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr
 8000224:	20000030 	.word	0x20000030

08000228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000230:	f7ff fff0 	bl	8000214 <HAL_GetTick>
 8000234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000240:	d002      	beq.n	8000248 <HAL_Delay+0x20>
  {
     wait++;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	3301      	adds	r3, #1
 8000246:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000248:	bf00      	nop
 800024a:	f7ff ffe3 	bl	8000214 <HAL_GetTick>
 800024e:	4602      	mov	r2, r0
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	1ad2      	subs	r2, r2, r3
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	429a      	cmp	r2, r3
 8000258:	d3f7      	bcc.n	800024a <HAL_Delay+0x22>
  {
  }
}
 800025a:	bf00      	nop
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}

08000262 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000262:	b480      	push	{r7}
 8000264:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8000266:	4a05      	ldr	r2, [pc, #20]	; (800027c <HAL_SuspendTick+0x1a>)
 8000268:	4b04      	ldr	r3, [pc, #16]	; (800027c <HAL_SuspendTick+0x1a>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f023 0302 	bic.w	r3, r3, #2
 8000270:	6013      	str	r3, [r2, #0]
}
 8000272:	bf00      	nop
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	e000e010 	.word	0xe000e010

08000280 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8000284:	4a04      	ldr	r2, [pc, #16]	; (8000298 <HAL_ResumeTick+0x18>)
 8000286:	4b04      	ldr	r3, [pc, #16]	; (8000298 <HAL_ResumeTick+0x18>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f043 0302 	orr.w	r3, r3, #2
 800028e:	6013      	str	r3, [r2, #0]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr
 8000298:	e000e010 	.word	0xe000e010

0800029c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
 return __STM32F1xx_HAL_VERSION;
 80002a0:	4b02      	ldr	r3, [pc, #8]	; (80002ac <HAL_GetHalVersion+0x10>)
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bc80      	pop	{r7}
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	01010100 	.word	0x01010100

080002b0 <HAL_GetREVID>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> DBGMCU_IDCODE_REV_ID_Pos);
 80002b4:	4b03      	ldr	r3, [pc, #12]	; (80002c4 <HAL_GetREVID+0x14>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	0c1b      	lsrs	r3, r3, #16
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	e0042000 	.word	0xe0042000

080002c8 <HAL_GetDEVID>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80002cc:	4b03      	ldr	r3, [pc, #12]	; (80002dc <HAL_GetDEVID+0x14>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	e0042000 	.word	0xe0042000

080002e0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80002e4:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 80002e6:	4b04      	ldr	r3, [pc, #16]	; (80002f8 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6053      	str	r3, [r2, #4]
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	e0042000 	.word	0xe0042000

080002fc <HAL_DBGMCU_DisableDBGSleepMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000300:	4a04      	ldr	r2, [pc, #16]	; (8000314 <HAL_DBGMCU_DisableDBGSleepMode+0x18>)
 8000302:	4b04      	ldr	r3, [pc, #16]	; (8000314 <HAL_DBGMCU_DisableDBGSleepMode+0x18>)
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	f023 0301 	bic.w	r3, r3, #1
 800030a:	6053      	str	r3, [r2, #4]
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	e0042000 	.word	0xe0042000

08000318 <HAL_DBGMCU_EnableDBGStopMode>:
  *       interrupt.
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 800031e:	4b04      	ldr	r3, [pc, #16]	; (8000330 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8000320:	685b      	ldr	r3, [r3, #4]
 8000322:	f043 0302 	orr.w	r3, r3, #2
 8000326:	6053      	str	r3, [r2, #4]
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	e0042000 	.word	0xe0042000

08000334 <HAL_DBGMCU_DisableDBGStopMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000338:	4a04      	ldr	r2, [pc, #16]	; (800034c <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 800033a:	4b04      	ldr	r3, [pc, #16]	; (800034c <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	f023 0302 	bic.w	r3, r3, #2
 8000342:	6053      	str	r3, [r2, #4]
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	e0042000 	.word	0xe0042000

08000350 <HAL_DBGMCU_EnableDBGStandbyMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000354:	4a04      	ldr	r2, [pc, #16]	; (8000368 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8000356:	4b04      	ldr	r3, [pc, #16]	; (8000368 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8000358:	685b      	ldr	r3, [r3, #4]
 800035a:	f043 0304 	orr.w	r3, r3, #4
 800035e:	6053      	str	r3, [r2, #4]
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	e0042000 	.word	0xe0042000

0800036c <HAL_DBGMCU_DisableDBGStandbyMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000370:	4a04      	ldr	r2, [pc, #16]	; (8000384 <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8000372:	4b04      	ldr	r3, [pc, #16]	; (8000384 <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	f023 0304 	bic.w	r3, r3, #4
 800037a:	6053      	str	r3, [r2, #4]
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	e0042000 	.word	0xe0042000

08000388 <HAL_GetUID>:
  * @brief Return the unique device identifier (UID based on 96 bits)
  * @param UID: pointer to 3 words array.
  * @retval Device identifier
  */
void HAL_GetUID(uint32_t *UID)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <HAL_GetUID+0x30>)
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	601a      	str	r2, [r3, #0]
  UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	3304      	adds	r3, #4
 800039c:	4a07      	ldr	r2, [pc, #28]	; (80003bc <HAL_GetUID+0x34>)
 800039e:	6812      	ldr	r2, [r2, #0]
 80003a0:	601a      	str	r2, [r3, #0]
  UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3308      	adds	r3, #8
 80003a6:	4a06      	ldr	r2, [pc, #24]	; (80003c0 <HAL_GetUID+0x38>)
 80003a8:	6812      	ldr	r2, [r2, #0]
 80003aa:	601a      	str	r2, [r3, #0]
}
 80003ac:	bf00      	nop
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	1ffff7e8 	.word	0x1ffff7e8
 80003bc:	1ffff7ec 	.word	0x1ffff7ec
 80003c0:	1ffff7f0 	.word	0x1ffff7f0

080003c4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	f003 0307 	and.w	r3, r3, #7
 80003d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <NVIC_SetPriorityGrouping+0x44>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003da:	68ba      	ldr	r2, [r7, #8]
 80003dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003e0:	4013      	ands	r3, r2
 80003e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003f6:	4a04      	ldr	r2, [pc, #16]	; (8000408 <NVIC_SetPriorityGrouping+0x44>)
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	60d3      	str	r3, [r2, #12]
}
 80003fc:	bf00      	nop
 80003fe:	3714      	adds	r7, #20
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	e000ed00 	.word	0xe000ed00

0800040c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000410:	4b04      	ldr	r3, [pc, #16]	; (8000424 <NVIC_GetPriorityGrouping+0x18>)
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	0a1b      	lsrs	r3, r3, #8
 8000416:	f003 0307 	and.w	r3, r3, #7
}
 800041a:	4618      	mov	r0, r3
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	e000ed00 	.word	0xe000ed00

08000428 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000432:	4908      	ldr	r1, [pc, #32]	; (8000454 <NVIC_EnableIRQ+0x2c>)
 8000434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000438:	095b      	lsrs	r3, r3, #5
 800043a:	79fa      	ldrb	r2, [r7, #7]
 800043c:	f002 021f 	and.w	r2, r2, #31
 8000440:	2001      	movs	r0, #1
 8000442:	fa00 f202 	lsl.w	r2, r0, r2
 8000446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	e000e100 	.word	0xe000e100

08000458 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000462:	4909      	ldr	r1, [pc, #36]	; (8000488 <NVIC_DisableIRQ+0x30>)
 8000464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000468:	095b      	lsrs	r3, r3, #5
 800046a:	79fa      	ldrb	r2, [r7, #7]
 800046c:	f002 021f 	and.w	r2, r2, #31
 8000470:	2001      	movs	r0, #1
 8000472:	fa00 f202 	lsl.w	r2, r0, r2
 8000476:	3320      	adds	r3, #32
 8000478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800047c:	bf00      	nop
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	e000e100 	.word	0xe000e100

0800048c <NVIC_GetPendingIRQ>:
  \param [in]      IRQn  Interrupt number.
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
 */
__STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	71fb      	strb	r3, [r7, #7]
  return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8000496:	4a09      	ldr	r2, [pc, #36]	; (80004bc <NVIC_GetPendingIRQ+0x30>)
 8000498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800049c:	095b      	lsrs	r3, r3, #5
 800049e:	3340      	adds	r3, #64	; 0x40
 80004a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	f003 031f 	and.w	r3, r3, #31
 80004aa:	fa22 f303 	lsr.w	r3, r2, r3
 80004ae:	f003 0301 	and.w	r3, r3, #1
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	e000e100 	.word	0xe000e100

080004c0 <NVIC_SetPendingIRQ>:
  \brief   Set Pending Interrupt
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004ca:	4909      	ldr	r1, [pc, #36]	; (80004f0 <NVIC_SetPendingIRQ+0x30>)
 80004cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d0:	095b      	lsrs	r3, r3, #5
 80004d2:	79fa      	ldrb	r2, [r7, #7]
 80004d4:	f002 021f 	and.w	r2, r2, #31
 80004d8:	2001      	movs	r0, #1
 80004da:	fa00 f202 	lsl.w	r2, r0, r2
 80004de:	3340      	adds	r3, #64	; 0x40
 80004e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	e000e100 	.word	0xe000e100

080004f4 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004fe:	4909      	ldr	r1, [pc, #36]	; (8000524 <NVIC_ClearPendingIRQ+0x30>)
 8000500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000504:	095b      	lsrs	r3, r3, #5
 8000506:	79fa      	ldrb	r2, [r7, #7]
 8000508:	f002 021f 	and.w	r2, r2, #31
 800050c:	2001      	movs	r0, #1
 800050e:	fa00 f202 	lsl.w	r2, r0, r2
 8000512:	3360      	adds	r3, #96	; 0x60
 8000514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	e000e100 	.word	0xe000e100

08000528 <NVIC_GetActive>:
  \param [in]      IRQn  Interrupt number.
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
 */
__STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
  return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8000532:	4a09      	ldr	r2, [pc, #36]	; (8000558 <NVIC_GetActive+0x30>)
 8000534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000538:	095b      	lsrs	r3, r3, #5
 800053a:	3380      	adds	r3, #128	; 0x80
 800053c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	f003 031f 	and.w	r3, r3, #31
 8000546:	fa22 f303 	lsr.w	r3, r2, r3
 800054a:	f003 0301 	and.w	r3, r3, #1
}
 800054e:	4618      	mov	r0, r3
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	e000e100 	.word	0xe000e100

0800055c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	6039      	str	r1, [r7, #0]
 8000566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800056c:	2b00      	cmp	r3, #0
 800056e:	da0b      	bge.n	8000588 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000570:	490d      	ldr	r1, [pc, #52]	; (80005a8 <NVIC_SetPriority+0x4c>)
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	f003 030f 	and.w	r3, r3, #15
 8000578:	3b04      	subs	r3, #4
 800057a:	683a      	ldr	r2, [r7, #0]
 800057c:	b2d2      	uxtb	r2, r2
 800057e:	0112      	lsls	r2, r2, #4
 8000580:	b2d2      	uxtb	r2, r2
 8000582:	440b      	add	r3, r1
 8000584:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000586:	e009      	b.n	800059c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000588:	4908      	ldr	r1, [pc, #32]	; (80005ac <NVIC_SetPriority+0x50>)
 800058a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058e:	683a      	ldr	r2, [r7, #0]
 8000590:	b2d2      	uxtb	r2, r2
 8000592:	0112      	lsls	r2, r2, #4
 8000594:	b2d2      	uxtb	r2, r2
 8000596:	440b      	add	r3, r1
 8000598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	e000ed00 	.word	0xe000ed00
 80005ac:	e000e100 	.word	0xe000e100

080005b0 <NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) < 0)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	da0a      	bge.n	80005d8 <NVIC_GetPriority+0x28>
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 80005c2:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <NVIC_GetPriority+0x44>)
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	f003 030f 	and.w	r3, r3, #15
 80005ca:	3b04      	subs	r3, #4
 80005cc:	4413      	add	r3, r2
 80005ce:	7e1b      	ldrb	r3, [r3, #24]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	091b      	lsrs	r3, r3, #4
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	e008      	b.n	80005ea <NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 80005d8:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <NVIC_GetPriority+0x48>)
 80005da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005de:	4413      	add	r3, r2
 80005e0:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	091b      	lsrs	r3, r3, #4
 80005e8:	b2db      	uxtb	r3, r3
  }
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	e000ed00 	.word	0xe000ed00
 80005f8:	e000e100 	.word	0xe000e100

080005fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b089      	sub	sp, #36	; 0x24
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f003 0307 	and.w	r3, r3, #7
 800060e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	f1c3 0307 	rsb	r3, r3, #7
 8000616:	2b04      	cmp	r3, #4
 8000618:	bf28      	it	cs
 800061a:	2304      	movcs	r3, #4
 800061c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	3304      	adds	r3, #4
 8000622:	2b06      	cmp	r3, #6
 8000624:	d902      	bls.n	800062c <NVIC_EncodePriority+0x30>
 8000626:	69fb      	ldr	r3, [r7, #28]
 8000628:	3b03      	subs	r3, #3
 800062a:	e000      	b.n	800062e <NVIC_EncodePriority+0x32>
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000630:	2201      	movs	r2, #1
 8000632:	69bb      	ldr	r3, [r7, #24]
 8000634:	fa02 f303 	lsl.w	r3, r2, r3
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	401a      	ands	r2, r3
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000642:	2101      	movs	r1, #1
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	fa01 f303 	lsl.w	r3, r1, r3
 800064a:	1e59      	subs	r1, r3, #1
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000650:	4313      	orrs	r3, r2
         );
}
 8000652:	4618      	mov	r0, r3
 8000654:	3724      	adds	r7, #36	; 0x24
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 800065c:	b480      	push	{r7}
 800065e:	b089      	sub	sp, #36	; 0x24
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
 8000668:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	f003 0307 	and.w	r3, r3, #7
 8000670:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	f1c3 0307 	rsb	r3, r3, #7
 8000678:	2b04      	cmp	r3, #4
 800067a:	bf28      	it	cs
 800067c:	2304      	movcs	r3, #4
 800067e:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	3304      	adds	r3, #4
 8000684:	2b06      	cmp	r3, #6
 8000686:	d902      	bls.n	800068e <NVIC_DecodePriority+0x32>
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	3b03      	subs	r3, #3
 800068c:	e000      	b.n	8000690 <NVIC_DecodePriority+0x34>
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	40da      	lsrs	r2, r3
 8000698:	2101      	movs	r1, #1
 800069a:	69bb      	ldr	r3, [r7, #24]
 800069c:	fa01 f303 	lsl.w	r3, r1, r3
 80006a0:	3b01      	subs	r3, #1
 80006a2:	401a      	ands	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 80006a8:	2201      	movs	r2, #1
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	1e5a      	subs	r2, r3, #1
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	401a      	ands	r2, r3
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	601a      	str	r2, [r3, #0]
}
 80006ba:	bf00      	nop
 80006bc:	3724      	adds	r7, #36	; 0x24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr

080006c4 <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006c8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80006cc:	4905      	ldr	r1, [pc, #20]	; (80006e4 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <NVIC_SystemReset+0x20>)
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <NVIC_SystemReset+0x24>)
 80006d8:	4313      	orrs	r3, r2
 80006da:	60cb      	str	r3, [r1, #12]
 80006dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80006e0:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80006e2:	e7fd      	b.n	80006e0 <NVIC_SystemReset+0x1c>
 80006e4:	e000ed00 	.word	0xe000ed00
 80006e8:	05fa0004 	.word	0x05fa0004

080006ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	3b01      	subs	r3, #1
 80006f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006fc:	d301      	bcc.n	8000702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006fe:	2301      	movs	r3, #1
 8000700:	e00f      	b.n	8000722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <SysTick_Config+0x40>)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3b01      	subs	r3, #1
 8000708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800070a:	210f      	movs	r1, #15
 800070c:	f04f 30ff 	mov.w	r0, #4294967295
 8000710:	f7ff ff24 	bl	800055c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <SysTick_Config+0x40>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071a:	4b04      	ldr	r3, [pc, #16]	; (800072c <SysTick_Config+0x40>)
 800071c:	2207      	movs	r2, #7
 800071e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	e000e010 	.word	0xe000e010

08000730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff fe43 	bl	80003c4 <NVIC_SetPriorityGrouping>
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000746:	b580      	push	{r7, lr}
 8000748:	b086      	sub	sp, #24
 800074a:	af00      	add	r7, sp, #0
 800074c:	4603      	mov	r3, r0
 800074e:	60b9      	str	r1, [r7, #8]
 8000750:	607a      	str	r2, [r7, #4]
 8000752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000758:	f7ff fe58 	bl	800040c <NVIC_GetPriorityGrouping>
 800075c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	68b9      	ldr	r1, [r7, #8]
 8000762:	6978      	ldr	r0, [r7, #20]
 8000764:	f7ff ff4a 	bl	80005fc <NVIC_EncodePriority>
 8000768:	4602      	mov	r2, r0
 800076a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800076e:	4611      	mov	r1, r2
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff fef3 	bl	800055c <NVIC_SetPriority>
}
 8000776:	bf00      	nop
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
 8000784:	4603      	mov	r3, r0
 8000786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fe4b 	bl	8000428 <NVIC_EnableIRQ>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	4603      	mov	r3, r0
 80007a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fe55 	bl	8000458 <NVIC_DisableIRQ>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80007ba:	f7ff ff83 	bl	80006c4 <NVIC_SystemReset>
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff ff8e 	bl	80006ec <SysTick_Config>
 80007d0:	4603      	mov	r3, r0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 80007de:	f7ff fe15 	bl	800040c <NVIC_GetPriorityGrouping>
 80007e2:	4603      	mov	r3, r0
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60b9      	str	r1, [r7, #8]
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	4603      	mov	r3, r0
 80007f6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 80007f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fed7 	bl	80005b0 <NVIC_GetPriority>
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	68b9      	ldr	r1, [r7, #8]
 8000808:	f7ff ff28 	bl	800065c <NVIC_DecodePriority>
}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff fe4c 	bl	80004c0 <NVIC_SetPendingIRQ>
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 800083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fe24 	bl	800048c <NVIC_GetPendingIRQ>
 8000844:	4603      	mov	r3, r0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fe49 	bl	80004f4 <NVIC_ClearPendingIRQ>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 8000874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fe55 	bl	8000528 <NVIC_GetActive>
 800087e:	4603      	mov	r3, r0
}
 8000880:	4618      	mov	r0, r3
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2b04      	cmp	r3, #4
 8000894:	d106      	bne.n	80008a4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000896:	4a09      	ldr	r2, [pc, #36]	; (80008bc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80008a2:	e005      	b.n	80008b0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008a4:	4a05      	ldr	r2, [pc, #20]	; (80008bc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008a6:	4b05      	ldr	r3, [pc, #20]	; (80008bc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f023 0304 	bic.w	r3, r3, #4
 80008ae:	6013      	str	r3, [r2, #0]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000e010 	.word	0xe000e010

080008c0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80008c4:	f000 f802 	bl	80008cc <HAL_SYSTICK_Callback>
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}

080008cc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr

080008d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d101      	bne.n	80008ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e04f      	b.n	800098e <HAL_DMA_Init+0xb6>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	461a      	mov	r2, r3
 80008f4:	4b28      	ldr	r3, [pc, #160]	; (8000998 <HAL_DMA_Init+0xc0>)
 80008f6:	4413      	add	r3, r2
 80008f8:	4a28      	ldr	r2, [pc, #160]	; (800099c <HAL_DMA_Init+0xc4>)
 80008fa:	fba2 2303 	umull	r2, r3, r2, r3
 80008fe:	091b      	lsrs	r3, r3, #4
 8000900:	009a      	lsls	r2, r3, #2
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a25      	ldr	r2, [pc, #148]	; (80009a0 <HAL_DMA_Init+0xc8>)
 800090a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2202      	movs	r2, #2
 8000910:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000922:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000926:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000930:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800093c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000948:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	4313      	orrs	r3, r2
 8000954:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	601a      	str	r2, [r3, #0]


  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2200      	movs	r2, #0
 800096e:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2200      	movs	r2, #0
 8000974:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2201      	movs	r2, #1
 8000980:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2200      	movs	r2, #0
 8000988:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	bffdfff8 	.word	0xbffdfff8
 800099c:	cccccccd 	.word	0xcccccccd
 80009a0:	40020000 	.word	0x40020000

080009a4 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d101      	bne.n	80009b6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e03a      	b.n	8000a2c <HAL_DMA_DeInit+0x88>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	6812      	ldr	r2, [r2, #0]
 80009be:	6812      	ldr	r2, [r2, #0]
 80009c0:	f022 0201 	bic.w	r2, r2, #1
 80009c4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2200      	movs	r2, #0
 80009d4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	461a      	mov	r2, r3
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_DMA_DeInit+0x94>)
 80009ee:	4413      	add	r3, r2
 80009f0:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <HAL_DMA_DeInit+0x98>)
 80009f2:	fba2 2303 	umull	r2, r3, r2, r3
 80009f6:	091b      	lsrs	r3, r3, #4
 80009f8:	009a      	lsls	r2, r3, #2
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a0f      	ldr	r2, [pc, #60]	; (8000a40 <HAL_DMA_DeInit+0x9c>)
 8000a02:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a12:	605a      	str	r2, [r3, #4]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000a2a:	2300      	movs	r3, #0
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	bffdfff8 	.word	0xbffdfff8
 8000a3c:	cccccccd 	.word	0xcccccccd
 8000a40:	40020000 	.word	0x40020000

08000a44 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
 8000a50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d101      	bne.n	8000a64 <HAL_DMA_Start+0x20>
 8000a60:	2302      	movs	r3, #2
 8000a62:	e02d      	b.n	8000ac0 <HAL_DMA_Start+0x7c>
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2201      	movs	r2, #1
 8000a68:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d11d      	bne.n	8000ab2 <HAL_DMA_Start+0x6e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	2202      	movs	r2, #2
 8000a7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	2200      	movs	r2, #0
 8000a82:	639a      	str	r2, [r3, #56]	; 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	6812      	ldr	r2, [r2, #0]
 8000a8c:	6812      	ldr	r2, [r2, #0]
 8000a8e:	f022 0201 	bic.w	r2, r2, #1
 8000a92:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	68b9      	ldr	r1, [r7, #8]
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	f000 fc92 	bl	80013c4 <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	68fa      	ldr	r2, [r7, #12]
 8000aa6:	6812      	ldr	r2, [r2, #0]
 8000aa8:	6812      	ldr	r2, [r2, #0]
 8000aaa:	f042 0201 	orr.w	r2, r2, #1
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	e005      	b.n	8000abe <HAL_DMA_Start+0x7a>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 8000aba:	2302      	movs	r3, #2
 8000abc:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 8000abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d101      	bne.n	8000ae8 <HAL_DMA_Start_IT+0x20>
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	e04a      	b.n	8000b7e <HAL_DMA_Start_IT+0xb6>
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2201      	movs	r2, #1
 8000aec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d13a      	bne.n	8000b70 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2202      	movs	r2, #2
 8000afe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	2200      	movs	r2, #0
 8000b06:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	6812      	ldr	r2, [r2, #0]
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	f022 0201 	bic.w	r2, r2, #1
 8000b16:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	68b9      	ldr	r1, [r7, #8]
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f000 fc50 	bl	80013c4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d008      	beq.n	8000b3e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	6812      	ldr	r2, [r2, #0]
 8000b34:	6812      	ldr	r2, [r2, #0]
 8000b36:	f042 020e 	orr.w	r2, r2, #14
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	e00f      	b.n	8000b5e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	6812      	ldr	r2, [r2, #0]
 8000b46:	6812      	ldr	r2, [r2, #0]
 8000b48:	f022 0204 	bic.w	r2, r2, #4
 8000b4c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	6812      	ldr	r2, [r2, #0]
 8000b56:	6812      	ldr	r2, [r2, #0]
 8000b58:	f042 020a 	orr.w	r2, r2, #10
 8000b5c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	6812      	ldr	r2, [r2, #0]
 8000b66:	6812      	ldr	r2, [r2, #0]
 8000b68:	f042 0201 	orr.w	r2, r2, #1
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	e005      	b.n	8000b7c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2200      	movs	r2, #0
 8000b74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b085      	sub	sp, #20
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	73fb      	strb	r3, [r7, #15]

  /* Disable DMA IT */
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	6812      	ldr	r2, [r2, #0]
 8000b9a:	6812      	ldr	r2, [r2, #0]
 8000b9c:	f022 020e 	bic.w	r2, r2, #14
 8000ba0:	601a      	str	r2, [r3, #0]
    
  /* Disable the channel */
  __HAL_DMA_DISABLE(hdma);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	6812      	ldr	r2, [r2, #0]
 8000baa:	6812      	ldr	r2, [r2, #0]
 8000bac:	f022 0201 	bic.w	r2, r2, #1
 8000bb0:	601a      	str	r2, [r3, #0]
    
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000bba:	2101      	movs	r1, #1
 8000bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc0:	605a      	str	r2, [r3, #4]

  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr

08000bde <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b084      	sub	sp, #16
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d005      	beq.n	8000c00 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	73fb      	strb	r3, [r7, #15]
 8000bfe:	e057      	b.n	8000cb0 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	6812      	ldr	r2, [r2, #0]
 8000c08:	6812      	ldr	r2, [r2, #0]
 8000c0a:	f022 020e 	bic.w	r2, r2, #14
 8000c0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	6812      	ldr	r2, [r2, #0]
 8000c18:	6812      	ldr	r2, [r2, #0]
 8000c1a:	f022 0201 	bic.w	r2, r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c20:	4a26      	ldr	r2, [pc, #152]	; (8000cbc <HAL_DMA_Abort_IT+0xde>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4619      	mov	r1, r3
 8000c28:	4b25      	ldr	r3, [pc, #148]	; (8000cc0 <HAL_DMA_Abort_IT+0xe2>)
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	d02e      	beq.n	8000c8c <HAL_DMA_Abort_IT+0xae>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4619      	mov	r1, r3
 8000c34:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <HAL_DMA_Abort_IT+0xe6>)
 8000c36:	4299      	cmp	r1, r3
 8000c38:	d026      	beq.n	8000c88 <HAL_DMA_Abort_IT+0xaa>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <HAL_DMA_Abort_IT+0xea>)
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d01d      	beq.n	8000c82 <HAL_DMA_Abort_IT+0xa4>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <HAL_DMA_Abort_IT+0xee>)
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	d014      	beq.n	8000c7c <HAL_DMA_Abort_IT+0x9e>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4619      	mov	r1, r3
 8000c58:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <HAL_DMA_Abort_IT+0xf2>)
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	d00b      	beq.n	8000c76 <HAL_DMA_Abort_IT+0x98>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4619      	mov	r1, r3
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <HAL_DMA_Abort_IT+0xf6>)
 8000c66:	4299      	cmp	r1, r3
 8000c68:	d102      	bne.n	8000c70 <HAL_DMA_Abort_IT+0x92>
 8000c6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c6e:	e00e      	b.n	8000c8e <HAL_DMA_Abort_IT+0xb0>
 8000c70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c74:	e00b      	b.n	8000c8e <HAL_DMA_Abort_IT+0xb0>
 8000c76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c7a:	e008      	b.n	8000c8e <HAL_DMA_Abort_IT+0xb0>
 8000c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c80:	e005      	b.n	8000c8e <HAL_DMA_Abort_IT+0xb0>
 8000c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c86:	e002      	b.n	8000c8e <HAL_DMA_Abort_IT+0xb0>
 8000c88:	2310      	movs	r3, #16
 8000c8a:	e000      	b.n	8000c8e <HAL_DMA_Abort_IT+0xb0>
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2201      	movs	r2, #1
 8000c94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d003      	beq.n	8000cb0 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	4798      	blx	r3
    } 
  }
  return status;
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	40020008 	.word	0x40020008
 8000cc4:	4002001c 	.word	0x4002001c
 8000cc8:	40020030 	.word	0x40020030
 8000ccc:	40020044 	.word	0x40020044
 8000cd0:	40020058 	.word	0x40020058
 8000cd4:	4002006c 	.word	0x4002006c

08000cd8 <HAL_DMA_PollForTransfer>:
  * @param  CompleteLevel: Specifies the DMA level complete.
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  uint32_t temp;
  uint32_t tickstart = 0U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	613b      	str	r3, [r7, #16]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d008      	beq.n	8000d04 <HAL_DMA_PollForTransfer+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2204      	movs	r2, #4
 8000cf6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 2020 	strb.w	r2, [r3, #32]
    return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e186      	b.n	8001012 <HAL_DMA_PollForTransfer+0x33a>
  }

  /* Polling mode not supported in circular mode */
  if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0320 	and.w	r3, r3, #32
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d005      	beq.n	8000d1e <HAL_DMA_PollForTransfer+0x46>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d18:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e179      	b.n	8001012 <HAL_DMA_PollForTransfer+0x33a>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d137      	bne.n	8000d94 <HAL_DMA_PollForTransfer+0xbc>
  {
    /* Transfer Complete flag */
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b94      	ldr	r3, [pc, #592]	; (8000f7c <HAL_DMA_PollForTransfer+0x2a4>)
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d02e      	beq.n	8000d8e <HAL_DMA_PollForTransfer+0xb6>
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b92      	ldr	r3, [pc, #584]	; (8000f80 <HAL_DMA_PollForTransfer+0x2a8>)
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d026      	beq.n	8000d8a <HAL_DMA_PollForTransfer+0xb2>
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b90      	ldr	r3, [pc, #576]	; (8000f84 <HAL_DMA_PollForTransfer+0x2ac>)
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d01d      	beq.n	8000d84 <HAL_DMA_PollForTransfer+0xac>
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b8e      	ldr	r3, [pc, #568]	; (8000f88 <HAL_DMA_PollForTransfer+0x2b0>)
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d014      	beq.n	8000d7e <HAL_DMA_PollForTransfer+0xa6>
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b8c      	ldr	r3, [pc, #560]	; (8000f8c <HAL_DMA_PollForTransfer+0x2b4>)
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d00b      	beq.n	8000d78 <HAL_DMA_PollForTransfer+0xa0>
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b8a      	ldr	r3, [pc, #552]	; (8000f90 <HAL_DMA_PollForTransfer+0x2b8>)
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d102      	bne.n	8000d72 <HAL_DMA_PollForTransfer+0x9a>
 8000d6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d70:	e00e      	b.n	8000d90 <HAL_DMA_PollForTransfer+0xb8>
 8000d72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d76:	e00b      	b.n	8000d90 <HAL_DMA_PollForTransfer+0xb8>
 8000d78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d7c:	e008      	b.n	8000d90 <HAL_DMA_PollForTransfer+0xb8>
 8000d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d82:	e005      	b.n	8000d90 <HAL_DMA_PollForTransfer+0xb8>
 8000d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d88:	e002      	b.n	8000d90 <HAL_DMA_PollForTransfer+0xb8>
 8000d8a:	2320      	movs	r3, #32
 8000d8c:	e000      	b.n	8000d90 <HAL_DMA_PollForTransfer+0xb8>
 8000d8e:	2302      	movs	r3, #2
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	e036      	b.n	8000e02 <HAL_DMA_PollForTransfer+0x12a>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b78      	ldr	r3, [pc, #480]	; (8000f7c <HAL_DMA_PollForTransfer+0x2a4>)
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d02e      	beq.n	8000dfe <HAL_DMA_PollForTransfer+0x126>
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b76      	ldr	r3, [pc, #472]	; (8000f80 <HAL_DMA_PollForTransfer+0x2a8>)
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d026      	beq.n	8000dfa <HAL_DMA_PollForTransfer+0x122>
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b74      	ldr	r3, [pc, #464]	; (8000f84 <HAL_DMA_PollForTransfer+0x2ac>)
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d01d      	beq.n	8000df4 <HAL_DMA_PollForTransfer+0x11c>
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b72      	ldr	r3, [pc, #456]	; (8000f88 <HAL_DMA_PollForTransfer+0x2b0>)
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d014      	beq.n	8000dee <HAL_DMA_PollForTransfer+0x116>
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b70      	ldr	r3, [pc, #448]	; (8000f8c <HAL_DMA_PollForTransfer+0x2b4>)
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d00b      	beq.n	8000de8 <HAL_DMA_PollForTransfer+0x110>
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b6e      	ldr	r3, [pc, #440]	; (8000f90 <HAL_DMA_PollForTransfer+0x2b8>)
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d102      	bne.n	8000de2 <HAL_DMA_PollForTransfer+0x10a>
 8000ddc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000de0:	e00e      	b.n	8000e00 <HAL_DMA_PollForTransfer+0x128>
 8000de2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000de6:	e00b      	b.n	8000e00 <HAL_DMA_PollForTransfer+0x128>
 8000de8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000dec:	e008      	b.n	8000e00 <HAL_DMA_PollForTransfer+0x128>
 8000dee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000df2:	e005      	b.n	8000e00 <HAL_DMA_PollForTransfer+0x128>
 8000df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df8:	e002      	b.n	8000e00 <HAL_DMA_PollForTransfer+0x128>
 8000dfa:	2340      	movs	r3, #64	; 0x40
 8000dfc:	e000      	b.n	8000e00 <HAL_DMA_PollForTransfer+0x128>
 8000dfe:	2304      	movs	r3, #4
 8000e00:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e02:	f7ff fa07 	bl	8000214 <HAL_GetTick>
 8000e06:	6138      	str	r0, [r7, #16]

  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 8000e08:	e071      	b.n	8000eee <HAL_DMA_PollForTransfer+0x216>
  {
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 8000e0a:	4b62      	ldr	r3, [pc, #392]	; (8000f94 <HAL_DMA_PollForTransfer+0x2bc>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4619      	mov	r1, r3
 8000e14:	4b59      	ldr	r3, [pc, #356]	; (8000f7c <HAL_DMA_PollForTransfer+0x2a4>)
 8000e16:	4299      	cmp	r1, r3
 8000e18:	d02e      	beq.n	8000e78 <HAL_DMA_PollForTransfer+0x1a0>
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4b57      	ldr	r3, [pc, #348]	; (8000f80 <HAL_DMA_PollForTransfer+0x2a8>)
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d026      	beq.n	8000e74 <HAL_DMA_PollForTransfer+0x19c>
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4b55      	ldr	r3, [pc, #340]	; (8000f84 <HAL_DMA_PollForTransfer+0x2ac>)
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d01d      	beq.n	8000e6e <HAL_DMA_PollForTransfer+0x196>
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4619      	mov	r1, r3
 8000e38:	4b53      	ldr	r3, [pc, #332]	; (8000f88 <HAL_DMA_PollForTransfer+0x2b0>)
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	d014      	beq.n	8000e68 <HAL_DMA_PollForTransfer+0x190>
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4619      	mov	r1, r3
 8000e44:	4b51      	ldr	r3, [pc, #324]	; (8000f8c <HAL_DMA_PollForTransfer+0x2b4>)
 8000e46:	4299      	cmp	r1, r3
 8000e48:	d00b      	beq.n	8000e62 <HAL_DMA_PollForTransfer+0x18a>
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4b4f      	ldr	r3, [pc, #316]	; (8000f90 <HAL_DMA_PollForTransfer+0x2b8>)
 8000e52:	4299      	cmp	r1, r3
 8000e54:	d102      	bne.n	8000e5c <HAL_DMA_PollForTransfer+0x184>
 8000e56:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000e5a:	e00e      	b.n	8000e7a <HAL_DMA_PollForTransfer+0x1a2>
 8000e5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e60:	e00b      	b.n	8000e7a <HAL_DMA_PollForTransfer+0x1a2>
 8000e62:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000e66:	e008      	b.n	8000e7a <HAL_DMA_PollForTransfer+0x1a2>
 8000e68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e6c:	e005      	b.n	8000e7a <HAL_DMA_PollForTransfer+0x1a2>
 8000e6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e72:	e002      	b.n	8000e7a <HAL_DMA_PollForTransfer+0x1a2>
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	e000      	b.n	8000e7a <HAL_DMA_PollForTransfer+0x1a2>
 8000e78:	2308      	movs	r3, #8
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d017      	beq.n	8000eb0 <HAL_DMA_PollForTransfer+0x1d8>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Clear all flags */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000e88:	2101      	movs	r1, #1
 8000e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e94:	f043 0201 	orr.w	r2, r3, #1
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e0b0      	b.n	8001012 <HAL_DMA_PollForTransfer+0x33a>
    }
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb6:	d01a      	beq.n	8000eee <HAL_DMA_PollForTransfer+0x216>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d007      	beq.n	8000ece <HAL_DMA_PollForTransfer+0x1f6>
 8000ebe:	f7ff f9a9 	bl	8000214 <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	1ad2      	subs	r2, r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d90f      	bls.n	8000eee <HAL_DMA_PollForTransfer+0x216>
      {
        /* Update error code */
        SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ed2:	f043 0220 	orr.w	r2, r3, #32
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	639a      	str	r2, [r3, #56]	; 0x38

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2201      	movs	r2, #1
 8000ede:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e091      	b.n	8001012 <HAL_DMA_PollForTransfer+0x33a>
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 8000eee:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <HAL_DMA_PollForTransfer+0x2bc>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d087      	beq.n	8000e0a <HAL_DMA_PollForTransfer+0x132>
      }
    }
  }

  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d14b      	bne.n	8000f98 <HAL_DMA_PollForTransfer+0x2c0>
  {
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f00:	4a24      	ldr	r2, [pc, #144]	; (8000f94 <HAL_DMA_PollForTransfer+0x2bc>)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4619      	mov	r1, r3
 8000f08:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <HAL_DMA_PollForTransfer+0x2a4>)
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d02e      	beq.n	8000f6c <HAL_DMA_PollForTransfer+0x294>
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4619      	mov	r1, r3
 8000f14:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <HAL_DMA_PollForTransfer+0x2a8>)
 8000f16:	4299      	cmp	r1, r3
 8000f18:	d026      	beq.n	8000f68 <HAL_DMA_PollForTransfer+0x290>
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_DMA_PollForTransfer+0x2ac>)
 8000f22:	4299      	cmp	r1, r3
 8000f24:	d01d      	beq.n	8000f62 <HAL_DMA_PollForTransfer+0x28a>
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <HAL_DMA_PollForTransfer+0x2b0>)
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d014      	beq.n	8000f5c <HAL_DMA_PollForTransfer+0x284>
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4619      	mov	r1, r3
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <HAL_DMA_PollForTransfer+0x2b4>)
 8000f3a:	4299      	cmp	r1, r3
 8000f3c:	d00b      	beq.n	8000f56 <HAL_DMA_PollForTransfer+0x27e>
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4619      	mov	r1, r3
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_DMA_PollForTransfer+0x2b8>)
 8000f46:	4299      	cmp	r1, r3
 8000f48:	d102      	bne.n	8000f50 <HAL_DMA_PollForTransfer+0x278>
 8000f4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f4e:	e00e      	b.n	8000f6e <HAL_DMA_PollForTransfer+0x296>
 8000f50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f54:	e00b      	b.n	8000f6e <HAL_DMA_PollForTransfer+0x296>
 8000f56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f5a:	e008      	b.n	8000f6e <HAL_DMA_PollForTransfer+0x296>
 8000f5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f60:	e005      	b.n	8000f6e <HAL_DMA_PollForTransfer+0x296>
 8000f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f66:	e002      	b.n	8000f6e <HAL_DMA_PollForTransfer+0x296>
 8000f68:	2320      	movs	r3, #32
 8000f6a:	e000      	b.n	8000f6e <HAL_DMA_PollForTransfer+0x296>
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	6053      	str	r3, [r2, #4]

    /* The selected Channelx EN bit is cleared (DMA is disabled and
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2201      	movs	r2, #1
 8000f74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8000f78:	e046      	b.n	8001008 <HAL_DMA_PollForTransfer+0x330>
 8000f7a:	bf00      	nop
 8000f7c:	40020008 	.word	0x40020008
 8000f80:	4002001c 	.word	0x4002001c
 8000f84:	40020030 	.word	0x40020030
 8000f88:	40020044 	.word	0x40020044
 8000f8c:	40020058 	.word	0x40020058
 8000f90:	4002006c 	.word	0x4002006c
 8000f94:	40020000 	.word	0x40020000
  }
  else
  {
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f98:	4a20      	ldr	r2, [pc, #128]	; (800101c <HAL_DMA_PollForTransfer+0x344>)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <HAL_DMA_PollForTransfer+0x348>)
 8000fa2:	4299      	cmp	r1, r3
 8000fa4:	d02e      	beq.n	8001004 <HAL_DMA_PollForTransfer+0x32c>
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4619      	mov	r1, r3
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <HAL_DMA_PollForTransfer+0x34c>)
 8000fae:	4299      	cmp	r1, r3
 8000fb0:	d026      	beq.n	8001000 <HAL_DMA_PollForTransfer+0x328>
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <HAL_DMA_PollForTransfer+0x350>)
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	d01d      	beq.n	8000ffa <HAL_DMA_PollForTransfer+0x322>
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4b19      	ldr	r3, [pc, #100]	; (800102c <HAL_DMA_PollForTransfer+0x354>)
 8000fc6:	4299      	cmp	r1, r3
 8000fc8:	d014      	beq.n	8000ff4 <HAL_DMA_PollForTransfer+0x31c>
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <HAL_DMA_PollForTransfer+0x358>)
 8000fd2:	4299      	cmp	r1, r3
 8000fd4:	d00b      	beq.n	8000fee <HAL_DMA_PollForTransfer+0x316>
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_DMA_PollForTransfer+0x35c>)
 8000fde:	4299      	cmp	r1, r3
 8000fe0:	d102      	bne.n	8000fe8 <HAL_DMA_PollForTransfer+0x310>
 8000fe2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fe6:	e00e      	b.n	8001006 <HAL_DMA_PollForTransfer+0x32e>
 8000fe8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000fec:	e00b      	b.n	8001006 <HAL_DMA_PollForTransfer+0x32e>
 8000fee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ff2:	e008      	b.n	8001006 <HAL_DMA_PollForTransfer+0x32e>
 8000ff4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ff8:	e005      	b.n	8001006 <HAL_DMA_PollForTransfer+0x32e>
 8000ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ffe:	e002      	b.n	8001006 <HAL_DMA_PollForTransfer+0x32e>
 8001000:	2340      	movs	r3, #64	; 0x40
 8001002:	e000      	b.n	8001006 <HAL_DMA_PollForTransfer+0x32e>
 8001004:	2304      	movs	r3, #4
 8001006:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40020000 	.word	0x40020000
 8001020:	40020008 	.word	0x40020008
 8001024:	4002001c 	.word	0x4002001c
 8001028:	40020030 	.word	0x40020030
 800102c:	40020044 	.word	0x40020044
 8001030:	40020058 	.word	0x40020058
 8001034:	4002006c 	.word	0x4002006c

08001038 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	2204      	movs	r2, #4
 8001056:	409a      	lsls	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4013      	ands	r3, r2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d055      	beq.n	800110c <HAL_DMA_IRQHandler+0xd4>
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	2b00      	cmp	r3, #0
 8001068:	d050      	beq.n	800110c <HAL_DMA_IRQHandler+0xd4>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0320 	and.w	r3, r3, #32
 8001074:	2b00      	cmp	r3, #0
 8001076:	d107      	bne.n	8001088 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	6812      	ldr	r2, [r2, #0]
 8001080:	6812      	ldr	r2, [r2, #0]
 8001082:	f022 0204 	bic.w	r2, r2, #4
 8001086:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001088:	4a6d      	ldr	r2, [pc, #436]	; (8001240 <HAL_DMA_IRQHandler+0x208>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4619      	mov	r1, r3
 8001090:	4b6c      	ldr	r3, [pc, #432]	; (8001244 <HAL_DMA_IRQHandler+0x20c>)
 8001092:	4299      	cmp	r1, r3
 8001094:	d02e      	beq.n	80010f4 <HAL_DMA_IRQHandler+0xbc>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4619      	mov	r1, r3
 800109c:	4b6a      	ldr	r3, [pc, #424]	; (8001248 <HAL_DMA_IRQHandler+0x210>)
 800109e:	4299      	cmp	r1, r3
 80010a0:	d026      	beq.n	80010f0 <HAL_DMA_IRQHandler+0xb8>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4619      	mov	r1, r3
 80010a8:	4b68      	ldr	r3, [pc, #416]	; (800124c <HAL_DMA_IRQHandler+0x214>)
 80010aa:	4299      	cmp	r1, r3
 80010ac:	d01d      	beq.n	80010ea <HAL_DMA_IRQHandler+0xb2>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4619      	mov	r1, r3
 80010b4:	4b66      	ldr	r3, [pc, #408]	; (8001250 <HAL_DMA_IRQHandler+0x218>)
 80010b6:	4299      	cmp	r1, r3
 80010b8:	d014      	beq.n	80010e4 <HAL_DMA_IRQHandler+0xac>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4619      	mov	r1, r3
 80010c0:	4b64      	ldr	r3, [pc, #400]	; (8001254 <HAL_DMA_IRQHandler+0x21c>)
 80010c2:	4299      	cmp	r1, r3
 80010c4:	d00b      	beq.n	80010de <HAL_DMA_IRQHandler+0xa6>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4619      	mov	r1, r3
 80010cc:	4b62      	ldr	r3, [pc, #392]	; (8001258 <HAL_DMA_IRQHandler+0x220>)
 80010ce:	4299      	cmp	r1, r3
 80010d0:	d102      	bne.n	80010d8 <HAL_DMA_IRQHandler+0xa0>
 80010d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010d6:	e00e      	b.n	80010f6 <HAL_DMA_IRQHandler+0xbe>
 80010d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010dc:	e00b      	b.n	80010f6 <HAL_DMA_IRQHandler+0xbe>
 80010de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010e2:	e008      	b.n	80010f6 <HAL_DMA_IRQHandler+0xbe>
 80010e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010e8:	e005      	b.n	80010f6 <HAL_DMA_IRQHandler+0xbe>
 80010ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ee:	e002      	b.n	80010f6 <HAL_DMA_IRQHandler+0xbe>
 80010f0:	2340      	movs	r3, #64	; 0x40
 80010f2:	e000      	b.n	80010f6 <HAL_DMA_IRQHandler+0xbe>
 80010f4:	2304      	movs	r3, #4
 80010f6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 809a 	beq.w	8001236 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800110a:	e094      	b.n	8001236 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	2202      	movs	r2, #2
 8001112:	409a      	lsls	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4013      	ands	r3, r2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d05c      	beq.n	80011d6 <HAL_DMA_IRQHandler+0x19e>
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d057      	beq.n	80011d6 <HAL_DMA_IRQHandler+0x19e>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0320 	and.w	r3, r3, #32
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10b      	bne.n	800114c <HAL_DMA_IRQHandler+0x114>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	6812      	ldr	r2, [r2, #0]
 800113c:	6812      	ldr	r2, [r2, #0]
 800113e:	f022 020a 	bic.w	r2, r2, #10
 8001142:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800114c:	4a3c      	ldr	r2, [pc, #240]	; (8001240 <HAL_DMA_IRQHandler+0x208>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4619      	mov	r1, r3
 8001154:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <HAL_DMA_IRQHandler+0x20c>)
 8001156:	4299      	cmp	r1, r3
 8001158:	d02e      	beq.n	80011b8 <HAL_DMA_IRQHandler+0x180>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4619      	mov	r1, r3
 8001160:	4b39      	ldr	r3, [pc, #228]	; (8001248 <HAL_DMA_IRQHandler+0x210>)
 8001162:	4299      	cmp	r1, r3
 8001164:	d026      	beq.n	80011b4 <HAL_DMA_IRQHandler+0x17c>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4619      	mov	r1, r3
 800116c:	4b37      	ldr	r3, [pc, #220]	; (800124c <HAL_DMA_IRQHandler+0x214>)
 800116e:	4299      	cmp	r1, r3
 8001170:	d01d      	beq.n	80011ae <HAL_DMA_IRQHandler+0x176>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4619      	mov	r1, r3
 8001178:	4b35      	ldr	r3, [pc, #212]	; (8001250 <HAL_DMA_IRQHandler+0x218>)
 800117a:	4299      	cmp	r1, r3
 800117c:	d014      	beq.n	80011a8 <HAL_DMA_IRQHandler+0x170>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4619      	mov	r1, r3
 8001184:	4b33      	ldr	r3, [pc, #204]	; (8001254 <HAL_DMA_IRQHandler+0x21c>)
 8001186:	4299      	cmp	r1, r3
 8001188:	d00b      	beq.n	80011a2 <HAL_DMA_IRQHandler+0x16a>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4619      	mov	r1, r3
 8001190:	4b31      	ldr	r3, [pc, #196]	; (8001258 <HAL_DMA_IRQHandler+0x220>)
 8001192:	4299      	cmp	r1, r3
 8001194:	d102      	bne.n	800119c <HAL_DMA_IRQHandler+0x164>
 8001196:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800119a:	e00e      	b.n	80011ba <HAL_DMA_IRQHandler+0x182>
 800119c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011a0:	e00b      	b.n	80011ba <HAL_DMA_IRQHandler+0x182>
 80011a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011a6:	e008      	b.n	80011ba <HAL_DMA_IRQHandler+0x182>
 80011a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ac:	e005      	b.n	80011ba <HAL_DMA_IRQHandler+0x182>
 80011ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011b2:	e002      	b.n	80011ba <HAL_DMA_IRQHandler+0x182>
 80011b4:	2320      	movs	r3, #32
 80011b6:	e000      	b.n	80011ba <HAL_DMA_IRQHandler+0x182>
 80011b8:	2302      	movs	r3, #2
 80011ba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d034      	beq.n	8001236 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80011d4:	e02f      	b.n	8001236 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	2208      	movs	r2, #8
 80011dc:	409a      	lsls	r2, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4013      	ands	r3, r2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d028      	beq.n	8001238 <HAL_DMA_IRQHandler+0x200>
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	f003 0308 	and.w	r3, r3, #8
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d023      	beq.n	8001238 <HAL_DMA_IRQHandler+0x200>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	6812      	ldr	r2, [r2, #0]
 80011f8:	6812      	ldr	r2, [r2, #0]
 80011fa:	f022 020e 	bic.w	r2, r2, #14
 80011fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001208:	2101      	movs	r1, #1
 800120a:	fa01 f202 	lsl.w	r2, r1, r2
 800120e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	2b00      	cmp	r3, #0
 800122c:	d004      	beq.n	8001238 <HAL_DMA_IRQHandler+0x200>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	4798      	blx	r3
    }
  }
  return;
 8001236:	bf00      	nop
 8001238:	bf00      	nop
}
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40020000 	.word	0x40020000
 8001244:	40020008 	.word	0x40020008
 8001248:	4002001c 	.word	0x4002001c
 800124c:	40020030 	.word	0x40020030
 8001250:	40020044 	.word	0x40020044
 8001254:	40020058 	.word	0x40020058
 8001258:	4002006c 	.word	0x4002006c

0800125c <HAL_DMA_RegisterCallback>:
  * @param pCallback: pointer to private callbacsk function which has pointer to 
  *                   a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                          
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	460b      	mov	r3, r1
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	75fb      	strb	r3, [r7, #23]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d101      	bne.n	800127c <HAL_DMA_RegisterCallback+0x20>
 8001278:	2302      	movs	r3, #2
 800127a:	e032      	b.n	80012e2 <HAL_DMA_RegisterCallback+0x86>
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2201      	movs	r2, #1
 8001280:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800128a:	2b01      	cmp	r3, #1
 800128c:	d122      	bne.n	80012d4 <HAL_DMA_RegisterCallback+0x78>
  {
    switch (CallbackID)
 800128e:	7afb      	ldrb	r3, [r7, #11]
 8001290:	2b03      	cmp	r3, #3
 8001292:	d81b      	bhi.n	80012cc <HAL_DMA_RegisterCallback+0x70>
 8001294:	a201      	add	r2, pc, #4	; (adr r2, 800129c <HAL_DMA_RegisterCallback+0x40>)
 8001296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129a:	bf00      	nop
 800129c:	080012ad 	.word	0x080012ad
 80012a0:	080012b5 	.word	0x080012b5
 80012a4:	080012bd 	.word	0x080012bd
 80012a8:	080012c5 	.word	0x080012c5
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80012b2:	e011      	b.n	80012d8 <HAL_DMA_RegisterCallback+0x7c>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	62da      	str	r2, [r3, #44]	; 0x2c
      break;         
 80012ba:	e00d      	b.n	80012d8 <HAL_DMA_RegisterCallback+0x7c>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	631a      	str	r2, [r3, #48]	; 0x30
      break;         
 80012c2:	e009      	b.n	80012d8 <HAL_DMA_RegisterCallback+0x7c>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	635a      	str	r2, [r3, #52]	; 0x34
      break; 
 80012ca:	e005      	b.n	80012d8 <HAL_DMA_RegisterCallback+0x7c>
      
    default:
      status = HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	75fb      	strb	r3, [r7, #23]
      break;                                                            
 80012d0:	bf00      	nop
 80012d2:	e001      	b.n	80012d8 <HAL_DMA_RegisterCallback+0x7c>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	75fb      	strb	r3, [r7, #23]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	371c      	adds	r7, #28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <HAL_DMA_UnRegisterCallback>:
  * @param CallbackID: User Callback identifer
  *                    a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d101      	bne.n	800130a <HAL_DMA_UnRegisterCallback+0x1e>
 8001306:	2302      	movs	r3, #2
 8001308:	e040      	b.n	800138c <HAL_DMA_UnRegisterCallback+0xa0>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001318:	2b01      	cmp	r3, #1
 800131a:	d130      	bne.n	800137e <HAL_DMA_UnRegisterCallback+0x92>
  {
    switch (CallbackID)
 800131c:	78fb      	ldrb	r3, [r7, #3]
 800131e:	2b04      	cmp	r3, #4
 8001320:	d829      	bhi.n	8001376 <HAL_DMA_UnRegisterCallback+0x8a>
 8001322:	a201      	add	r2, pc, #4	; (adr r2, 8001328 <HAL_DMA_UnRegisterCallback+0x3c>)
 8001324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001328:	0800133d 	.word	0x0800133d
 800132c:	08001345 	.word	0x08001345
 8001330:	0800134d 	.word	0x0800134d
 8001334:	08001355 	.word	0x08001355
 8001338:	0800135d 	.word	0x0800135d
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8001342:	e01e      	b.n	8001382 <HAL_DMA_UnRegisterCallback+0x96>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	62da      	str	r2, [r3, #44]	; 0x2c
      break;         
 800134a:	e01a      	b.n	8001382 <HAL_DMA_UnRegisterCallback+0x96>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	631a      	str	r2, [r3, #48]	; 0x30
      break;         
 8001352:	e016      	b.n	8001382 <HAL_DMA_UnRegisterCallback+0x96>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	635a      	str	r2, [r3, #52]	; 0x34
      break; 
 800135a:	e012      	b.n	8001382 <HAL_DMA_UnRegisterCallback+0x96>

    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	629a      	str	r2, [r3, #40]	; 0x28
      hdma->XferHalfCpltCallback = NULL;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	62da      	str	r2, [r3, #44]	; 0x2c
      hdma->XferErrorCallback = NULL;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	631a      	str	r2, [r3, #48]	; 0x30
      hdma->XferAbortCallback = NULL;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	635a      	str	r2, [r3, #52]	; 0x34
      break; 
 8001374:	e005      	b.n	8001382 <HAL_DMA_UnRegisterCallback+0x96>

    default:
      status = HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	73fb      	strb	r3, [r7, #15]
      break;
 800137a:	bf00      	nop
 800137c:	e001      	b.n	8001382 <HAL_DMA_UnRegisterCallback+0x96>
    }
  }
  else
  {
    status = HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	73fb      	strb	r3, [r7, #15]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 800138a:	7bfb      	ldrb	r3, [r7, #15]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
 80013d0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013da:	2101      	movs	r1, #1
 80013dc:	fa01 f202 	lsl.w	r2, r1, r2
 80013e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b10      	cmp	r3, #16
 80013f0:	d108      	bne.n	8001404 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001402:	e007      	b.n	8001414 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	60da      	str	r2, [r3, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop

08001420 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800143a:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <HAL_FLASH_Program+0xd8>)
 800143c:	7e1b      	ldrb	r3, [r3, #24]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d101      	bne.n	8001446 <HAL_FLASH_Program+0x26>
 8001442:	2302      	movs	r3, #2
 8001444:	e054      	b.n	80014f0 <HAL_FLASH_Program+0xd0>
 8001446:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <HAL_FLASH_Program+0xd8>)
 8001448:	2201      	movs	r2, #1
 800144a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800144c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001450:	f000 fa16 	bl	8001880 <FLASH_WaitForLastOperation>
 8001454:	4603      	mov	r3, r0
 8001456:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001458:	7dfb      	ldrb	r3, [r7, #23]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d144      	bne.n	80014e8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d102      	bne.n	800146a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001464:	2301      	movs	r3, #1
 8001466:	757b      	strb	r3, [r7, #21]
 8001468:	e007      	b.n	800147a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d102      	bne.n	8001476 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001470:	2302      	movs	r3, #2
 8001472:	757b      	strb	r3, [r7, #21]
 8001474:	e001      	b.n	800147a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001476:	2304      	movs	r3, #4
 8001478:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800147a:	2300      	movs	r3, #0
 800147c:	75bb      	strb	r3, [r7, #22]
 800147e:	e02d      	b.n	80014dc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001480:	7dbb      	ldrb	r3, [r7, #22]
 8001482:	005a      	lsls	r2, r3, #1
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	eb02 0e03 	add.w	lr, r2, r3
 800148a:	7dbb      	ldrb	r3, [r7, #22]
 800148c:	0119      	lsls	r1, r3, #4
 800148e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001492:	f1c1 0620 	rsb	r6, r1, #32
 8001496:	f1a1 0020 	sub.w	r0, r1, #32
 800149a:	fa22 f401 	lsr.w	r4, r2, r1
 800149e:	fa03 f606 	lsl.w	r6, r3, r6
 80014a2:	4334      	orrs	r4, r6
 80014a4:	fa23 f000 	lsr.w	r0, r3, r0
 80014a8:	4304      	orrs	r4, r0
 80014aa:	fa23 f501 	lsr.w	r5, r3, r1
 80014ae:	b2a3      	uxth	r3, r4
 80014b0:	4619      	mov	r1, r3
 80014b2:	4670      	mov	r0, lr
 80014b4:	f000 f9c8 	bl	8001848 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80014b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014bc:	f000 f9e0 	bl	8001880 <FLASH_WaitForLastOperation>
 80014c0:	4603      	mov	r3, r0
 80014c2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <HAL_FLASH_Program+0xdc>)
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <HAL_FLASH_Program+0xdc>)
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	f023 0301 	bic.w	r3, r3, #1
 80014ce:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80014d0:	7dfb      	ldrb	r3, [r7, #23]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d107      	bne.n	80014e6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80014d6:	7dbb      	ldrb	r3, [r7, #22]
 80014d8:	3301      	adds	r3, #1
 80014da:	75bb      	strb	r3, [r7, #22]
 80014dc:	7dba      	ldrb	r2, [r7, #22]
 80014de:	7d7b      	ldrb	r3, [r7, #21]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d3cd      	bcc.n	8001480 <HAL_FLASH_Program+0x60>
 80014e4:	e000      	b.n	80014e8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80014e6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <HAL_FLASH_Program+0xd8>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	761a      	strb	r2, [r3, #24]

  return status;
 80014ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	371c      	adds	r7, #28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014f8:	20000038 	.word	0x20000038
 80014fc:	40022000 	.word	0x40022000

08001500 <HAL_FLASH_Program_IT>:
  * @param  Data:        Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001512:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <HAL_FLASH_Program_IT+0x88>)
 8001514:	7e1b      	ldrb	r3, [r3, #24]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d101      	bne.n	800151e <HAL_FLASH_Program_IT+0x1e>
 800151a:	2302      	movs	r3, #2
 800151c:	e030      	b.n	8001580 <HAL_FLASH_Program_IT+0x80>
 800151e:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <HAL_FLASH_Program_IT+0x88>)
 8001520:	2201      	movs	r2, #1
 8001522:	761a      	strb	r2, [r3, #24]
    /* Enable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
  }
#else
  /* Enable End of FLASH Operation and Error source interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8001524:	4a19      	ldr	r2, [pc, #100]	; (800158c <HAL_FLASH_Program_IT+0x8c>)
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_FLASH_Program_IT+0x8c>)
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800152e:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */
  
  pFlash.Address = Address;
 8001530:	4a15      	ldr	r2, [pc, #84]	; (8001588 <HAL_FLASH_Program_IT+0x88>)
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	6093      	str	r3, [r2, #8]
  pFlash.Data = Data;
 8001536:	4a14      	ldr	r2, [pc, #80]	; (8001588 <HAL_FLASH_Program_IT+0x88>)
 8001538:	e897 0018 	ldmia.w	r7, {r3, r4}
 800153c:	e9c2 3404 	strd	r3, r4, [r2, #16]

  if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d106      	bne.n	8001554 <HAL_FLASH_Program_IT+0x54>
  {
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMHALFWORD;
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <HAL_FLASH_Program_IT+0x88>)
 8001548:	2203      	movs	r2, #3
 800154a:	701a      	strb	r2, [r3, #0]
    /* Program halfword (16-bit) at a specified address. */
    pFlash.DataRemaining = 1U;
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_FLASH_Program_IT+0x88>)
 800154e:	2201      	movs	r2, #1
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	e00f      	b.n	8001574 <HAL_FLASH_Program_IT+0x74>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d106      	bne.n	8001568 <HAL_FLASH_Program_IT+0x68>
  {
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMWORD;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <HAL_FLASH_Program_IT+0x88>)
 800155c:	2204      	movs	r2, #4
 800155e:	701a      	strb	r2, [r3, #0]
    /* Program word (32-bit : 2*16-bit) at a specified address. */
    pFlash.DataRemaining = 2U;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_FLASH_Program_IT+0x88>)
 8001562:	2202      	movs	r2, #2
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	e005      	b.n	8001574 <HAL_FLASH_Program_IT+0x74>
  }
  else
  {
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMDOUBLEWORD;
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <HAL_FLASH_Program_IT+0x88>)
 800156a:	2205      	movs	r2, #5
 800156c:	701a      	strb	r2, [r3, #0]
    /* Program double word (64-bit : 4*16-bit) at a specified address. */
    pFlash.DataRemaining = 4U;
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_FLASH_Program_IT+0x88>)
 8001570:	2204      	movs	r2, #4
 8001572:	605a      	str	r2, [r3, #4]
  }

  /* Program halfword (16-bit) at a specified address. */
  FLASH_Program_HalfWord(Address, (uint16_t)Data);
 8001574:	883b      	ldrh	r3, [r7, #0]
 8001576:	4619      	mov	r1, r3
 8001578:	68b8      	ldr	r0, [r7, #8]
 800157a:	f000 f965 	bl	8001848 <FLASH_Program_HalfWord>

  return status;
 800157e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001580:	4618      	mov	r0, r3
 8001582:	371c      	adds	r7, #28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd90      	pop	{r4, r7, pc}
 8001588:	20000038 	.word	0x20000038
 800158c:	40022000 	.word	0x40022000

08001590 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8001590:	b5b0      	push	{r4, r5, r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800159a:	4b6c      	ldr	r3, [pc, #432]	; (800174c <HAL_FLASH_IRQHandler+0x1bc>)
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	f003 0310 	and.w	r3, r3, #16
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d105      	bne.n	80015b2 <HAL_FLASH_IRQHandler+0x22>
 80015a6:	4b69      	ldr	r3, [pc, #420]	; (800174c <HAL_FLASH_IRQHandler+0x1bc>)
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00e      	beq.n	80015d0 <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 80015b2:	4b67      	ldr	r3, [pc, #412]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 80015b8:	4b65      	ldr	r3, [pc, #404]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 80015ba:	f04f 32ff 	mov.w	r2, #4294967295
 80015be:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 80015c0:	f000 f9a4 	bl	800190c <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f8ce 	bl	8001766 <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80015ca:	4b61      	ldr	r3, [pc, #388]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80015d0:	4b5e      	ldr	r3, [pc, #376]	; (800174c <HAL_FLASH_IRQHandler+0x1bc>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f003 0320 	and.w	r3, r3, #32
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 809e 	beq.w	800171a <HAL_FLASH_IRQHandler+0x18a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80015de:	4b5b      	ldr	r3, [pc, #364]	; (800174c <HAL_FLASH_IRQHandler+0x1bc>)
 80015e0:	2220      	movs	r2, #32
 80015e2:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 80015e4:	4b5a      	ldr	r3, [pc, #360]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 8095 	beq.w	800171a <HAL_FLASH_IRQHandler+0x18a>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 80015f0:	4b57      	ldr	r3, [pc, #348]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d12d      	bne.n	8001656 <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 80015fa:	4b55      	ldr	r3, [pc, #340]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	4a53      	ldr	r2, [pc, #332]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 8001602:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8001604:	4b52      	ldr	r3, [pc, #328]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d017      	beq.n	800163c <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 800160c:	4b50      	ldr	r3, [pc, #320]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f89e 	bl	8001754 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8001618:	4b4d      	ldr	r3, [pc, #308]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001620:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 8001622:	4a4b      	ldr	r2, [pc, #300]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001628:	4a48      	ldr	r2, [pc, #288]	; (800174c <HAL_FLASH_IRQHandler+0x1bc>)
 800162a:	4b48      	ldr	r3, [pc, #288]	; (800174c <HAL_FLASH_IRQHandler+0x1bc>)
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	f023 0302 	bic.w	r3, r3, #2
 8001632:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 fdb1 	bl	800219c <FLASH_PageErase>
 800163a:	e06e      	b.n	800171a <HAL_FLASH_IRQHandler+0x18a>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 800163c:	f04f 33ff 	mov.w	r3, #4294967295
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	4a43      	ldr	r2, [pc, #268]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001648:	4b41      	ldr	r3, [pc, #260]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f880 	bl	8001754 <HAL_FLASH_EndOfOperationCallback>
 8001654:	e061      	b.n	800171a <HAL_FLASH_IRQHandler+0x18a>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8001656:	4b3e      	ldr	r3, [pc, #248]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d10c      	bne.n	800167a <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001660:	4a3a      	ldr	r2, [pc, #232]	; (800174c <HAL_FLASH_IRQHandler+0x1bc>)
 8001662:	4b3a      	ldr	r3, [pc, #232]	; (800174c <HAL_FLASH_IRQHandler+0x1bc>)
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	f023 0304 	bic.w	r3, r3, #4
 800166a:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 800166c:	2000      	movs	r0, #0
 800166e:	f000 f871 	bl	8001754 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001672:	4b37      	ldr	r3, [pc, #220]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
 8001678:	e04f      	b.n	800171a <HAL_FLASH_IRQHandler+0x18a>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 800167a:	4b35      	ldr	r3, [pc, #212]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	4a33      	ldr	r2, [pc, #204]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 8001682:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8001684:	4b32      	ldr	r3, [pc, #200]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d022      	beq.n	80016d2 <HAL_FLASH_IRQHandler+0x142>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 800168c:	4b30      	ldr	r3, [pc, #192]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	3302      	adds	r3, #2
 8001692:	4a2f      	ldr	r2, [pc, #188]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 8001694:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 8001696:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 800169c:	4b2c      	ldr	r3, [pc, #176]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 800169e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80016a2:	0c14      	lsrs	r4, r2, #16
 80016a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80016a8:	0c1d      	lsrs	r5, r3, #16
 80016aa:	4b29      	ldr	r3, [pc, #164]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 80016ac:	e9c3 4504 	strd	r4, r5, [r3, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80016b0:	4a26      	ldr	r2, [pc, #152]	; (800174c <HAL_FLASH_IRQHandler+0x1bc>)
 80016b2:	4b26      	ldr	r3, [pc, #152]	; (800174c <HAL_FLASH_IRQHandler+0x1bc>)
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	f023 0301 	bic.w	r3, r3, #1
 80016ba:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 80016be:	f103 0410 	add.w	r4, r3, #16
 80016c2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	4619      	mov	r1, r3
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f8bc 	bl	8001848 <FLASH_Program_HalfWord>
 80016d0:	e023      	b.n	800171a <HAL_FLASH_IRQHandler+0x18a>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 80016d2:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d105      	bne.n	80016e8 <HAL_FLASH_IRQHandler+0x158>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80016dc:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 f837 	bl	8001754 <HAL_FLASH_EndOfOperationCallback>
 80016e6:	e011      	b.n	800170c <HAL_FLASH_IRQHandler+0x17c>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d106      	bne.n	8001700 <HAL_FLASH_IRQHandler+0x170>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	3b02      	subs	r3, #2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 f82b 	bl	8001754 <HAL_FLASH_EndOfOperationCallback>
 80016fe:	e005      	b.n	800170c <HAL_FLASH_IRQHandler+0x17c>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	3b06      	subs	r3, #6
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f824 	bl	8001754 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 800170c:	4b10      	ldr	r3, [pc, #64]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 800170e:	f04f 32ff 	mov.w	r2, #4294967295
 8001712:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10e      	bne.n	8001742 <HAL_FLASH_IRQHandler+0x1b2>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8001724:	4a09      	ldr	r2, [pc, #36]	; (800174c <HAL_FLASH_IRQHandler+0x1bc>)
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_FLASH_IRQHandler+0x1bc>)
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	f023 0307 	bic.w	r3, r3, #7
 800172e:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8001730:	4a06      	ldr	r2, [pc, #24]	; (800174c <HAL_FLASH_IRQHandler+0x1bc>)
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_FLASH_IRQHandler+0x1bc>)
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 800173a:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <HAL_FLASH_IRQHandler+0x1c0>)
 800173e:	2200      	movs	r2, #0
 8001740:	761a      	strb	r2, [r3, #24]
  }
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bdb0      	pop	{r4, r5, r7, pc}
 800174a:	bf00      	nop
 800174c:	40022000 	.word	0x40022000
 8001750:	20000038 	.word	0x20000038

08001754 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr

08001766 <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 800177c:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_FLASH_Unlock+0x2c>)
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001784:	2b00      	cmp	r3, #0
 8001786:	d007      	beq.n	8001798 <HAL_FLASH_Unlock+0x20>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_FLASH_Unlock+0x2c>)
 800178a:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <HAL_FLASH_Unlock+0x30>)
 800178c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_FLASH_Unlock+0x2c>)
 8001790:	4a06      	ldr	r2, [pc, #24]	; (80017ac <HAL_FLASH_Unlock+0x34>)
 8001792:	605a      	str	r2, [r3, #4]
  {
    return HAL_ERROR;
  }
  
#endif /* FLASH_BANK2_END */
  return HAL_OK; 
 8001794:	2300      	movs	r3, #0
 8001796:	e000      	b.n	800179a <HAL_FLASH_Unlock+0x22>
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40022000 	.word	0x40022000
 80017a8:	45670123 	.word	0x45670123
 80017ac:	cdef89ab 	.word	0xcdef89ab

080017b0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80017b4:	4a05      	ldr	r2, [pc, #20]	; (80017cc <HAL_FLASH_Lock+0x1c>)
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <HAL_FLASH_Lock+0x1c>)
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017be:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40022000 	.word	0x40022000

080017d0 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_FLASH_OB_Unlock+0x2c>)
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d107      	bne.n	80017f0 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_FLASH_OB_Unlock+0x2c>)
 80017e2:	4a07      	ldr	r2, [pc, #28]	; (8001800 <HAL_FLASH_OB_Unlock+0x30>)
 80017e4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_FLASH_OB_Unlock+0x2c>)
 80017e8:	4a06      	ldr	r2, [pc, #24]	; (8001804 <HAL_FLASH_OB_Unlock+0x34>)
 80017ea:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80017ec:	2300      	movs	r3, #0
 80017ee:	e000      	b.n	80017f2 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40022000 	.word	0x40022000
 8001800:	45670123 	.word	0x45670123
 8001804:	cdef89ab 	.word	0xcdef89ab

08001808 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 800180c:	4a05      	ldr	r2, [pc, #20]	; (8001824 <HAL_FLASH_OB_Lock+0x1c>)
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_FLASH_OB_Lock+0x1c>)
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001816:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40022000 	.word	0x40022000

08001828 <HAL_FLASH_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @note   This function will reset automatically the MCU.
  * @retval None
  */
void HAL_FLASH_OB_Launch(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* Initiates a system reset request to launch the option byte loading */
  HAL_NVIC_SystemReset();
 800182c:	f7fe ffc3 	bl	80007b6 <HAL_NVIC_SystemReset>
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8001838:	4b02      	ldr	r3, [pc, #8]	; (8001844 <HAL_FLASH_GetError+0x10>)
 800183a:	69db      	ldr	r3, [r3, #28]
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	20000038 	.word	0x20000038

08001848 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <FLASH_Program_HalfWord+0x30>)
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800185a:	4a08      	ldr	r2, [pc, #32]	; (800187c <FLASH_Program_HalfWord+0x34>)
 800185c:	4b07      	ldr	r3, [pc, #28]	; (800187c <FLASH_Program_HalfWord+0x34>)
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	887a      	ldrh	r2, [r7, #2]
 800186a:	801a      	strh	r2, [r3, #0]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000038 	.word	0x20000038
 800187c:	40022000 	.word	0x40022000

08001880 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7fe fcc4 	bl	8000214 <HAL_GetTick>
 800188c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800188e:	e010      	b.n	80018b2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001896:	d00c      	beq.n	80018b2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d007      	beq.n	80018ae <FLASH_WaitForLastOperation+0x2e>
 800189e:	f7fe fcb9 	bl	8000214 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	1ad2      	subs	r2, r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d901      	bls.n	80018b2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e025      	b.n	80018fe <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <FLASH_WaitForLastOperation+0x88>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1e8      	bne.n	8001890 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <FLASH_WaitForLastOperation+0x88>)
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f003 0320 	and.w	r3, r3, #32
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d002      	beq.n	80018d0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <FLASH_WaitForLastOperation+0x88>)
 80018cc:	2220      	movs	r2, #32
 80018ce:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80018d0:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <FLASH_WaitForLastOperation+0x88>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10b      	bne.n	80018f4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80018dc:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <FLASH_WaitForLastOperation+0x88>)
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d105      	bne.n	80018f4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80018e8:	4b07      	ldr	r3, [pc, #28]	; (8001908 <FLASH_WaitForLastOperation+0x88>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80018f4:	f000 f80a 	bl	800190c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40022000 	.word	0x40022000

0800190c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001916:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <FLASH_SetErrorCode+0x98>)
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	f003 0310 	and.w	r3, r3, #16
 800191e:	2b00      	cmp	r3, #0
 8001920:	d009      	beq.n	8001936 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001922:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <FLASH_SetErrorCode+0x9c>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f043 0302 	orr.w	r3, r3, #2
 800192a:	4a1f      	ldr	r2, [pc, #124]	; (80019a8 <FLASH_SetErrorCode+0x9c>)
 800192c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f043 0310 	orr.w	r3, r3, #16
 8001934:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001936:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <FLASH_SetErrorCode+0x98>)
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	2b00      	cmp	r3, #0
 8001940:	d009      	beq.n	8001956 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <FLASH_SetErrorCode+0x9c>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	4a17      	ldr	r2, [pc, #92]	; (80019a8 <FLASH_SetErrorCode+0x9c>)
 800194c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <FLASH_SetErrorCode+0x98>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00b      	beq.n	800197a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <FLASH_SetErrorCode+0x9c>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	4a0f      	ldr	r2, [pc, #60]	; (80019a8 <FLASH_SetErrorCode+0x9c>)
 800196c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800196e:	4a0d      	ldr	r2, [pc, #52]	; (80019a4 <FLASH_SetErrorCode+0x98>)
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <FLASH_SetErrorCode+0x98>)
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	f023 0301 	bic.w	r3, r3, #1
 8001978:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f240 1201 	movw	r2, #257	; 0x101
 8001980:	4293      	cmp	r3, r2
 8001982:	d106      	bne.n	8001992 <FLASH_SetErrorCode+0x86>
 8001984:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <FLASH_SetErrorCode+0x98>)
 8001986:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <FLASH_SetErrorCode+0x98>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	61d3      	str	r3, [r2, #28]
}  
 8001990:	e002      	b.n	8001998 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001992:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <FLASH_SetErrorCode+0x98>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	60d3      	str	r3, [r2, #12]
}  
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40022000 	.word	0x40022000
 80019a8:	20000038 	.word	0x20000038

080019ac <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80019be:	4b2f      	ldr	r3, [pc, #188]	; (8001a7c <HAL_FLASHEx_Erase+0xd0>)
 80019c0:	7e1b      	ldrb	r3, [r3, #24]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d101      	bne.n	80019ca <HAL_FLASHEx_Erase+0x1e>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e053      	b.n	8001a72 <HAL_FLASHEx_Erase+0xc6>
 80019ca:	4b2c      	ldr	r3, [pc, #176]	; (8001a7c <HAL_FLASHEx_Erase+0xd0>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d116      	bne.n	8001a06 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80019d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019dc:	f7ff ff50 	bl	8001880 <FLASH_WaitForLastOperation>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d141      	bne.n	8001a6a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80019e6:	2001      	movs	r0, #1
 80019e8:	f000 f988 	bl	8001cfc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019f0:	f7ff ff46 	bl	8001880 <FLASH_WaitForLastOperation>
 80019f4:	4603      	mov	r3, r0
 80019f6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80019f8:	4a21      	ldr	r2, [pc, #132]	; (8001a80 <HAL_FLASHEx_Erase+0xd4>)
 80019fa:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <HAL_FLASHEx_Erase+0xd4>)
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	f023 0304 	bic.w	r3, r3, #4
 8001a02:	6113      	str	r3, [r2, #16]
 8001a04:	e031      	b.n	8001a6a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001a06:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a0a:	f7ff ff39 	bl	8001880 <FLASH_WaitForLastOperation>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d12a      	bne.n	8001a6a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	e019      	b.n	8001a58 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001a24:	68b8      	ldr	r0, [r7, #8]
 8001a26:	f000 fbb9 	bl	800219c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a2a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a2e:	f7ff ff27 	bl	8001880 <FLASH_WaitForLastOperation>
 8001a32:	4603      	mov	r3, r0
 8001a34:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001a36:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <HAL_FLASHEx_Erase+0xd4>)
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_FLASHEx_Erase+0xd4>)
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	f023 0302 	bic.w	r3, r3, #2
 8001a40:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	601a      	str	r2, [r3, #0]
            break;
 8001a4e:	e00c      	b.n	8001a6a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a56:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	029a      	lsls	r2, r3, #10
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	441a      	add	r2, r3
        for(address = pEraseInit->PageAddress;
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d8dc      	bhi.n	8001a24 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <HAL_FLASHEx_Erase+0xd0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	761a      	strb	r2, [r3, #24]

  return status;
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000038 	.word	0x20000038
 8001a80:	40022000 	.word	0x40022000

08001a84 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a90:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <HAL_FLASHEx_Erase_IT+0x7c>)
 8001a92:	7e1b      	ldrb	r3, [r3, #24]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_FLASHEx_Erase_IT+0x18>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e02d      	b.n	8001af8 <HAL_FLASHEx_Erase_IT+0x74>
 8001a9c:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <HAL_FLASHEx_Erase_IT+0x7c>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	761a      	strb	r2, [r3, #24]

  /* If procedure already ongoing, reject the next one */
  if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8001aa2:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <HAL_FLASHEx_Erase_IT+0x7c>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_FLASHEx_Erase_IT+0x2c>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e023      	b.n	8001af8 <HAL_FLASHEx_Erase_IT+0x74>
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation and Error source interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8001ab0:	4a14      	ldr	r2, [pc, #80]	; (8001b04 <HAL_FLASHEx_Erase_IT+0x80>)
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <HAL_FLASHEx_Erase_IT+0x80>)
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001aba:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Enable End of FLASH Operation and Error source interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
  
#endif
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d108      	bne.n	8001ad6 <HAL_FLASHEx_Erase_IT+0x52>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <HAL_FLASHEx_Erase_IT+0x7c>)
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	701a      	strb	r2, [r3, #0]
        FLASH_MassErase(pEraseInit->Banks);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 f914 	bl	8001cfc <FLASH_MassErase>
 8001ad4:	e00f      	b.n	8001af6 <HAL_FLASHEx_Erase_IT+0x72>

    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));

    pFlash.ProcedureOnGoing = FLASH_PROC_PAGEERASE;
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_FLASHEx_Erase_IT+0x7c>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	701a      	strb	r2, [r3, #0]
    pFlash.DataRemaining = pEraseInit->NbPages;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	4a07      	ldr	r2, [pc, #28]	; (8001b00 <HAL_FLASHEx_Erase_IT+0x7c>)
 8001ae2:	6053      	str	r3, [r2, #4]
    pFlash.Address = pEraseInit->PageAddress;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <HAL_FLASHEx_Erase_IT+0x7c>)
 8001aea:	6093      	str	r3, [r2, #8]

    /*Erase 1st page and wait for IT*/
    FLASH_PageErase(pEraseInit->PageAddress);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 fb53 	bl	800219c <FLASH_PageErase>
  }

  return status;
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000038 	.word	0x20000038
 8001b04:	40022000 	.word	0x40022000

08001b08 <HAL_FLASHEx_OBErase>:
  *         (system reset will occur)
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
  uint8_t rdptmp = OB_RDP_LEVEL_0;
 8001b0e:	23a5      	movs	r3, #165	; 0xa5
 8001b10:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	71fb      	strb	r3, [r7, #7]

  /* Get the actual read protection Option Byte value */
  rdptmp = FLASH_OB_GetRDP();
 8001b16:	f000 fb15 	bl	8002144 <FLASH_OB_GetRDP>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71bb      	strb	r3, [r7, #6]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b1e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b22:	f7ff fead 	bl	8001880 <FLASH_WaitForLastOperation>
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]

  if(status == HAL_OK)
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d123      	bne.n	8001b78 <HAL_FLASHEx_OBErase+0x70>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <HAL_FLASHEx_OBErase+0x7c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	61da      	str	r2, [r3, #28]

    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8001b36:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <HAL_FLASHEx_OBErase+0x80>)
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <HAL_FLASHEx_OBErase+0x80>)
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	f043 0320 	orr.w	r3, r3, #32
 8001b40:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001b42:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <HAL_FLASHEx_OBErase+0x80>)
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <HAL_FLASHEx_OBErase+0x80>)
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b4c:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b4e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b52:	f7ff fe95 	bl	8001880 <FLASH_WaitForLastOperation>
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8001b5a:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <HAL_FLASHEx_OBErase+0x80>)
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_FLASHEx_OBErase+0x80>)
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	f023 0320 	bic.w	r3, r3, #32
 8001b64:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d105      	bne.n	8001b78 <HAL_FLASHEx_OBErase+0x70>
    {
      /* Restore the last read protection Option Byte value */
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 8001b6c:	79bb      	ldrb	r3, [r7, #6]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 fa22 	bl	8001fb8 <FLASH_OB_RDP_LevelConfig>
 8001b74:	4603      	mov	r3, r0
 8001b76:	71fb      	strb	r3, [r7, #7]
    }
  }

  /* Return the erase status */
  return status;
 8001b78:	79fb      	ldrb	r3, [r7, #7]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000038 	.word	0x20000038
 8001b88:	40022000 	.word	0x40022000

08001b8c <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b98:	4b39      	ldr	r3, [pc, #228]	; (8001c80 <HAL_FLASHEx_OBProgram+0xf4>)
 8001b9a:	7e1b      	ldrb	r3, [r3, #24]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_FLASHEx_OBProgram+0x18>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e069      	b.n	8001c78 <HAL_FLASHEx_OBProgram+0xec>
 8001ba4:	4b36      	ldr	r3, [pc, #216]	; (8001c80 <HAL_FLASHEx_OBProgram+0xf4>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d01a      	beq.n	8001bec <HAL_FLASHEx_OBProgram+0x60>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d107      	bne.n	8001bce <HAL_FLASHEx_OBProgram+0x42>
    {
      /* Enable of Write protection on the selected page */
      status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 f8b6 	bl	8001d34 <FLASH_OB_EnableWRP>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	73fb      	strb	r3, [r7, #15]
 8001bcc:	e006      	b.n	8001bdc <HAL_FLASHEx_OBProgram+0x50>
    }
    else
    {
      /* Disable of Write protection on the selected page */
      status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 f950 	bl	8001e78 <FLASH_OB_DisableWRP>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	73fb      	strb	r3, [r7, #15]
    }
    if (status != HAL_OK)
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d004      	beq.n	8001bec <HAL_FLASHEx_OBProgram+0x60>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8001be2:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <HAL_FLASHEx_OBProgram+0xf4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	761a      	strb	r2, [r3, #24]
      return status;
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	e045      	b.n	8001c78 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00e      	beq.n	8001c16 <HAL_FLASHEx_OBProgram+0x8a>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7c1b      	ldrb	r3, [r3, #16]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 f9db 	bl	8001fb8 <FLASH_OB_RDP_LevelConfig>
 8001c02:	4603      	mov	r3, r0
 8001c04:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d004      	beq.n	8001c16 <HAL_FLASHEx_OBProgram+0x8a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8001c0c:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <HAL_FLASHEx_OBProgram+0xf4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	761a      	strb	r2, [r3, #24]
      return status;
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	e030      	b.n	8001c78 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* USER configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00e      	beq.n	8001c40 <HAL_FLASHEx_OBProgram+0xb4>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	7c5b      	ldrb	r3, [r3, #17]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 fa16 	bl	8002058 <FLASH_OB_UserConfig>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d004      	beq.n	8001c40 <HAL_FLASHEx_OBProgram+0xb4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_FLASHEx_OBProgram+0xf4>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	761a      	strb	r2, [r3, #24]
      return status;
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
 8001c3e:	e01b      	b.n	8001c78 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* DATA configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d011      	beq.n	8001c70 <HAL_FLASHEx_OBProgram+0xe4>
  {
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	695a      	ldr	r2, [r3, #20]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	7e1b      	ldrb	r3, [r3, #24]
 8001c54:	4619      	mov	r1, r3
 8001c56:	4610      	mov	r0, r2
 8001c58:	f000 fa36 	bl	80020c8 <FLASH_OB_ProgramData>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d004      	beq.n	8001c70 <HAL_FLASHEx_OBProgram+0xe4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_FLASHEx_OBProgram+0xf4>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	761a      	strb	r2, [r3, #24]
      return status;
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	e003      	b.n	8001c78 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <HAL_FLASHEx_OBProgram+0xf4>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	761a      	strb	r2, [r3, #24]

  return status;
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000038 	.word	0x20000038

08001c84 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2207      	movs	r2, #7
 8001c90:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 8001c92:	f000 fa4d 	bl	8002130 <FLASH_OB_GetWRP>
 8001c96:	4602      	mov	r2, r0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8001c9c:	f000 fa52 	bl	8002144 <FLASH_OB_GetRDP>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	741a      	strb	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8001ca8:	f000 fa68 	bl	800217c <FLASH_OB_GetUser>
 8001cac:	4603      	mov	r3, r0
 8001cae:	461a      	mov	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	745a      	strb	r2, [r3, #17]
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_FLASHEx_OBGetUserData>:
  *            @arg @ref OB_DATA_ADDRESS_DATA0
  *            @arg @ref OB_DATA_ADDRESS_DATA1
  * @retval Value programmed in USER data
  */
uint32_t HAL_FLASHEx_OBGetUserData(uint32_t DATAAdress)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t value = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
  
  if (DATAAdress == OB_DATA_ADDRESS_DATA0)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <HAL_FLASHEx_OBGetUserData+0x38>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d105      	bne.n	8001cdc <HAL_FLASHEx_OBGetUserData+0x20>
  {
    /* Get value programmed in OB USER Data0 */
    value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA0) >> FLASH_POSITION_OB_USERDATA0_BIT;
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_FLASHEx_OBGetUserData+0x3c>)
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	0a9b      	lsrs	r3, r3, #10
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	e004      	b.n	8001ce6 <HAL_FLASHEx_OBGetUserData+0x2a>
  }
  else
  {
    /* Get value programmed in OB USER Data1 */
    value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA1) >> FLASH_POSITION_OB_USERDATA1_BIT;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_FLASHEx_OBGetUserData+0x3c>)
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	0c9b      	lsrs	r3, r3, #18
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	60fb      	str	r3, [r7, #12]
  }
  
  return value;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	1ffff804 	.word	0x1ffff804
 8001cf8:	40022000 	.word	0x40022000

08001cfc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <FLASH_MassErase+0x30>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001d0a:	4a09      	ldr	r2, [pc, #36]	; (8001d30 <FLASH_MassErase+0x34>)
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <FLASH_MassErase+0x34>)
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	f043 0304 	orr.w	r3, r3, #4
 8001d14:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001d16:	4a06      	ldr	r2, [pc, #24]	; (8001d30 <FLASH_MassErase+0x34>)
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <FLASH_MassErase+0x34>)
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d20:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	20000038 	.word	0x20000038
 8001d30:	40022000 	.word	0x40022000

08001d34 <FLASH_OB_EnableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write protected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8001d40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d44:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 8001d46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d4a:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 8001d4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d50:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8001d52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d56:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));
    
  /* Get current write protected pages and the new pages to be protected ******/
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 8001d58:	f000 f9ea 	bl	8002130 <FLASH_OB_GetWRP>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	43db      	mvns	r3, r3
 8001d66:	607b      	str	r3, [r7, #4]
  
#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	0a1b      	lsrs	r3, r3, #8
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	0c1b      	lsrs	r3, r3, #16
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	0e1b      	lsrs	r3, r3, #24
 8001d88:	81fb      	strh	r3, [r7, #14]
#elif defined(OB_WRP_PAGES48TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d8a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d8e:	f7ff fd77 	bl	8001880 <FLASH_WaitForLastOperation>
 8001d92:	4603      	mov	r3, r0
 8001d94:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001d96:	7dfb      	ldrb	r3, [r7, #23]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d162      	bne.n	8001e62 <FLASH_OB_EnableWRP+0x12e>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d9c:	4b33      	ldr	r3, [pc, #204]	; (8001e6c <FLASH_OB_EnableWRP+0x138>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 8001da2:	f7ff feb1 	bl	8001b08 <HAL_FLASHEx_OBErase>
 8001da6:	4603      	mov	r3, r0
 8001da8:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 8001daa:	7dfb      	ldrb	r3, [r7, #23]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d158      	bne.n	8001e62 <FLASH_OB_EnableWRP+0x12e>
    {
      /* Enable write protection */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001db0:	4a2f      	ldr	r2, [pc, #188]	; (8001e70 <FLASH_OB_EnableWRP+0x13c>)
 8001db2:	4b2f      	ldr	r3, [pc, #188]	; (8001e70 <FLASH_OB_EnableWRP+0x13c>)
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f043 0310 	orr.w	r3, r3, #16
 8001dba:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 8001dbc:	8abb      	ldrh	r3, [r7, #20]
 8001dbe:	2bff      	cmp	r3, #255	; 0xff
 8001dc0:	d00d      	beq.n	8001dde <FLASH_OB_EnableWRP+0xaa>
      {
        OB->WRP0 &= WRP0_Data;
 8001dc2:	492c      	ldr	r1, [pc, #176]	; (8001e74 <FLASH_OB_EnableWRP+0x140>)
 8001dc4:	4b2b      	ldr	r3, [pc, #172]	; (8001e74 <FLASH_OB_EnableWRP+0x140>)
 8001dc6:	891b      	ldrh	r3, [r3, #8]
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	8abb      	ldrh	r3, [r7, #20]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001dd2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dd6:	f7ff fd53 	bl	8001880 <FLASH_WaitForLastOperation>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8001dde:	7dfb      	ldrb	r3, [r7, #23]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d110      	bne.n	8001e06 <FLASH_OB_EnableWRP+0xd2>
 8001de4:	8a7b      	ldrh	r3, [r7, #18]
 8001de6:	2bff      	cmp	r3, #255	; 0xff
 8001de8:	d00d      	beq.n	8001e06 <FLASH_OB_EnableWRP+0xd2>
      {
        OB->WRP1 &= WRP1_Data;
 8001dea:	4922      	ldr	r1, [pc, #136]	; (8001e74 <FLASH_OB_EnableWRP+0x140>)
 8001dec:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <FLASH_OB_EnableWRP+0x140>)
 8001dee:	895b      	ldrh	r3, [r3, #10]
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	8a7b      	ldrh	r3, [r7, #18]
 8001df4:	4013      	ands	r3, r2
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001dfa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dfe:	f7ff fd3f 	bl	8001880 <FLASH_WaitForLastOperation>
 8001e02:	4603      	mov	r3, r0
 8001e04:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8001e06:	7dfb      	ldrb	r3, [r7, #23]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d110      	bne.n	8001e2e <FLASH_OB_EnableWRP+0xfa>
 8001e0c:	8a3b      	ldrh	r3, [r7, #16]
 8001e0e:	2bff      	cmp	r3, #255	; 0xff
 8001e10:	d00d      	beq.n	8001e2e <FLASH_OB_EnableWRP+0xfa>
      {
        OB->WRP2 &= WRP2_Data;
 8001e12:	4918      	ldr	r1, [pc, #96]	; (8001e74 <FLASH_OB_EnableWRP+0x140>)
 8001e14:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <FLASH_OB_EnableWRP+0x140>)
 8001e16:	899b      	ldrh	r3, [r3, #12]
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	8a3b      	ldrh	r3, [r7, #16]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e22:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e26:	f7ff fd2b 	bl	8001880 <FLASH_WaitForLastOperation>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8001e2e:	7dfb      	ldrb	r3, [r7, #23]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d110      	bne.n	8001e56 <FLASH_OB_EnableWRP+0x122>
 8001e34:	89fb      	ldrh	r3, [r7, #14]
 8001e36:	2bff      	cmp	r3, #255	; 0xff
 8001e38:	d00d      	beq.n	8001e56 <FLASH_OB_EnableWRP+0x122>
      {
        OB->WRP3 &= WRP3_Data;
 8001e3a:	490e      	ldr	r1, [pc, #56]	; (8001e74 <FLASH_OB_EnableWRP+0x140>)
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <FLASH_OB_EnableWRP+0x140>)
 8001e3e:	89db      	ldrh	r3, [r3, #14]
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	89fb      	ldrh	r3, [r7, #14]
 8001e44:	4013      	ands	r3, r2
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e4a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e4e:	f7ff fd17 	bl	8001880 <FLASH_WaitForLastOperation>
 8001e52:	4603      	mov	r3, r0
 8001e54:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001e56:	4a06      	ldr	r2, [pc, #24]	; (8001e70 <FLASH_OB_EnableWRP+0x13c>)
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <FLASH_OB_EnableWRP+0x13c>)
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	f023 0310 	bic.w	r3, r3, #16
 8001e60:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 8001e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000038 	.word	0x20000038
 8001e70:	40022000 	.word	0x40022000
 8001e74:	1ffff800 	.word	0x1ffff800

08001e78 <FLASH_OB_DisableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write unprotected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8001e84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e88:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 8001e8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e8e:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 8001e90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e94:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8001e96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e9a:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));

  /* Get current write protected pages and the new pages to be unprotected ******/
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 8001e9c:	f000 f948 	bl	8002130 <FLASH_OB_GetWRP>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	607b      	str	r3, [r7, #4]

#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	0a1b      	lsrs	r3, r3, #8
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	0c1b      	lsrs	r3, r3, #16
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	0e1b      	lsrs	r3, r3, #24
 8001ec8:	81fb      	strh	r3, [r7, #14]
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */

    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001eca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ece:	f7ff fcd7 	bl	8001880 <FLASH_WaitForLastOperation>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001ed6:	7dfb      	ldrb	r3, [r7, #23]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d162      	bne.n	8001fa2 <FLASH_OB_DisableWRP+0x12a>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001edc:	4b33      	ldr	r3, [pc, #204]	; (8001fac <FLASH_OB_DisableWRP+0x134>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 8001ee2:	f7ff fe11 	bl	8001b08 <HAL_FLASHEx_OBErase>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 8001eea:	7dfb      	ldrb	r3, [r7, #23]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d158      	bne.n	8001fa2 <FLASH_OB_DisableWRP+0x12a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001ef0:	4a2f      	ldr	r2, [pc, #188]	; (8001fb0 <FLASH_OB_DisableWRP+0x138>)
 8001ef2:	4b2f      	ldr	r3, [pc, #188]	; (8001fb0 <FLASH_OB_DisableWRP+0x138>)
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f043 0310 	orr.w	r3, r3, #16
 8001efa:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 8001efc:	8abb      	ldrh	r3, [r7, #20]
 8001efe:	2bff      	cmp	r3, #255	; 0xff
 8001f00:	d00d      	beq.n	8001f1e <FLASH_OB_DisableWRP+0xa6>
      {
        OB->WRP0 |= WRP0_Data;
 8001f02:	492c      	ldr	r1, [pc, #176]	; (8001fb4 <FLASH_OB_DisableWRP+0x13c>)
 8001f04:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <FLASH_OB_DisableWRP+0x13c>)
 8001f06:	891b      	ldrh	r3, [r3, #8]
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	8abb      	ldrh	r3, [r7, #20]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f12:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f16:	f7ff fcb3 	bl	8001880 <FLASH_WaitForLastOperation>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8001f1e:	7dfb      	ldrb	r3, [r7, #23]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d110      	bne.n	8001f46 <FLASH_OB_DisableWRP+0xce>
 8001f24:	8a7b      	ldrh	r3, [r7, #18]
 8001f26:	2bff      	cmp	r3, #255	; 0xff
 8001f28:	d00d      	beq.n	8001f46 <FLASH_OB_DisableWRP+0xce>
      {
        OB->WRP1 |= WRP1_Data;
 8001f2a:	4922      	ldr	r1, [pc, #136]	; (8001fb4 <FLASH_OB_DisableWRP+0x13c>)
 8001f2c:	4b21      	ldr	r3, [pc, #132]	; (8001fb4 <FLASH_OB_DisableWRP+0x13c>)
 8001f2e:	895b      	ldrh	r3, [r3, #10]
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	8a7b      	ldrh	r3, [r7, #18]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f3a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f3e:	f7ff fc9f 	bl	8001880 <FLASH_WaitForLastOperation>
 8001f42:	4603      	mov	r3, r0
 8001f44:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8001f46:	7dfb      	ldrb	r3, [r7, #23]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d110      	bne.n	8001f6e <FLASH_OB_DisableWRP+0xf6>
 8001f4c:	8a3b      	ldrh	r3, [r7, #16]
 8001f4e:	2bff      	cmp	r3, #255	; 0xff
 8001f50:	d00d      	beq.n	8001f6e <FLASH_OB_DisableWRP+0xf6>
      {
        OB->WRP2 |= WRP2_Data;
 8001f52:	4918      	ldr	r1, [pc, #96]	; (8001fb4 <FLASH_OB_DisableWRP+0x13c>)
 8001f54:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <FLASH_OB_DisableWRP+0x13c>)
 8001f56:	899b      	ldrh	r3, [r3, #12]
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	8a3b      	ldrh	r3, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f62:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f66:	f7ff fc8b 	bl	8001880 <FLASH_WaitForLastOperation>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8001f6e:	7dfb      	ldrb	r3, [r7, #23]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d110      	bne.n	8001f96 <FLASH_OB_DisableWRP+0x11e>
 8001f74:	89fb      	ldrh	r3, [r7, #14]
 8001f76:	2bff      	cmp	r3, #255	; 0xff
 8001f78:	d00d      	beq.n	8001f96 <FLASH_OB_DisableWRP+0x11e>
      {
        OB->WRP3 |= WRP3_Data;
 8001f7a:	490e      	ldr	r1, [pc, #56]	; (8001fb4 <FLASH_OB_DisableWRP+0x13c>)
 8001f7c:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <FLASH_OB_DisableWRP+0x13c>)
 8001f7e:	89db      	ldrh	r3, [r3, #14]
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	89fb      	ldrh	r3, [r7, #14]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f8a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f8e:	f7ff fc77 	bl	8001880 <FLASH_WaitForLastOperation>
 8001f92:	4603      	mov	r3, r0
 8001f94:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001f96:	4a06      	ldr	r2, [pc, #24]	; (8001fb0 <FLASH_OB_DisableWRP+0x138>)
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <FLASH_OB_DisableWRP+0x138>)
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	f023 0310 	bic.w	r3, r3, #16
 8001fa0:	6113      	str	r3, [r2, #16]
    }
  }
  return status;
 8001fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000038 	.word	0x20000038
 8001fb0:	40022000 	.word	0x40022000
 8001fb4:	1ffff800 	.word	0x1ffff800

08001fb8 <FLASH_OB_RDP_LevelConfig>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001fc6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fca:	f7ff fc59 	bl	8001880 <FLASH_WaitForLastOperation>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d133      	bne.n	8002040 <FLASH_OB_RDP_LevelConfig+0x88>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001fd8:	4b1c      	ldr	r3, [pc, #112]	; (800204c <FLASH_OB_RDP_LevelConfig+0x94>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	61da      	str	r2, [r3, #28]
    
    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8001fde:	4a1c      	ldr	r2, [pc, #112]	; (8002050 <FLASH_OB_RDP_LevelConfig+0x98>)
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <FLASH_OB_RDP_LevelConfig+0x98>)
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	f043 0320 	orr.w	r3, r3, #32
 8001fe8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001fea:	4a19      	ldr	r2, [pc, #100]	; (8002050 <FLASH_OB_RDP_LevelConfig+0x98>)
 8001fec:	4b18      	ldr	r3, [pc, #96]	; (8002050 <FLASH_OB_RDP_LevelConfig+0x98>)
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ff4:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ff6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ffa:	f7ff fc41 	bl	8001880 <FLASH_WaitForLastOperation>
 8001ffe:	4603      	mov	r3, r0
 8002000:	73fb      	strb	r3, [r7, #15]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8002002:	4a13      	ldr	r2, [pc, #76]	; (8002050 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002004:	4b12      	ldr	r3, [pc, #72]	; (8002050 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	f023 0320 	bic.w	r3, r3, #32
 800200c:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d115      	bne.n	8002040 <FLASH_OB_RDP_LevelConfig+0x88>
    {
      /* Enable the Option Bytes Programming operation */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002014:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002016:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f043 0310 	orr.w	r3, r3, #16
 800201e:	6113      	str	r3, [r2, #16]
      
      WRITE_REG(OB->RDP, ReadProtectLevel);
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <FLASH_OB_RDP_LevelConfig+0x9c>)
 8002022:	79fa      	ldrb	r2, [r7, #7]
 8002024:	b292      	uxth	r2, r2
 8002026:	801a      	strh	r2, [r3, #0]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 8002028:	f24c 3050 	movw	r0, #50000	; 0xc350
 800202c:	f7ff fc28 	bl	8001880 <FLASH_WaitForLastOperation>
 8002030:	4603      	mov	r3, r0
 8002032:	73fb      	strb	r3, [r7, #15]
      
      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002034:	4a06      	ldr	r2, [pc, #24]	; (8002050 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f023 0310 	bic.w	r3, r3, #16
 800203e:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 8002040:	7bfb      	ldrb	r3, [r7, #15]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000038 	.word	0x20000038
 8002050:	40022000 	.word	0x40022000
 8002054:	1ffff800 	.word	0x1ffff800

08002058 <FLASH_OB_UserConfig>:
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And BFBF2(Bit5) for STM32F101xG and STM32F103xG . 
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	73fb      	strb	r3, [r7, #15]
#if defined(FLASH_BANK2_END)
  assert_param(IS_OB_BOOT1((UserConfig&OB_BOOT1_SET)));
#endif /* FLASH_BANK2_END */

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002066:	f24c 3050 	movw	r0, #50000	; 0xc350
 800206a:	f7ff fc09 	bl	8001880 <FLASH_WaitForLastOperation>
 800206e:	4603      	mov	r3, r0
 8002070:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d11b      	bne.n	80020b0 <FLASH_OB_UserConfig+0x58>
  {     
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002078:	4b10      	ldr	r3, [pc, #64]	; (80020bc <FLASH_OB_UserConfig+0x64>)
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]

    /* Enable the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 800207e:	4a10      	ldr	r2, [pc, #64]	; (80020c0 <FLASH_OB_UserConfig+0x68>)
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <FLASH_OB_UserConfig+0x68>)
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	f043 0310 	orr.w	r3, r3, #16
 8002088:	6113      	str	r3, [r2, #16]
 
#if defined(FLASH_BANK2_END)
    OB->USER = (UserConfig | 0xF0U);
#else
    OB->USER = (UserConfig | 0x88U);
 800208a:	4a0e      	ldr	r2, [pc, #56]	; (80020c4 <FLASH_OB_UserConfig+0x6c>)
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	f063 0377 	orn	r3, r3, #119	; 0x77
 8002092:	b2db      	uxtb	r3, r3
 8002094:	b29b      	uxth	r3, r3
 8002096:	8053      	strh	r3, [r2, #2]
#endif /* FLASH_BANK2_END */

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002098:	f24c 3050 	movw	r0, #50000	; 0xc350
 800209c:	f7ff fbf0 	bl	8001880 <FLASH_WaitForLastOperation>
 80020a0:	4603      	mov	r3, r0
 80020a2:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80020a4:	4a06      	ldr	r2, [pc, #24]	; (80020c0 <FLASH_OB_UserConfig+0x68>)
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <FLASH_OB_UserConfig+0x68>)
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f023 0310 	bic.w	r3, r3, #16
 80020ae:	6113      	str	r3, [r2, #16]
  }
  
  return status; 
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000038 	.word	0x20000038
 80020c0:	40022000 	.word	0x40022000
 80020c4:	1ffff800 	.word	0x1ffff800

080020c8 <FLASH_OB_ProgramData>:
  *         This parameter can be 0x1FFFF804 or 0x1FFFF806. 
  * @param  Data specifies the data to be programmed.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020dc:	f7ff fbd0 	bl	8001880 <FLASH_WaitForLastOperation>
 80020e0:	4603      	mov	r3, r0
 80020e2:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d118      	bne.n	800211c <FLASH_OB_ProgramData+0x54>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <FLASH_OB_ProgramData+0x60>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	61da      	str	r2, [r3, #28]

    /* Enables the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 80020f0:	4a0e      	ldr	r2, [pc, #56]	; (800212c <FLASH_OB_ProgramData+0x64>)
 80020f2:	4b0e      	ldr	r3, [pc, #56]	; (800212c <FLASH_OB_ProgramData+0x64>)
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f043 0310 	orr.w	r3, r3, #16
 80020fa:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	78fa      	ldrb	r2, [r7, #3]
 8002100:	b292      	uxth	r2, r2
 8002102:	801a      	strh	r2, [r3, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002104:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002108:	f7ff fbba 	bl	8001880 <FLASH_WaitForLastOperation>
 800210c:	4603      	mov	r3, r0
 800210e:	73fb      	strb	r3, [r7, #15]
    
    /* If the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002110:	4a06      	ldr	r2, [pc, #24]	; (800212c <FLASH_OB_ProgramData+0x64>)
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <FLASH_OB_ProgramData+0x64>)
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f023 0310 	bic.w	r3, r3, #16
 800211a:	6113      	str	r3, [r2, #16]
  }
  /* Return the Option Byte Data Program Status */
  return status;
 800211c:	7bfb      	ldrb	r3, [r7, #15]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000038 	.word	0x20000038
 800212c:	40022000 	.word	0x40022000

08002130 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8002134:	4b02      	ldr	r3, [pc, #8]	; (8002140 <FLASH_OB_GetWRP+0x10>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	40022000 	.word	0x40022000

08002144 <FLASH_OB_GetRDP>:
  *         This parameter can be one of the following values:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
  uint32_t readstatus = OB_RDP_LEVEL_0;
 800214a:	23a5      	movs	r3, #165	; 0xa5
 800214c:	607b      	str	r3, [r7, #4]
  uint32_t tmp_reg = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	603b      	str	r3, [r7, #0]
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 8002152:	4b09      	ldr	r3, [pc, #36]	; (8002178 <FLASH_OB_GetRDP+0x34>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	603b      	str	r3, [r7, #0]

  if (tmp_reg == FLASH_OBR_RDPRT)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d102      	bne.n	8002168 <FLASH_OB_GetRDP+0x24>
  {
    readstatus = OB_RDP_LEVEL_1;
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	e001      	b.n	800216c <FLASH_OB_GetRDP+0x28>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 8002168:	23a5      	movs	r3, #165	; 0xa5
 800216a:	607b      	str	r3, [r7, #4]
  }

  return readstatus;
 800216c:	687b      	ldr	r3, [r7, #4]
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	40022000 	.word	0x40022000

0800217c <FLASH_OB_GetUser>:
  * @retval The FLASH User Option Bytes values: FLASH_OBR_IWDG_SW(Bit2), 
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
  */
static uint8_t FLASH_OB_GetUser(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <FLASH_OB_GetUser+0x1c>)
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	b2db      	uxtb	r3, r3
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	b2db      	uxtb	r3, r3
}
 800218e:	4618      	mov	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40022000 	.word	0x40022000

0800219c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <FLASH_PageErase+0x38>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80021aa:	4a0b      	ldr	r2, [pc, #44]	; (80021d8 <FLASH_PageErase+0x3c>)
 80021ac:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <FLASH_PageErase+0x3c>)
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	f043 0302 	orr.w	r3, r3, #2
 80021b4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80021b6:	4a08      	ldr	r2, [pc, #32]	; (80021d8 <FLASH_PageErase+0x3c>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80021bc:	4a06      	ldr	r2, [pc, #24]	; (80021d8 <FLASH_PageErase+0x3c>)
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <FLASH_PageErase+0x3c>)
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021c6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000038 	.word	0x20000038
 80021d8:	40022000 	.word	0x40022000

080021dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021dc:	b480      	push	{r7}
 80021de:	b08b      	sub	sp, #44	; 0x2c
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
 80021fe:	e127      	b.n	8002450 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8002200:	2201      	movs	r2, #1
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	429a      	cmp	r2, r3
 800221a:	f040 8116 	bne.w	800244a <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b12      	cmp	r3, #18
 8002224:	d034      	beq.n	8002290 <HAL_GPIO_Init+0xb4>
 8002226:	2b12      	cmp	r3, #18
 8002228:	d80d      	bhi.n	8002246 <HAL_GPIO_Init+0x6a>
 800222a:	2b02      	cmp	r3, #2
 800222c:	d02b      	beq.n	8002286 <HAL_GPIO_Init+0xaa>
 800222e:	2b02      	cmp	r3, #2
 8002230:	d804      	bhi.n	800223c <HAL_GPIO_Init+0x60>
 8002232:	2b00      	cmp	r3, #0
 8002234:	d031      	beq.n	800229a <HAL_GPIO_Init+0xbe>
 8002236:	2b01      	cmp	r3, #1
 8002238:	d01c      	beq.n	8002274 <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 800223a:	e048      	b.n	80022ce <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800223c:	2b03      	cmp	r3, #3
 800223e:	d043      	beq.n	80022c8 <HAL_GPIO_Init+0xec>
 8002240:	2b11      	cmp	r3, #17
 8002242:	d01b      	beq.n	800227c <HAL_GPIO_Init+0xa0>
          break;
 8002244:	e043      	b.n	80022ce <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8002246:	4a87      	ldr	r2, [pc, #540]	; (8002464 <HAL_GPIO_Init+0x288>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d026      	beq.n	800229a <HAL_GPIO_Init+0xbe>
 800224c:	4a85      	ldr	r2, [pc, #532]	; (8002464 <HAL_GPIO_Init+0x288>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d806      	bhi.n	8002260 <HAL_GPIO_Init+0x84>
 8002252:	4a85      	ldr	r2, [pc, #532]	; (8002468 <HAL_GPIO_Init+0x28c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d020      	beq.n	800229a <HAL_GPIO_Init+0xbe>
 8002258:	4a84      	ldr	r2, [pc, #528]	; (800246c <HAL_GPIO_Init+0x290>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d01d      	beq.n	800229a <HAL_GPIO_Init+0xbe>
          break;
 800225e:	e036      	b.n	80022ce <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8002260:	4a83      	ldr	r2, [pc, #524]	; (8002470 <HAL_GPIO_Init+0x294>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d019      	beq.n	800229a <HAL_GPIO_Init+0xbe>
 8002266:	4a83      	ldr	r2, [pc, #524]	; (8002474 <HAL_GPIO_Init+0x298>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d016      	beq.n	800229a <HAL_GPIO_Init+0xbe>
 800226c:	4a82      	ldr	r2, [pc, #520]	; (8002478 <HAL_GPIO_Init+0x29c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_GPIO_Init+0xbe>
          break;
 8002272:	e02c      	b.n	80022ce <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	623b      	str	r3, [r7, #32]
          break;
 800227a:	e028      	b.n	80022ce <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	3304      	adds	r3, #4
 8002282:	623b      	str	r3, [r7, #32]
          break;
 8002284:	e023      	b.n	80022ce <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	3308      	adds	r3, #8
 800228c:	623b      	str	r3, [r7, #32]
          break;
 800228e:	e01e      	b.n	80022ce <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	330c      	adds	r3, #12
 8002296:	623b      	str	r3, [r7, #32]
          break;
 8002298:	e019      	b.n	80022ce <HAL_GPIO_Init+0xf2>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d102      	bne.n	80022a8 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022a2:	2304      	movs	r3, #4
 80022a4:	623b      	str	r3, [r7, #32]
          break; 
 80022a6:	e012      	b.n	80022ce <HAL_GPIO_Init+0xf2>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d105      	bne.n	80022bc <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022b0:	2308      	movs	r3, #8
 80022b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69fa      	ldr	r2, [r7, #28]
 80022b8:	611a      	str	r2, [r3, #16]
          break; 
 80022ba:	e008      	b.n	80022ce <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022bc:	2308      	movs	r3, #8
 80022be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69fa      	ldr	r2, [r7, #28]
 80022c4:	615a      	str	r2, [r3, #20]
          break; 
 80022c6:	e002      	b.n	80022ce <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022c8:	2300      	movs	r3, #0
 80022ca:	623b      	str	r3, [r7, #32]
          break;
 80022cc:	bf00      	nop
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	2bff      	cmp	r3, #255	; 0xff
 80022d2:	d801      	bhi.n	80022d8 <HAL_GPIO_Init+0xfc>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	e001      	b.n	80022dc <HAL_GPIO_Init+0x100>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3304      	adds	r3, #4
 80022dc:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	2bff      	cmp	r3, #255	; 0xff
 80022e2:	d802      	bhi.n	80022ea <HAL_GPIO_Init+0x10e>
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	e002      	b.n	80022f0 <HAL_GPIO_Init+0x114>
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	3b08      	subs	r3, #8
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	210f      	movs	r1, #15
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	401a      	ands	r2, r3
 8002302:	6a39      	ldr	r1, [r7, #32]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	fa01 f303 	lsl.w	r3, r1, r3
 800230a:	431a      	orrs	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 8096 	beq.w	800244a <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800231e:	4a57      	ldr	r2, [pc, #348]	; (800247c <HAL_GPIO_Init+0x2a0>)
 8002320:	4b56      	ldr	r3, [pc, #344]	; (800247c <HAL_GPIO_Init+0x2a0>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6193      	str	r3, [r2, #24]
 800232a:	4b54      	ldr	r3, [pc, #336]	; (800247c <HAL_GPIO_Init+0x2a0>)
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8002336:	4a52      	ldr	r2, [pc, #328]	; (8002480 <HAL_GPIO_Init+0x2a4>)
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	3302      	adds	r3, #2
 800233e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002342:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	220f      	movs	r2, #15
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	4013      	ands	r3, r2
 8002358:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a49      	ldr	r2, [pc, #292]	; (8002484 <HAL_GPIO_Init+0x2a8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <HAL_GPIO_Init+0x1ae>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a48      	ldr	r2, [pc, #288]	; (8002488 <HAL_GPIO_Init+0x2ac>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00d      	beq.n	8002386 <HAL_GPIO_Init+0x1aa>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a47      	ldr	r2, [pc, #284]	; (800248c <HAL_GPIO_Init+0x2b0>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d007      	beq.n	8002382 <HAL_GPIO_Init+0x1a6>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a46      	ldr	r2, [pc, #280]	; (8002490 <HAL_GPIO_Init+0x2b4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d101      	bne.n	800237e <HAL_GPIO_Init+0x1a2>
 800237a:	2303      	movs	r3, #3
 800237c:	e006      	b.n	800238c <HAL_GPIO_Init+0x1b0>
 800237e:	2304      	movs	r3, #4
 8002380:	e004      	b.n	800238c <HAL_GPIO_Init+0x1b0>
 8002382:	2302      	movs	r3, #2
 8002384:	e002      	b.n	800238c <HAL_GPIO_Init+0x1b0>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <HAL_GPIO_Init+0x1b0>
 800238a:	2300      	movs	r3, #0
 800238c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800238e:	f002 0203 	and.w	r2, r2, #3
 8002392:	0092      	lsls	r2, r2, #2
 8002394:	4093      	lsls	r3, r2
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4313      	orrs	r3, r2
 800239a:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 800239c:	4938      	ldr	r1, [pc, #224]	; (8002480 <HAL_GPIO_Init+0x2a4>)
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d006      	beq.n	80023c4 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80023b6:	4937      	ldr	r1, [pc, #220]	; (8002494 <HAL_GPIO_Init+0x2b8>)
 80023b8:	4b36      	ldr	r3, [pc, #216]	; (8002494 <HAL_GPIO_Init+0x2b8>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	600b      	str	r3, [r1, #0]
 80023c2:	e006      	b.n	80023d2 <HAL_GPIO_Init+0x1f6>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80023c4:	4933      	ldr	r1, [pc, #204]	; (8002494 <HAL_GPIO_Init+0x2b8>)
 80023c6:	4b33      	ldr	r3, [pc, #204]	; (8002494 <HAL_GPIO_Init+0x2b8>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	4013      	ands	r3, r2
 80023d0:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d006      	beq.n	80023ec <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80023de:	492d      	ldr	r1, [pc, #180]	; (8002494 <HAL_GPIO_Init+0x2b8>)
 80023e0:	4b2c      	ldr	r3, [pc, #176]	; (8002494 <HAL_GPIO_Init+0x2b8>)
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	604b      	str	r3, [r1, #4]
 80023ea:	e006      	b.n	80023fa <HAL_GPIO_Init+0x21e>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80023ec:	4929      	ldr	r1, [pc, #164]	; (8002494 <HAL_GPIO_Init+0x2b8>)
 80023ee:	4b29      	ldr	r3, [pc, #164]	; (8002494 <HAL_GPIO_Init+0x2b8>)
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	4013      	ands	r3, r2
 80023f8:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d006      	beq.n	8002414 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8002406:	4923      	ldr	r1, [pc, #140]	; (8002494 <HAL_GPIO_Init+0x2b8>)
 8002408:	4b22      	ldr	r3, [pc, #136]	; (8002494 <HAL_GPIO_Init+0x2b8>)
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
 8002412:	e006      	b.n	8002422 <HAL_GPIO_Init+0x246>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8002414:	491f      	ldr	r1, [pc, #124]	; (8002494 <HAL_GPIO_Init+0x2b8>)
 8002416:	4b1f      	ldr	r3, [pc, #124]	; (8002494 <HAL_GPIO_Init+0x2b8>)
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	43db      	mvns	r3, r3
 800241e:	4013      	ands	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d006      	beq.n	800243c <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 800242e:	4919      	ldr	r1, [pc, #100]	; (8002494 <HAL_GPIO_Init+0x2b8>)
 8002430:	4b18      	ldr	r3, [pc, #96]	; (8002494 <HAL_GPIO_Init+0x2b8>)
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	60cb      	str	r3, [r1, #12]
 800243a:	e006      	b.n	800244a <HAL_GPIO_Init+0x26e>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 800243c:	4915      	ldr	r1, [pc, #84]	; (8002494 <HAL_GPIO_Init+0x2b8>)
 800243e:	4b15      	ldr	r3, [pc, #84]	; (8002494 <HAL_GPIO_Init+0x2b8>)
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	43db      	mvns	r3, r3
 8002446:	4013      	ands	r3, r2
 8002448:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	3301      	adds	r3, #1
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	2b0f      	cmp	r3, #15
 8002454:	f67f aed4 	bls.w	8002200 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8002458:	bf00      	nop
 800245a:	372c      	adds	r7, #44	; 0x2c
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	10210000 	.word	0x10210000
 8002468:	10110000 	.word	0x10110000
 800246c:	10120000 	.word	0x10120000
 8002470:	10310000 	.word	0x10310000
 8002474:	10320000 	.word	0x10320000
 8002478:	10220000 	.word	0x10220000
 800247c:	40021000 	.word	0x40021000
 8002480:	40010000 	.word	0x40010000
 8002484:	40010800 	.word	0x40010800
 8002488:	40010c00 	.word	0x40010c00
 800248c:	40011000 	.word	0x40011000
 8002490:	40011400 	.word	0x40011400
 8002494:	40010400 	.word	0x40010400

08002498 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{ 
 8002498:	b480      	push	{r7}
 800249a:	b089      	sub	sp, #36	; 0x24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
  uint32_t tmp = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80024b2:	e09a      	b.n	80025ea <HAL_GPIO_DeInit+0x152>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 80024b4:	2201      	movs	r2, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	409a      	lsls	r2, r3
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 808e 	beq.w	80025e4 <HAL_GPIO_DeInit+0x14c>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	2bff      	cmp	r3, #255	; 0xff
 80024cc:	d801      	bhi.n	80024d2 <HAL_GPIO_DeInit+0x3a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	e001      	b.n	80024d6 <HAL_GPIO_DeInit+0x3e>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3304      	adds	r3, #4
 80024d6:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	2bff      	cmp	r3, #255	; 0xff
 80024dc:	d802      	bhi.n	80024e4 <HAL_GPIO_DeInit+0x4c>
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	e002      	b.n	80024ea <HAL_GPIO_DeInit+0x52>
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	3b08      	subs	r3, #8
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	613b      	str	r3, [r7, #16]
      
      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), GPIO_CRL_CNF0_0 << registeroffset);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	210f      	movs	r1, #15
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	fa01 f303 	lsl.w	r3, r1, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	401a      	ands	r2, r3
 80024fc:	2104      	movs	r1, #4
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	431a      	orrs	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	601a      	str	r2, [r3, #0]
      
      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	43db      	mvns	r3, r3
 8002512:	401a      	ands	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	60da      	str	r2, [r3, #12]
      
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = AFIO->EXTICR[position >> 2U];
 8002518:	4a3a      	ldr	r2, [pc, #232]	; (8002604 <HAL_GPIO_DeInit+0x16c>)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	3302      	adds	r3, #2
 8002520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002524:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	220f      	movs	r2, #15
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	4013      	ands	r3, r2
 8002538:	617b      	str	r3, [r7, #20]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a32      	ldr	r2, [pc, #200]	; (8002608 <HAL_GPIO_DeInit+0x170>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d013      	beq.n	800256a <HAL_GPIO_DeInit+0xd2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a31      	ldr	r2, [pc, #196]	; (800260c <HAL_GPIO_DeInit+0x174>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00d      	beq.n	8002566 <HAL_GPIO_DeInit+0xce>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a30      	ldr	r2, [pc, #192]	; (8002610 <HAL_GPIO_DeInit+0x178>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d007      	beq.n	8002562 <HAL_GPIO_DeInit+0xca>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a2f      	ldr	r2, [pc, #188]	; (8002614 <HAL_GPIO_DeInit+0x17c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d101      	bne.n	800255e <HAL_GPIO_DeInit+0xc6>
 800255a:	2303      	movs	r3, #3
 800255c:	e006      	b.n	800256c <HAL_GPIO_DeInit+0xd4>
 800255e:	2304      	movs	r3, #4
 8002560:	e004      	b.n	800256c <HAL_GPIO_DeInit+0xd4>
 8002562:	2302      	movs	r3, #2
 8002564:	e002      	b.n	800256c <HAL_GPIO_DeInit+0xd4>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <HAL_GPIO_DeInit+0xd4>
 800256a:	2300      	movs	r3, #0
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	f002 0203 	and.w	r2, r2, #3
 8002572:	0092      	lsls	r2, r2, #2
 8002574:	fa03 f202 	lsl.w	r2, r3, r2
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	429a      	cmp	r2, r3
 800257c:	d132      	bne.n	80025e4 <HAL_GPIO_DeInit+0x14c>
      {
        tmp = 0x0FU << (4U * (position & 0x03U));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	220f      	movs	r2, #15
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
 800258e:	481d      	ldr	r0, [pc, #116]	; (8002604 <HAL_GPIO_DeInit+0x16c>)
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	491b      	ldr	r1, [pc, #108]	; (8002604 <HAL_GPIO_DeInit+0x16c>)
 8002596:	69fa      	ldr	r2, [r7, #28]
 8002598:	0892      	lsrs	r2, r2, #2
 800259a:	3202      	adds	r2, #2
 800259c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	43d2      	mvns	r2, r2
 80025a4:	400a      	ands	r2, r1
 80025a6:	3302      	adds	r3, #2
 80025a8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80025ac:	491a      	ldr	r1, [pc, #104]	; (8002618 <HAL_GPIO_DeInit+0x180>)
 80025ae:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <HAL_GPIO_DeInit+0x180>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	43db      	mvns	r3, r3
 80025b6:	4013      	ands	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80025ba:	4917      	ldr	r1, [pc, #92]	; (8002618 <HAL_GPIO_DeInit+0x180>)
 80025bc:	4b16      	ldr	r3, [pc, #88]	; (8002618 <HAL_GPIO_DeInit+0x180>)
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	43db      	mvns	r3, r3
 80025c4:	4013      	ands	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80025c8:	4913      	ldr	r1, [pc, #76]	; (8002618 <HAL_GPIO_DeInit+0x180>)
 80025ca:	4b13      	ldr	r3, [pc, #76]	; (8002618 <HAL_GPIO_DeInit+0x180>)
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	4013      	ands	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80025d6:	4910      	ldr	r1, [pc, #64]	; (8002618 <HAL_GPIO_DeInit+0x180>)
 80025d8:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <HAL_GPIO_DeInit+0x180>)
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	43db      	mvns	r3, r3
 80025e0:	4013      	ands	r3, r2
 80025e2:	60cb      	str	r3, [r1, #12]
      }
    }
    
    position++;
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	3301      	adds	r3, #1
 80025e8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	fa22 f303 	lsr.w	r3, r2, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f47f af5e 	bne.w	80024b4 <HAL_GPIO_DeInit+0x1c>
  }
}
 80025f8:	bf00      	nop
 80025fa:	3724      	adds	r7, #36	; 0x24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40010000 	.word	0x40010000
 8002608:	40010800 	.word	0x40010800
 800260c:	40010c00 	.word	0x40010c00
 8002610:	40011000 	.word	0x40011000
 8002614:	40011400 	.word	0x40011400
 8002618:	40010400 	.word	0x40010400

0800261c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	887b      	ldrh	r3, [r7, #2]
 800262e:	4013      	ands	r3, r2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
 8002638:	e001      	b.n	800263e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800263a:	2300      	movs	r3, #0
 800263c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800263e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	807b      	strh	r3, [r7, #2]
 8002656:	4613      	mov	r3, r2
 8002658:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800265a:	787b      	ldrb	r3, [r7, #1]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002660:	887a      	ldrh	r2, [r7, #2]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002666:	e003      	b.n	8002670 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002668:	887b      	ldrh	r3, [r7, #2]
 800266a:	041a      	lsls	r2, r3, #16
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	611a      	str	r2, [r3, #16]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr

0800267a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	460b      	mov	r3, r1
 8002684:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	887b      	ldrh	r3, [r7, #2]
 800268c:	405a      	eors	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	60da      	str	r2, [r3, #12]
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <HAL_GPIO_LockPin>:
* @param  GPIO_Pin: specifies the port bit to be locked.
*         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
* @retval None
*/
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 80026a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026ac:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  SET_BIT(tmp, GPIO_Pin);
 80026ae:	887a      	ldrh	r2, [r7, #2]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	619a      	str	r2, [r3, #24]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 80026bc:	887a      	ldrh	r2, [r7, #2]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	619a      	str	r2, [r3, #24]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	60fb      	str	r3, [r7, #12]

  if((uint32_t)(GPIOx->LCKR & GPIO_LCKR_LCKK))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	e000      	b.n	80026e0 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
  }
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr

080026ea <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4603      	mov	r3, r0
 80026f2:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026f4:	4b08      	ldr	r3, [pc, #32]	; (8002718 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 80026f6:	695a      	ldr	r2, [r3, #20]
 80026f8:	88fb      	ldrh	r3, [r7, #6]
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d006      	beq.n	800270e <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002700:	4a05      	ldr	r2, [pc, #20]	; (8002718 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	4618      	mov	r0, r3
 800270a:	f000 f807 	bl	800271c <HAL_GPIO_EXTI_Callback>
  }
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40010400 	.word	0x40010400

0800271c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <HAL_GPIOEx_ConfigEventout>:
  * @param  GPIO_PinSource Select the pin used to output the Cortex EVENTOUT signal.
  *   This parameter can be a value of @ref GPIOEx_EVENTOUT_PIN.
  * @retval None
  */  
void HAL_GPIOEx_ConfigEventout(uint32_t GPIO_PortSource, uint32_t GPIO_PinSource)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  /* Verify the parameters */
  assert_param(IS_AFIO_EVENTOUT_PORT(GPIO_PortSource));
  assert_param(IS_AFIO_EVENTOUT_PIN(GPIO_PinSource));
  
  /* Apply the new configuration */
  MODIFY_REG(AFIO->EVCR, (AFIO_EVCR_PORT)|(AFIO_EVCR_PIN), (GPIO_PortSource)|(GPIO_PinSource));
 800273a:	4807      	ldr	r0, [pc, #28]	; (8002758 <HAL_GPIOEx_ConfigEventout+0x28>)
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_GPIOEx_ConfigEventout+0x28>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	430b      	orrs	r3, r1
 800274a:	4313      	orrs	r3, r2
 800274c:	6003      	str	r3, [r0, #0]
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr
 8002758:	40010000 	.word	0x40010000

0800275c <HAL_GPIOEx_EnableEventout>:
/**
  * @brief  Enables the Event Output.
  * @retval None
  */
void HAL_GPIOEx_EnableEventout(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->EVCR, AFIO_EVCR_EVOE);
 8002760:	4a04      	ldr	r2, [pc, #16]	; (8002774 <HAL_GPIOEx_EnableEventout+0x18>)
 8002762:	4b04      	ldr	r3, [pc, #16]	; (8002774 <HAL_GPIOEx_EnableEventout+0x18>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800276a:	6013      	str	r3, [r2, #0]
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	40010000 	.word	0x40010000

08002778 <HAL_GPIOEx_DisableEventout>:
/**
  * @brief  Disables the Event Output.
  * @retval None
  */
void HAL_GPIOEx_DisableEventout(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->EVCR, AFIO_EVCR_EVOE);
 800277c:	4a04      	ldr	r2, [pc, #16]	; (8002790 <HAL_GPIOEx_DisableEventout+0x18>)
 800277e:	4b04      	ldr	r3, [pc, #16]	; (8002790 <HAL_GPIOEx_DisableEventout+0x18>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002786:	6013      	str	r3, [r2, #0]
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	40010000 	.word	0x40010000

08002794 <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 8002798:	bf20      	wfe
  __asm volatile( "nop" );
 800279a:	bf00      	nop
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <HAL_PWR_DeInit>:
/**
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.  
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
 80027a8:	4a07      	ldr	r2, [pc, #28]	; (80027c8 <HAL_PWR_DeInit+0x24>)
 80027aa:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <HAL_PWR_DeInit+0x24>)
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b2:	6113      	str	r3, [r2, #16]
  __HAL_RCC_PWR_RELEASE_RESET();
 80027b4:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <HAL_PWR_DeInit+0x24>)
 80027b6:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <HAL_PWR_DeInit+0x24>)
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027be:	6113      	str	r3, [r2, #16]
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	40021000 	.word	0x40021000

080027cc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80027d0:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <HAL_PWR_EnableBkUpAccess+0x14>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
}
 80027d6:	bf00      	nop
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	420e0020 	.word	0x420e0020

080027e4 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_PWR_DisableBkUpAccess+0x14>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
}
 80027ee:	bf00      	nop
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	420e0020 	.word	0x420e0020

080027fc <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8002804:	492a      	ldr	r1, [pc, #168]	; (80028b0 <HAL_PWR_ConfigPVD+0xb4>)
 8002806:	4b2a      	ldr	r3, [pc, #168]	; (80028b0 <HAL_PWR_ConfigPVD+0xb4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8002816:	4a27      	ldr	r2, [pc, #156]	; (80028b4 <HAL_PWR_ConfigPVD+0xb8>)
 8002818:	4b26      	ldr	r3, [pc, #152]	; (80028b4 <HAL_PWR_ConfigPVD+0xb8>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002820:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8002822:	4a24      	ldr	r2, [pc, #144]	; (80028b4 <HAL_PWR_ConfigPVD+0xb8>)
 8002824:	4b23      	ldr	r3, [pc, #140]	; (80028b4 <HAL_PWR_ConfigPVD+0xb8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800282c:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 800282e:	4a21      	ldr	r2, [pc, #132]	; (80028b4 <HAL_PWR_ConfigPVD+0xb8>)
 8002830:	4b20      	ldr	r3, [pc, #128]	; (80028b4 <HAL_PWR_ConfigPVD+0xb8>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002838:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800283a:	4a1e      	ldr	r2, [pc, #120]	; (80028b4 <HAL_PWR_ConfigPVD+0xb8>)
 800283c:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <HAL_PWR_ConfigPVD+0xb8>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002844:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d005      	beq.n	800285e <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8002852:	4a18      	ldr	r2, [pc, #96]	; (80028b4 <HAL_PWR_ConfigPVD+0xb8>)
 8002854:	4b17      	ldr	r3, [pc, #92]	; (80028b4 <HAL_PWR_ConfigPVD+0xb8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285c:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800286a:	4a12      	ldr	r2, [pc, #72]	; (80028b4 <HAL_PWR_ConfigPVD+0xb8>)
 800286c:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <HAL_PWR_ConfigPVD+0xb8>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002874:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8002882:	4a0c      	ldr	r2, [pc, #48]	; (80028b4 <HAL_PWR_ConfigPVD+0xb8>)
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_PWR_ConfigPVD+0xb8>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288c:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d005      	beq.n	80028a6 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800289a:	4a06      	ldr	r2, [pc, #24]	; (80028b4 <HAL_PWR_ConfigPVD+0xb8>)
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_PWR_ConfigPVD+0xb8>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a4:	60d3      	str	r3, [r2, #12]
  }
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	40007000 	.word	0x40007000
 80028b4:	40010400 	.word	0x40010400

080028b8 <HAL_PWR_EnablePVD>:
/**
  * @brief  Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 80028bc:	4b03      	ldr	r3, [pc, #12]	; (80028cc <HAL_PWR_EnablePVD+0x14>)
 80028be:	2201      	movs	r2, #1
 80028c0:	601a      	str	r2, [r3, #0]
}
 80028c2:	bf00      	nop
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	420e0010 	.word	0x420e0010

080028d0 <HAL_PWR_DisablePVD>:
/**
  * @brief  Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 80028d4:	4b03      	ldr	r3, [pc, #12]	; (80028e4 <HAL_PWR_DisablePVD+0x14>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
}
 80028da:	bf00      	nop
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	420e0010 	.word	0x420e0010

080028e8 <HAL_PWR_EnableWakeUpPin>:
  *        This parameter can be one of the following values:
  *           @arg PWR_WAKEUP_PIN1
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	fa93 f3a3 	rbit	r3, r3
 80028fa:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80028fc:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
 80028fe:	fab3 f383 	clz	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_PWR_EnableWakeUpPin+0x34>)
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	461a      	mov	r2, r3
 800290c:	2301      	movs	r3, #1
 800290e:	6013      	str	r3, [r2, #0]
}
 8002910:	bf00      	nop
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	10838020 	.word	0x10838020

08002920 <HAL_PWR_DisableWakeUpPin>:
  *        This parameter can be one of the following values:
  *           @arg PWR_WAKEUP_PIN1
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	fa93 f3a3 	rbit	r3, r3
 8002932:	60bb      	str	r3, [r7, #8]
  return(result);
 8002934:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)DISABLE;
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_PWR_DisableWakeUpPin+0x34>)
 800293e:	4413      	add	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	461a      	mov	r2, r3
 8002944:	2300      	movs	r3, #0
 8002946:	6013      	str	r3, [r2, #0]
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	10838020 	.word	0x10838020

08002958 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002964:	4a09      	ldr	r2, [pc, #36]	; (800298c <HAL_PWR_EnterSLEEPMode+0x34>)
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <HAL_PWR_EnterSLEEPMode+0x34>)
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f023 0304 	bic.w	r3, r3, #4
 800296e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_PWR_EnterSLEEPMode+0x22>
  __ASM volatile ("wfi");
 8002976:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8002978:	e002      	b.n	8002980 <HAL_PWR_EnterSLEEPMode+0x28>
  __ASM volatile ("sev");
 800297a:	bf40      	sev
  __ASM volatile ("wfe");
 800297c:	bf20      	wfe
 800297e:	bf20      	wfe
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 800299c:	4a13      	ldr	r2, [pc, #76]	; (80029ec <HAL_PWR_EnterSTOPMode+0x5c>)
 800299e:	4b13      	ldr	r3, [pc, #76]	; (80029ec <HAL_PWR_EnterSTOPMode+0x5c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 0302 	bic.w	r3, r3, #2
 80029a6:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 80029a8:	4910      	ldr	r1, [pc, #64]	; (80029ec <HAL_PWR_EnterSTOPMode+0x5c>)
 80029aa:	4b10      	ldr	r3, [pc, #64]	; (80029ec <HAL_PWR_EnterSTOPMode+0x5c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f023 0201 	bic.w	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80029b8:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <HAL_PWR_EnterSTOPMode+0x60>)
 80029ba:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <HAL_PWR_EnterSTOPMode+0x60>)
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80029c4:	78fb      	ldrb	r3, [r7, #3]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_PWR_EnterSTOPMode+0x3e>
  __ASM volatile ("wfi");
 80029ca:	bf30      	wfi
 80029cc:	e004      	b.n	80029d8 <HAL_PWR_EnterSTOPMode+0x48>
  __ASM volatile ("sev");
 80029ce:	bf40      	sev
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
    PWR_OverloadWfe(); /* WFE redefine locally */
 80029d0:	f7ff fee0 	bl	8002794 <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 80029d4:	f7ff fede 	bl	8002794 <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80029d8:	4a05      	ldr	r2, [pc, #20]	; (80029f0 <HAL_PWR_EnterSTOPMode+0x60>)
 80029da:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_PWR_EnterSTOPMode+0x60>)
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f023 0304 	bic.w	r3, r3, #4
 80029e2:	6113      	str	r3, [r2, #16]
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40007000 	.word	0x40007000
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80029f8:	4a08      	ldr	r2, [pc, #32]	; (8002a1c <HAL_PWR_EnterSTANDBYMode+0x28>)
 80029fa:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <HAL_PWR_EnterSTANDBYMode+0x28>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f043 0302 	orr.w	r3, r3, #2
 8002a02:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002a04:	4a06      	ldr	r2, [pc, #24]	; (8002a20 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f043 0304 	orr.w	r3, r3, #4
 8002a0e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 8002a10:	bf30      	wfi
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 8002a12:	bf00      	nop
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40007000 	.word	0x40007000
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8002a28:	4a04      	ldr	r2, [pc, #16]	; (8002a3c <HAL_PWR_EnableSleepOnExit+0x18>)
 8002a2a:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <HAL_PWR_EnableSleepOnExit+0x18>)
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f043 0302 	orr.w	r3, r3, #2
 8002a32:	6113      	str	r3, [r2, #16]
}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8002a44:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <HAL_PWR_DisableSleepOnExit+0x18>)
 8002a46:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <HAL_PWR_DisableSleepOnExit+0x18>)
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f023 0302 	bic.w	r3, r3, #2
 8002a4e:	6113      	str	r3, [r2, #16]
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8002a60:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <HAL_PWR_EnableSEVOnPend+0x18>)
 8002a62:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <HAL_PWR_EnableSEVOnPend+0x18>)
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f043 0310 	orr.w	r3, r3, #16
 8002a6a:	6113      	str	r3, [r2, #16]
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <HAL_PWR_DisableSEVOnPend>:
  * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.         
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8002a7c:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <HAL_PWR_DisableSEVOnPend+0x18>)
 8002a7e:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <HAL_PWR_DisableSEVOnPend+0x18>)
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f023 0310 	bic.w	r3, r3, #16
 8002a86:	6113      	str	r3, [r2, #16]
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_PWR_PVD_IRQHandler+0x20>)
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002aa4:	f000 f808 	bl	8002ab8 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002aa8:	4b02      	ldr	r3, [pc, #8]	; (8002ab4 <HAL_PWR_PVD_IRQHandler+0x20>)
 8002aaa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002aae:	615a      	str	r2, [r3, #20]
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40010400 	.word	0x40010400

08002ab8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval None
  */
void HAL_RCC_DeInit(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* Switch SYSCLK to HSI */
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002ac8:	4a14      	ldr	r2, [pc, #80]	; (8002b1c <HAL_RCC_DeInit+0x58>)
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <HAL_RCC_DeInit+0x58>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f023 0303 	bic.w	r3, r3, #3
 8002ad2:	6053      	str	r3, [r2, #4]

  /* Reset HSEON, CSSON, & PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON);
 8002ad4:	4a11      	ldr	r2, [pc, #68]	; (8002b1c <HAL_RCC_DeInit+0x58>)
 8002ad6:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <HAL_RCC_DeInit+0x58>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae2:	6013      	str	r3, [r2, #0]
  
  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002ae4:	4a0d      	ldr	r2, [pc, #52]	; (8002b1c <HAL_RCC_DeInit+0x58>)
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <HAL_RCC_DeInit+0x58>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aee:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002af0:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <HAL_RCC_DeInit+0x58>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	605a      	str	r2, [r3, #4]
  
  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8002af6:	4a09      	ldr	r2, [pc, #36]	; (8002b1c <HAL_RCC_DeInit+0x58>)
 8002af8:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <HAL_RCC_DeInit+0x58>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b04:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);

#endif /* RCC_CFGR2_SUPPORT */
  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_DeInit+0x58>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <HAL_RCC_DeInit+0x5c>)
 8002b0e:	4a05      	ldr	r2, [pc, #20]	; (8002b24 <HAL_RCC_DeInit+0x60>)
 8002b10:	601a      	str	r2, [r3, #0]
}
 8002b12:	bf00      	nop
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	20000004 	.word	0x20000004
 8002b24:	007a1200 	.word	0x007a1200

08002b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 8087 	beq.w	8002c50 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b42:	4b92      	ldr	r3, [pc, #584]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d00c      	beq.n	8002b68 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b4e:	4b8f      	ldr	r3, [pc, #572]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d112      	bne.n	8002b80 <HAL_RCC_OscConfig+0x58>
 8002b5a:	4b8c      	ldr	r3, [pc, #560]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b66:	d10b      	bne.n	8002b80 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b68:	4b88      	ldr	r3, [pc, #544]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d06c      	beq.n	8002c4e <HAL_RCC_OscConfig+0x126>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d168      	bne.n	8002c4e <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e22d      	b.n	8002fdc <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b88:	d106      	bne.n	8002b98 <HAL_RCC_OscConfig+0x70>
 8002b8a:	4a80      	ldr	r2, [pc, #512]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002b8c:	4b7f      	ldr	r3, [pc, #508]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	e02e      	b.n	8002bf6 <HAL_RCC_OscConfig+0xce>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10c      	bne.n	8002bba <HAL_RCC_OscConfig+0x92>
 8002ba0:	4a7a      	ldr	r2, [pc, #488]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002ba2:	4b7a      	ldr	r3, [pc, #488]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	4a77      	ldr	r2, [pc, #476]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002bae:	4b77      	ldr	r3, [pc, #476]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	e01d      	b.n	8002bf6 <HAL_RCC_OscConfig+0xce>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bc2:	d10c      	bne.n	8002bde <HAL_RCC_OscConfig+0xb6>
 8002bc4:	4a71      	ldr	r2, [pc, #452]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002bc6:	4b71      	ldr	r3, [pc, #452]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	4a6e      	ldr	r2, [pc, #440]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002bd2:	4b6e      	ldr	r3, [pc, #440]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	e00b      	b.n	8002bf6 <HAL_RCC_OscConfig+0xce>
 8002bde:	4a6b      	ldr	r2, [pc, #428]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002be0:	4b6a      	ldr	r3, [pc, #424]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	4a68      	ldr	r2, [pc, #416]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002bec:	4b67      	ldr	r3, [pc, #412]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf4:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d013      	beq.n	8002c26 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfe:	f7fd fb09 	bl	8000214 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c06:	f7fd fb05 	bl	8000214 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b64      	cmp	r3, #100	; 0x64
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e1e1      	b.n	8002fdc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c18:	4b5c      	ldr	r3, [pc, #368]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0f0      	beq.n	8002c06 <HAL_RCC_OscConfig+0xde>
 8002c24:	e014      	b.n	8002c50 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c26:	f7fd faf5 	bl	8000214 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c2e:	f7fd faf1 	bl	8000214 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b64      	cmp	r3, #100	; 0x64
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e1cd      	b.n	8002fdc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c40:	4b52      	ldr	r3, [pc, #328]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f0      	bne.n	8002c2e <HAL_RCC_OscConfig+0x106>
 8002c4c:	e000      	b.n	8002c50 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d063      	beq.n	8002d24 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c5c:	4b4b      	ldr	r3, [pc, #300]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 030c 	and.w	r3, r3, #12
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00b      	beq.n	8002c80 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c68:	4b48      	ldr	r3, [pc, #288]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 030c 	and.w	r3, r3, #12
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d11c      	bne.n	8002cae <HAL_RCC_OscConfig+0x186>
 8002c74:	4b45      	ldr	r3, [pc, #276]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d116      	bne.n	8002cae <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c80:	4b42      	ldr	r3, [pc, #264]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_RCC_OscConfig+0x170>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e1a1      	b.n	8002fdc <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c98:	493c      	ldr	r1, [pc, #240]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002c9a:	4b3c      	ldr	r3, [pc, #240]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cac:	e03a      	b.n	8002d24 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d020      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb6:	4b36      	ldr	r3, [pc, #216]	; (8002d90 <HAL_RCC_OscConfig+0x268>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbc:	f7fd faaa 	bl	8000214 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cc4:	f7fd faa6 	bl	8000214 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e182      	b.n	8002fdc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd6:	4b2d      	ldr	r3, [pc, #180]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x19c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce2:	492a      	ldr	r1, [pc, #168]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002ce4:	4b29      	ldr	r3, [pc, #164]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]
 8002cf6:	e015      	b.n	8002d24 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf8:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <HAL_RCC_OscConfig+0x268>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfe:	f7fd fa89 	bl	8000214 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d06:	f7fd fa85 	bl	8000214 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e161      	b.n	8002fdc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d18:	4b1c      	ldr	r3, [pc, #112]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f0      	bne.n	8002d06 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d039      	beq.n	8002da4 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d019      	beq.n	8002d6c <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d38:	4b16      	ldr	r3, [pc, #88]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3e:	f7fd fa69 	bl	8000214 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d46:	f7fd fa65 	bl	8000214 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e141      	b.n	8002fdc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d58:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <HAL_RCC_OscConfig+0x264>)
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002d64:	2001      	movs	r0, #1
 8002d66:	f000 fbe1 	bl	800352c <RCC_Delay>
 8002d6a:	e01b      	b.n	8002da4 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d6c:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d72:	f7fd fa4f 	bl	8000214 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d78:	e00e      	b.n	8002d98 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d7a:	f7fd fa4b 	bl	8000214 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d907      	bls.n	8002d98 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e127      	b.n	8002fdc <HAL_RCC_OscConfig+0x4b4>
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	42420000 	.word	0x42420000
 8002d94:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d98:	4b92      	ldr	r3, [pc, #584]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ea      	bne.n	8002d7a <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80a6 	beq.w	8002efe <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002db2:	2300      	movs	r3, #0
 8002db4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db6:	4b8b      	ldr	r3, [pc, #556]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10d      	bne.n	8002dde <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc2:	4a88      	ldr	r2, [pc, #544]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002dc4:	4b87      	ldr	r3, [pc, #540]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	61d3      	str	r3, [r2, #28]
 8002dce:	4b85      	ldr	r3, [pc, #532]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dde:	4b82      	ldr	r3, [pc, #520]	; (8002fe8 <HAL_RCC_OscConfig+0x4c0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d118      	bne.n	8002e1c <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dea:	4a7f      	ldr	r2, [pc, #508]	; (8002fe8 <HAL_RCC_OscConfig+0x4c0>)
 8002dec:	4b7e      	ldr	r3, [pc, #504]	; (8002fe8 <HAL_RCC_OscConfig+0x4c0>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df6:	f7fd fa0d 	bl	8000214 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dfe:	f7fd fa09 	bl	8000214 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b64      	cmp	r3, #100	; 0x64
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e0e5      	b.n	8002fdc <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e10:	4b75      	ldr	r3, [pc, #468]	; (8002fe8 <HAL_RCC_OscConfig+0x4c0>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d106      	bne.n	8002e32 <HAL_RCC_OscConfig+0x30a>
 8002e24:	4a6f      	ldr	r2, [pc, #444]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002e26:	4b6f      	ldr	r3, [pc, #444]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6213      	str	r3, [r2, #32]
 8002e30:	e02d      	b.n	8002e8e <HAL_RCC_OscConfig+0x366>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10c      	bne.n	8002e54 <HAL_RCC_OscConfig+0x32c>
 8002e3a:	4a6a      	ldr	r2, [pc, #424]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002e3c:	4b69      	ldr	r3, [pc, #420]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	f023 0301 	bic.w	r3, r3, #1
 8002e44:	6213      	str	r3, [r2, #32]
 8002e46:	4a67      	ldr	r2, [pc, #412]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002e48:	4b66      	ldr	r3, [pc, #408]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f023 0304 	bic.w	r3, r3, #4
 8002e50:	6213      	str	r3, [r2, #32]
 8002e52:	e01c      	b.n	8002e8e <HAL_RCC_OscConfig+0x366>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2b05      	cmp	r3, #5
 8002e5a:	d10c      	bne.n	8002e76 <HAL_RCC_OscConfig+0x34e>
 8002e5c:	4a61      	ldr	r2, [pc, #388]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002e5e:	4b61      	ldr	r3, [pc, #388]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	f043 0304 	orr.w	r3, r3, #4
 8002e66:	6213      	str	r3, [r2, #32]
 8002e68:	4a5e      	ldr	r2, [pc, #376]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002e6a:	4b5e      	ldr	r3, [pc, #376]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	6213      	str	r3, [r2, #32]
 8002e74:	e00b      	b.n	8002e8e <HAL_RCC_OscConfig+0x366>
 8002e76:	4a5b      	ldr	r2, [pc, #364]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002e78:	4b5a      	ldr	r3, [pc, #360]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	f023 0301 	bic.w	r3, r3, #1
 8002e80:	6213      	str	r3, [r2, #32]
 8002e82:	4a58      	ldr	r2, [pc, #352]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002e84:	4b57      	ldr	r3, [pc, #348]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	f023 0304 	bic.w	r3, r3, #4
 8002e8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d015      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e96:	f7fd f9bd 	bl	8000214 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e9e:	f7fd f9b9 	bl	8000214 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e093      	b.n	8002fdc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb4:	4b4b      	ldr	r3, [pc, #300]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0ee      	beq.n	8002e9e <HAL_RCC_OscConfig+0x376>
 8002ec0:	e014      	b.n	8002eec <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec2:	f7fd f9a7 	bl	8000214 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec8:	e00a      	b.n	8002ee0 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eca:	f7fd f9a3 	bl	8000214 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e07d      	b.n	8002fdc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee0:	4b40      	ldr	r3, [pc, #256]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1ee      	bne.n	8002eca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d105      	bne.n	8002efe <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef2:	4a3c      	ldr	r2, [pc, #240]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002ef4:	4b3b      	ldr	r3, [pc, #236]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002efc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d069      	beq.n	8002fda <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f06:	4b37      	ldr	r3, [pc, #220]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d061      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d146      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1a:	4b34      	ldr	r3, [pc, #208]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f20:	f7fd f978 	bl	8000214 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f28:	f7fd f974 	bl	8000214 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e050      	b.n	8002fdc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f3a:	4b2a      	ldr	r3, [pc, #168]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4e:	d108      	bne.n	8002f62 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f50:	4924      	ldr	r1, [pc, #144]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002f52:	4b24      	ldr	r3, [pc, #144]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f62:	4820      	ldr	r0, [pc, #128]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002f64:	4b1f      	ldr	r3, [pc, #124]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a19      	ldr	r1, [r3, #32]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	430b      	orrs	r3, r1
 8002f76:	4313      	orrs	r3, r2
 8002f78:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f7a:	4b1c      	ldr	r3, [pc, #112]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f80:	f7fd f948 	bl	8000214 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f88:	f7fd f944 	bl	8000214 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e020      	b.n	8002fdc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f9a:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x460>
 8002fa6:	e018      	b.n	8002fda <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa8:	4b10      	ldr	r3, [pc, #64]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fae:	f7fd f931 	bl	8000214 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb6:	f7fd f92d 	bl	8000214 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e009      	b.n	8002fdc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc8:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f0      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x48e>
 8002fd4:	e001      	b.n	8002fda <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40007000 	.word	0x40007000
 8002fec:	42420060 	.word	0x42420060

08002ff0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ffe:	4b72      	ldr	r3, [pc, #456]	; (80031c8 <HAL_RCC_ClockConfig+0x1d8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0207 	and.w	r2, r3, #7
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d210      	bcs.n	800302e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300c:	496e      	ldr	r1, [pc, #440]	; (80031c8 <HAL_RCC_ClockConfig+0x1d8>)
 800300e:	4b6e      	ldr	r3, [pc, #440]	; (80031c8 <HAL_RCC_ClockConfig+0x1d8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 0207 	bic.w	r2, r3, #7
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	4313      	orrs	r3, r2
 800301a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800301c:	4b6a      	ldr	r3, [pc, #424]	; (80031c8 <HAL_RCC_ClockConfig+0x1d8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0207 	and.w	r2, r3, #7
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d001      	beq.n	800302e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e0c8      	b.n	80031c0 <HAL_RCC_ClockConfig+0x1d0>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d008      	beq.n	800304c <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800303a:	4964      	ldr	r1, [pc, #400]	; (80031cc <HAL_RCC_ClockConfig+0x1dc>)
 800303c:	4b63      	ldr	r3, [pc, #396]	; (80031cc <HAL_RCC_ClockConfig+0x1dc>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4313      	orrs	r3, r2
 800304a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d06a      	beq.n	800312e <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d107      	bne.n	8003070 <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003060:	4b5a      	ldr	r3, [pc, #360]	; (80031cc <HAL_RCC_ClockConfig+0x1dc>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d115      	bne.n	8003098 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0a7      	b.n	80031c0 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d107      	bne.n	8003088 <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003078:	4b54      	ldr	r3, [pc, #336]	; (80031cc <HAL_RCC_ClockConfig+0x1dc>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d109      	bne.n	8003098 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e09b      	b.n	80031c0 <HAL_RCC_ClockConfig+0x1d0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003088:	4b50      	ldr	r3, [pc, #320]	; (80031cc <HAL_RCC_ClockConfig+0x1dc>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e093      	b.n	80031c0 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003098:	494c      	ldr	r1, [pc, #304]	; (80031cc <HAL_RCC_ClockConfig+0x1dc>)
 800309a:	4b4c      	ldr	r3, [pc, #304]	; (80031cc <HAL_RCC_ClockConfig+0x1dc>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f023 0203 	bic.w	r2, r3, #3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030aa:	f7fd f8b3 	bl	8000214 <HAL_GetTick>
 80030ae:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d112      	bne.n	80030de <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030b8:	e00a      	b.n	80030d0 <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ba:	f7fd f8ab 	bl	8000214 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e077      	b.n	80031c0 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030d0:	4b3e      	ldr	r3, [pc, #248]	; (80031cc <HAL_RCC_ClockConfig+0x1dc>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 030c 	and.w	r3, r3, #12
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d1ee      	bne.n	80030ba <HAL_RCC_ClockConfig+0xca>
 80030dc:	e027      	b.n	800312e <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d11d      	bne.n	8003122 <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030e6:	e00a      	b.n	80030fe <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e8:	f7fd f894 	bl	8000214 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e060      	b.n	80031c0 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030fe:	4b33      	ldr	r3, [pc, #204]	; (80031cc <HAL_RCC_ClockConfig+0x1dc>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b08      	cmp	r3, #8
 8003108:	d1ee      	bne.n	80030e8 <HAL_RCC_ClockConfig+0xf8>
 800310a:	e010      	b.n	800312e <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310c:	f7fd f882 	bl	8000214 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f241 3288 	movw	r2, #5000	; 0x1388
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e04e      	b.n	80031c0 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003122:	4b2a      	ldr	r3, [pc, #168]	; (80031cc <HAL_RCC_ClockConfig+0x1dc>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1ee      	bne.n	800310c <HAL_RCC_ClockConfig+0x11c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800312e:	4b26      	ldr	r3, [pc, #152]	; (80031c8 <HAL_RCC_ClockConfig+0x1d8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0207 	and.w	r2, r3, #7
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d910      	bls.n	800315e <HAL_RCC_ClockConfig+0x16e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313c:	4922      	ldr	r1, [pc, #136]	; (80031c8 <HAL_RCC_ClockConfig+0x1d8>)
 800313e:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <HAL_RCC_ClockConfig+0x1d8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 0207 	bic.w	r2, r3, #7
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	4313      	orrs	r3, r2
 800314a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800314c:	4b1e      	ldr	r3, [pc, #120]	; (80031c8 <HAL_RCC_ClockConfig+0x1d8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0207 	and.w	r2, r3, #7
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d001      	beq.n	800315e <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e030      	b.n	80031c0 <HAL_RCC_ClockConfig+0x1d0>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	d008      	beq.n	800317c <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800316a:	4918      	ldr	r1, [pc, #96]	; (80031cc <HAL_RCC_ClockConfig+0x1dc>)
 800316c:	4b17      	ldr	r3, [pc, #92]	; (80031cc <HAL_RCC_ClockConfig+0x1dc>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	4313      	orrs	r3, r2
 800317a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d009      	beq.n	800319c <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003188:	4910      	ldr	r1, [pc, #64]	; (80031cc <HAL_RCC_ClockConfig+0x1dc>)
 800318a:	4b10      	ldr	r3, [pc, #64]	; (80031cc <HAL_RCC_ClockConfig+0x1dc>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4313      	orrs	r3, r2
 800319a:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800319c:	f000 f86c 	bl	8003278 <HAL_RCC_GetSysClockFreq>
 80031a0:	4601      	mov	r1, r0
 80031a2:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <HAL_RCC_ClockConfig+0x1dc>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	091b      	lsrs	r3, r3, #4
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	4a08      	ldr	r2, [pc, #32]	; (80031d0 <HAL_RCC_ClockConfig+0x1e0>)
 80031ae:	5cd3      	ldrb	r3, [r2, r3]
 80031b0:	fa21 f303 	lsr.w	r3, r1, r3
 80031b4:	4a07      	ldr	r2, [pc, #28]	; (80031d4 <HAL_RCC_ClockConfig+0x1e4>)
 80031b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80031b8:	2000      	movs	r0, #0
 80031ba:	f7fd f801 	bl	80001c0 <HAL_InitTick>
  
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40022000 	.word	0x40022000
 80031cc:	40021000 	.word	0x40021000
 80031d0:	08009280 	.word	0x08009280
 80031d4:	20000004 	.word	0x20000004

080031d8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08a      	sub	sp, #40	; 0x28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 80031e4:	f107 0318 	add.w	r3, r7, #24
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80031f2:	2302      	movs	r3, #2
 80031f4:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80031f6:	2303      	movs	r3, #3
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 80031fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003202:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8003204:	4a0e      	ldr	r2, [pc, #56]	; (8003240 <HAL_RCC_MCOConfig+0x68>)
 8003206:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <HAL_RCC_MCOConfig+0x68>)
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	f043 0304 	orr.w	r3, r3, #4
 800320e:	6193      	str	r3, [r2, #24]
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_RCC_MCOConfig+0x68>)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800321c:	f107 0318 	add.w	r3, r7, #24
 8003220:	4619      	mov	r1, r3
 8003222:	4808      	ldr	r0, [pc, #32]	; (8003244 <HAL_RCC_MCOConfig+0x6c>)
 8003224:	f7fe ffda 	bl	80021dc <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8003228:	4905      	ldr	r1, [pc, #20]	; (8003240 <HAL_RCC_MCOConfig+0x68>)
 800322a:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HAL_RCC_MCOConfig+0x68>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	4313      	orrs	r3, r2
 8003236:	604b      	str	r3, [r1, #4]
}
 8003238:	bf00      	nop
 800323a:	3728      	adds	r7, #40	; 0x28
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40021000 	.word	0x40021000
 8003244:	40010800 	.word	0x40010800

08003248 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800324c:	4b03      	ldr	r3, [pc, #12]	; (800325c <HAL_RCC_EnableCSS+0x14>)
 800324e:	2201      	movs	r2, #1
 8003250:	601a      	str	r2, [r3, #0]
}
 8003252:	bf00      	nop
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	4242004c 	.word	0x4242004c

08003260 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8003264:	4b03      	ldr	r3, [pc, #12]	; (8003274 <HAL_RCC_DisableCSS+0x14>)
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
}
 800326a:	bf00      	nop
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	4242004c 	.word	0x4242004c

08003278 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003278:	b490      	push	{r4, r7}
 800327a:	b08a      	sub	sp, #40	; 0x28
 800327c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800327e:	4b2a      	ldr	r3, [pc, #168]	; (8003328 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003280:	1d3c      	adds	r4, r7, #4
 8003282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003284:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003288:	4b28      	ldr	r3, [pc, #160]	; (800332c <HAL_RCC_GetSysClockFreq+0xb4>)
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	2300      	movs	r3, #0
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	2300      	movs	r3, #0
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 80032a2:	4b23      	ldr	r3, [pc, #140]	; (8003330 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d002      	beq.n	80032b8 <HAL_RCC_GetSysClockFreq+0x40>
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d003      	beq.n	80032be <HAL_RCC_GetSysClockFreq+0x46>
 80032b6:	e02d      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032b8:	4b1e      	ldr	r3, [pc, #120]	; (8003334 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032ba:	623b      	str	r3, [r7, #32]
      break;
 80032bc:	e02d      	b.n	800331a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	0c9b      	lsrs	r3, r3, #18
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032ca:	4413      	add	r3, r2
 80032cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d013      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032dc:	4b14      	ldr	r3, [pc, #80]	; (8003330 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	0c5b      	lsrs	r3, r3, #17
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032ea:	4413      	add	r3, r2
 80032ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032f0:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80032f2:	4a10      	ldr	r2, [pc, #64]	; (8003334 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	fb02 f303 	mul.w	r3, r2, r3
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
 8003302:	e004      	b.n	800330e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	4a0c      	ldr	r2, [pc, #48]	; (8003338 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003308:	fb02 f303 	mul.w	r3, r2, r3
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	623b      	str	r3, [r7, #32]
      break;
 8003312:	e002      	b.n	800331a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003314:	4b07      	ldr	r3, [pc, #28]	; (8003334 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003316:	623b      	str	r3, [r7, #32]
      break;
 8003318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800331a:	6a3b      	ldr	r3, [r7, #32]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3728      	adds	r7, #40	; 0x28
 8003320:	46bd      	mov	sp, r7
 8003322:	bc90      	pop	{r4, r7}
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	08009248 	.word	0x08009248
 800332c:	08009258 	.word	0x08009258
 8003330:	40021000 	.word	0x40021000
 8003334:	007a1200 	.word	0x007a1200
 8003338:	003d0900 	.word	0x003d0900

0800333c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003340:	4b02      	ldr	r3, [pc, #8]	; (800334c <HAL_RCC_GetHCLKFreq+0x10>)
 8003342:	681b      	ldr	r3, [r3, #0]
}
 8003344:	4618      	mov	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr
 800334c:	20000004 	.word	0x20000004

08003350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003354:	f7ff fff2 	bl	800333c <HAL_RCC_GetHCLKFreq>
 8003358:	4601      	mov	r1, r0
 800335a:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	0a1b      	lsrs	r3, r3, #8
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	4a03      	ldr	r2, [pc, #12]	; (8003374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003366:	5cd3      	ldrb	r3, [r2, r3]
 8003368:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800336c:	4618      	mov	r0, r3
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000
 8003374:	08009290 	.word	0x08009290

08003378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800337c:	f7ff ffde 	bl	800333c <HAL_RCC_GetHCLKFreq>
 8003380:	4601      	mov	r1, r0
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	0adb      	lsrs	r3, r3, #11
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	4a03      	ldr	r2, [pc, #12]	; (800339c <HAL_RCC_GetPCLK2Freq+0x24>)
 800338e:	5cd3      	ldrb	r3, [r2, r3]
 8003390:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40021000 	.word	0x40021000
 800339c:	08009290 	.word	0x08009290

080033a0 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that 
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);

  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	220f      	movs	r2, #15
 80033ac:	601a      	str	r2, [r3, #0]
  /* Get the Prediv1 source --------------------------------------------------*/
  RCC_OscInitStruct->Prediv1Source = READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC);
#endif /* RCC_CFGR2_PREDIV1SRC */

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 80033ae:	4b3c      	ldr	r3, [pc, #240]	; (80034a0 <HAL_RCC_GetOscConfig+0x100>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033ba:	d104      	bne.n	80033c6 <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80033c2:	605a      	str	r2, [r3, #4]
 80033c4:	e00e      	b.n	80033e4 <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 80033c6:	4b36      	ldr	r3, [pc, #216]	; (80034a0 <HAL_RCC_GetOscConfig+0x100>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d2:	d104      	bne.n	80033de <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033da:	605a      	str	r2, [r3, #4]
 80033dc:	e002      	b.n	80033e4 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	605a      	str	r2, [r3, #4]
  }
  RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
 80033e4:	4b2e      	ldr	r3, [pc, #184]	; (80034a0 <HAL_RCC_GetOscConfig+0x100>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	609a      	str	r2, [r3, #8]

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 80033f0:	4b2b      	ldr	r3, [pc, #172]	; (80034a0 <HAL_RCC_GetOscConfig+0x100>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d103      	bne.n	8003404 <HAL_RCC_GetOscConfig+0x64>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	611a      	str	r2, [r3, #16]
 8003402:	e002      	b.n	800340a <HAL_RCC_GetOscConfig+0x6a>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	611a      	str	r2, [r3, #16]
  }
  
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 800340a:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <HAL_RCC_GetOscConfig+0x100>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	08db      	lsrs	r3, r3, #3
 8003410:	f003 021f 	and.w	r2, r3, #31
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	615a      	str	r2, [r3, #20]
  
  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8003418:	4b21      	ldr	r3, [pc, #132]	; (80034a0 <HAL_RCC_GetOscConfig+0x100>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b04      	cmp	r3, #4
 8003422:	d103      	bne.n	800342c <HAL_RCC_GetOscConfig+0x8c>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2205      	movs	r2, #5
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	e00c      	b.n	8003446 <HAL_RCC_GetOscConfig+0xa6>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 800342c:	4b1c      	ldr	r3, [pc, #112]	; (80034a0 <HAL_RCC_GetOscConfig+0x100>)
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b01      	cmp	r3, #1
 8003436:	d103      	bne.n	8003440 <HAL_RCC_GetOscConfig+0xa0>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	60da      	str	r2, [r3, #12]
 800343e:	e002      	b.n	8003446 <HAL_RCC_GetOscConfig+0xa6>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	60da      	str	r2, [r3, #12]
  }
  
  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8003446:	4b16      	ldr	r3, [pc, #88]	; (80034a0 <HAL_RCC_GetOscConfig+0x100>)
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b01      	cmp	r3, #1
 8003450:	d103      	bne.n	800345a <HAL_RCC_GetOscConfig+0xba>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	619a      	str	r2, [r3, #24]
 8003458:	e002      	b.n	8003460 <HAL_RCC_GetOscConfig+0xc0>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	619a      	str	r2, [r3, #24]
  }
  

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8003460:	4b0f      	ldr	r3, [pc, #60]	; (80034a0 <HAL_RCC_GetOscConfig+0x100>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800346c:	d103      	bne.n	8003476 <HAL_RCC_GetOscConfig+0xd6>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2202      	movs	r2, #2
 8003472:	61da      	str	r2, [r3, #28]
 8003474:	e002      	b.n	800347c <HAL_RCC_GetOscConfig+0xdc>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	61da      	str	r2, [r3, #28]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 800347c:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <HAL_RCC_GetOscConfig+0x100>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
 8003488:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <HAL_RCC_GetOscConfig+0x100>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	625a      	str	r2, [r3, #36]	; 0x24
    RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_OFF;
  }
  RCC_OscInitStruct->PLL2.HSEPrediv2Value = __HAL_RCC_HSE_GET_PREDIV2();
  RCC_OscInitStruct->PLL2.PLL2MUL = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PLL2MUL);
#endif /* RCC_CR_PLL2ON */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000

080034a4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	220f      	movs	r2, #15
 80034b2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034b4:	4b11      	ldr	r3, [pc, #68]	; (80034fc <HAL_RCC_GetClockConfig+0x58>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0203 	and.w	r2, r3, #3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80034c0:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <HAL_RCC_GetClockConfig+0x58>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCC_GetClockConfig+0x58>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80034d8:	4b08      	ldr	r3, [pc, #32]	; (80034fc <HAL_RCC_GetClockConfig+0x58>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	611a      	str	r2, [r3, #16]
  
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80034e6:	4b06      	ldr	r3, [pc, #24]	; (8003500 <HAL_RCC_GetClockConfig+0x5c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0207 	and.w	r2, r3, #7
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0; 
#endif
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr
 80034fc:	40021000 	.word	0x40021000
 8003500:	40022000 	.word	0x40022000

08003504 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003508:	4b06      	ldr	r3, [pc, #24]	; (8003524 <HAL_RCC_NMI_IRQHandler+0x20>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003510:	2b80      	cmp	r3, #128	; 0x80
 8003512:	d104      	bne.n	800351e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003514:	f000 f828 	bl	8003568 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003518:	4b03      	ldr	r3, [pc, #12]	; (8003528 <HAL_RCC_NMI_IRQHandler+0x24>)
 800351a:	2280      	movs	r2, #128	; 0x80
 800351c:	701a      	strb	r2, [r3, #0]
  }
}
 800351e:	bf00      	nop
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40021000 	.word	0x40021000
 8003528:	4002100a 	.word	0x4002100a

0800352c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003534:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <RCC_Delay+0x34>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a0a      	ldr	r2, [pc, #40]	; (8003564 <RCC_Delay+0x38>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	0a5b      	lsrs	r3, r3, #9
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	fb02 f303 	mul.w	r3, r2, r3
 8003546:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("nop");
 8003548:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1e5a      	subs	r2, r3, #1
 800354e:	60fa      	str	r2, [r7, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f9      	bne.n	8003548 <RCC_Delay+0x1c>
}
 8003554:	bf00      	nop
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	20000004 	.word	0x20000004
 8003564:	10624dd3 	.word	0x10624dd3

08003568 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 800356c:	bf00      	nop
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b00      	cmp	r3, #0
 800358e:	d07d      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003590:	2300      	movs	r3, #0
 8003592:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003594:	4b4f      	ldr	r3, [pc, #316]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10d      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035a0:	4a4c      	ldr	r2, [pc, #304]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a2:	4b4c      	ldr	r3, [pc, #304]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035aa:	61d3      	str	r3, [r2, #28]
 80035ac:	4b49      	ldr	r3, [pc, #292]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b8:	2301      	movs	r3, #1
 80035ba:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035bc:	4b46      	ldr	r3, [pc, #280]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d118      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c8:	4a43      	ldr	r2, [pc, #268]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ca:	4b43      	ldr	r3, [pc, #268]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d4:	f7fc fe1e 	bl	8000214 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035da:	e008      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035dc:	f7fc fe1a 	bl	8000214 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b64      	cmp	r3, #100	; 0x64
 80035e8:	d901      	bls.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e06d      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ee:	4b3a      	ldr	r3, [pc, #232]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0f0      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035fa:	4b36      	ldr	r3, [pc, #216]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003602:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d02e      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	429a      	cmp	r2, r3
 8003616:	d027      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003618:	4b2e      	ldr	r3, [pc, #184]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003620:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003622:	4b2e      	ldr	r3, [pc, #184]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003624:	2201      	movs	r2, #1
 8003626:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003628:	4b2c      	ldr	r3, [pc, #176]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800362e:	4a29      	ldr	r2, [pc, #164]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d014      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363e:	f7fc fde9 	bl	8000214 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003644:	e00a      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003646:	f7fc fde5 	bl	8000214 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	f241 3288 	movw	r2, #5000	; 0x1388
 8003654:	4293      	cmp	r3, r2
 8003656:	d901      	bls.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e036      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365c:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0ee      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003668:	491a      	ldr	r1, [pc, #104]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366a:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	4313      	orrs	r3, r2
 8003678:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800367a:	7dfb      	ldrb	r3, [r7, #23]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d105      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003680:	4a14      	ldr	r2, [pc, #80]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003682:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003698:	490e      	ldr	r1, [pc, #56]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369a:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d008      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036b6:	4907      	ldr	r1, [pc, #28]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40007000 	.word	0x40007000
 80036dc:	42420440 	.word	0x42420440

080036e0 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that 
  *         returns the configuration information for the Extended Peripherals clocks(RTC, I2S, ADC clocks).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t srcclk = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
  
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

  /* Get the RTC configuration -----------------------------------------------*/
  srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80036f2:	4b12      	ldr	r3, [pc, #72]	; (800373c <HAL_RCCEx_GetPeriphCLKConfig+0x5c>)
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fa:	60fb      	str	r3, [r7, #12]
  /* Source clock is LSE or LSI*/
  PeriphClkInit->RTCClockSelection = srcclk;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	605a      	str	r2, [r3, #4]

  /* Get the ADC clock configuration -----------------------------------------*/
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_ADC;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f043 0202 	orr.w	r2, r3, #2
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	601a      	str	r2, [r3, #0]
  PeriphClkInit->AdcClockSelection = __HAL_RCC_GET_ADC_SOURCE();
 800370e:	4b0b      	ldr	r3, [pc, #44]	; (800373c <HAL_RCCEx_GetPeriphCLKConfig+0x5c>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	609a      	str	r2, [r3, #8]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /* Get the USB clock configuration -----------------------------------------*/
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_USB;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f043 0210 	orr.w	r2, r3, #16
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	601a      	str	r2, [r3, #0]
  PeriphClkInit->UsbClockSelection = __HAL_RCC_GET_USB_SOURCE();
 8003726:	4b05      	ldr	r3, [pc, #20]	; (800373c <HAL_RCCEx_GetPeriphCLKConfig+0x5c>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	60da      	str	r2, [r3, #12]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
}
 8003732:	bf00      	nop
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr
 800373c:	40021000 	.word	0x40021000

08003740 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003740:	b590      	push	{r4, r7, lr}
 8003742:	b08d      	sub	sp, #52	; 0x34
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003748:	4b57      	ldr	r3, [pc, #348]	; (80038a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800374a:	f107 040c 	add.w	r4, r7, #12
 800374e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003750:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003754:	4b55      	ldr	r3, [pc, #340]	; (80038ac <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
 800375e:	2300      	movs	r3, #0
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003762:	2300      	movs	r3, #0
 8003764:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	2300      	movs	r3, #0
 800376c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b02      	cmp	r3, #2
 8003772:	f000 8084 	beq.w	800387e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003776:	2b10      	cmp	r3, #16
 8003778:	d002      	beq.n	8003780 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 800377a:	2b01      	cmp	r3, #1
 800377c:	d049      	beq.n	8003812 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
  default: 
    {
      break;
 800377e:	e08d      	b.n	800389c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->CFGR;
 8003780:	4b4b      	ldr	r3, [pc, #300]	; (80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8003786:	4b4a      	ldr	r3, [pc, #296]	; (80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 8083 	beq.w	800389a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	0c9b      	lsrs	r3, r3, #18
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80037a0:	4413      	add	r3, r2
 80037a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037a6:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d018      	beq.n	80037e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037b2:	4b3f      	ldr	r3, [pc, #252]	; (80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	0c5b      	lsrs	r3, r3, #17
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80037c0:	4413      	add	r3, r2
 80037c2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00d      	beq.n	80037ee <HAL_RCCEx_GetPeriphCLKFreq+0xae>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80037d2:	4a38      	ldr	r2, [pc, #224]	; (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037da:	6a3a      	ldr	r2, [r7, #32]
 80037dc:	fb02 f303 	mul.w	r3, r2, r3
 80037e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e2:	e004      	b.n	80037ee <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	4a34      	ldr	r2, [pc, #208]	; (80038b8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80037e8:	fb02 f303 	mul.w	r3, r2, r3
 80037ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80037ee:	4b30      	ldr	r3, [pc, #192]	; (80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037fa:	d102      	bne.n	8003802 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
          frequency = pllclk;
 80037fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003800:	e04b      	b.n	800389a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          frequency = (pllclk * 2) / 3;
 8003802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	4a2d      	ldr	r2, [pc, #180]	; (80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003808:	fba2 2303 	umull	r2, r3, r2, r3
 800380c:	085b      	lsrs	r3, r3, #1
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003810:	e043      	b.n	800389a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      temp_reg = RCC->BDCR;
 8003812:	4b27      	ldr	r3, [pc, #156]	; (80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003822:	d108      	bne.n	8003836 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
        frequency = LSE_VALUE;
 800382e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003832:	62bb      	str	r3, [r7, #40]	; 0x28
 8003834:	e022      	b.n	800387c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003840:	d109      	bne.n	8003856 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 8003842:	4b1b      	ldr	r3, [pc, #108]	; (80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        frequency = LSI_VALUE;
 800384e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003852:	62bb      	str	r3, [r7, #40]	; 0x28
 8003854:	e012      	b.n	800387c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003860:	d109      	bne.n	8003876 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 8003862:	4b13      	ldr	r3, [pc, #76]	; (80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
        frequency = HSE_VALUE / 128U;
 800386e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003872:	62bb      	str	r3, [r7, #40]	; 0x28
 8003874:	e002      	b.n	800387c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800387a:	e00f      	b.n	800389c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 800387c:	e00e      	b.n	800389c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800387e:	f7ff fd7b 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 8003882:	4602      	mov	r2, r0
 8003884:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	0b9b      	lsrs	r3, r3, #14
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	3301      	adds	r3, #1
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	fbb2 f3f3 	udiv	r3, r2, r3
 8003896:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003898:	e000      	b.n	800389c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      break;
 800389a:	bf00      	nop
    }
  }
  return(frequency);
 800389c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3734      	adds	r7, #52	; 0x34
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd90      	pop	{r4, r7, pc}
 80038a6:	bf00      	nop
 80038a8:	0800925c 	.word	0x0800925c
 80038ac:	0800926c 	.word	0x0800926c
 80038b0:	40021000 	.word	0x40021000
 80038b4:	007a1200 	.word	0x007a1200
 80038b8:	003d0900 	.word	0x003d0900
 80038bc:	aaaaaaab 	.word	0xaaaaaaab

080038c0 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e01d      	b.n	800390e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f005 fba8 	bl	800903c <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3304      	adds	r3, #4
 80038fc:	4619      	mov	r1, r3
 80038fe:	4610      	mov	r0, r2
 8003900:	f003 f949 	bl	8006b96 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral 
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2202      	movs	r2, #2
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6a1a      	ldr	r2, [r3, #32]
 800392c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003930:	4013      	ands	r3, r2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10f      	bne.n	8003956 <HAL_TIM_Base_DeInit+0x40>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a1a      	ldr	r2, [r3, #32]
 800393c:	f240 4344 	movw	r3, #1092	; 0x444
 8003940:	4013      	ands	r3, r2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d107      	bne.n	8003956 <HAL_TIM_Base_DeInit+0x40>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6812      	ldr	r2, [r2, #0]
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	f022 0201 	bic.w	r2, r2, #1
 8003954:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f005 fbdc 	bl	8009114 <HAL_TIM_Base_MspDeInit>

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
  * @brief  Initializes the TIM Base MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr
  * @brief  DeInitializes TIM Base MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspDeInit could be implemented in the user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr

0800399a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2202      	movs	r2, #2
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	f042 0201 	orr.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bc80      	pop	{r7}
 80039cc:	4770      	bx	lr

080039ce <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2202      	movs	r2, #2
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6a1a      	ldr	r2, [r3, #32]
 80039e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80039e8:	4013      	ands	r3, r2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10f      	bne.n	8003a0e <HAL_TIM_Base_Stop+0x40>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6a1a      	ldr	r2, [r3, #32]
 80039f4:	f240 4344 	movw	r3, #1092	; 0x444
 80039f8:	4013      	ands	r3, r2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d107      	bne.n	8003a0e <HAL_TIM_Base_Stop+0x40>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	f022 0201 	bic.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr

08003a22 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6812      	ldr	r2, [r2, #0]
 8003a32:	68d2      	ldr	r2, [r2, #12]
 8003a34:	f042 0201 	orr.w	r2, r2, #1
 8003a38:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	f042 0201 	orr.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr

08003a56 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6812      	ldr	r2, [r2, #0]
 8003a66:	68d2      	ldr	r2, [r2, #12]
 8003a68:	f022 0201 	bic.w	r2, r2, #1
 8003a6c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6a1a      	ldr	r2, [r3, #32]
 8003a74:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10f      	bne.n	8003a9e <HAL_TIM_Base_Stop_IT+0x48>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6a1a      	ldr	r2, [r3, #32]
 8003a84:	f240 4344 	movw	r3, #1092	; 0x444
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d107      	bne.n	8003a9e <HAL_TIM_Base_Stop_IT+0x48>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6812      	ldr	r2, [r2, #0]
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	f022 0201 	bic.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr

08003aaa <HAL_TIM_Base_Start_DMA>:
  * @param  pData : The source Buffer address.
  * @param  Length : The length of data to be transferred from memory to peripheral.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  if((htim->State == HAL_TIM_STATE_BUSY))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d101      	bne.n	8003ac8 <HAL_TIM_Base_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e034      	b.n	8003b32 <HAL_TIM_Base_Start_DMA+0x88>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d10b      	bne.n	8003aec <HAL_TIM_Base_Start_DMA+0x42>
  {
    if((pData == 0U) && (Length > 0U))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d104      	bne.n	8003ae4 <HAL_TIM_Base_Start_DMA+0x3a>
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_TIM_Base_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e026      	b.n	8003b32 <HAL_TIM_Base_Start_DMA+0x88>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
  }
  /* Set the DMA Period elapsed callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	4a12      	ldr	r2, [pc, #72]	; (8003b3c <HAL_TIM_Base_Start_DMA+0x92>)
 8003af2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	4a11      	ldr	r2, [pc, #68]	; (8003b40 <HAL_TIM_Base_Start_DMA+0x96>)
 8003afa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the DMA channel */
  HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR, Length);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a18      	ldr	r0, [r3, #32]
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	332c      	adds	r3, #44	; 0x2c
 8003b08:	461a      	mov	r2, r3
 8003b0a:	88fb      	ldrh	r3, [r7, #6]
 8003b0c:	f7fc ffdc 	bl	8000ac8 <HAL_DMA_Start_IT>

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	68d2      	ldr	r2, [r2, #12]
 8003b1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	08006b4f 	.word	0x08006b4f
 8003b40:	08006a4b 	.word	0x08006a4b

08003b44 <HAL_TIM_Base_Stop_DMA>:
  * @brief  Stops the TIM Base generation in DMA mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6812      	ldr	r2, [r2, #0]
 8003b54:	68d2      	ldr	r2, [r2, #12]
 8003b56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b5a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6a1a      	ldr	r2, [r3, #32]
 8003b62:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10f      	bne.n	8003b8c <HAL_TIM_Base_Stop_DMA+0x48>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6a1a      	ldr	r2, [r3, #32]
 8003b72:	f240 4344 	movw	r3, #1092	; 0x444
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d107      	bne.n	8003b8c <HAL_TIM_Base_Stop_DMA+0x48>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6812      	ldr	r2, [r2, #0]
 8003b84:	6812      	ldr	r2, [r2, #0]
 8003b86:	f022 0201 	bic.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_TIM_OC_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e01d      	b.n	8003bee <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d106      	bne.n	8003bcc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f845 	bl	8003c56 <HAL_TIM_OC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4610      	mov	r0, r2
 8003be0:	f002 ffd9 	bl	8006b96 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_TIM_OC_DeInit>:
  * @brief  DeInitializes the TIM peripheral 
  * @param  htim : TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b082      	sub	sp, #8
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   htim->State = HAL_TIM_STATE_BUSY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2202      	movs	r2, #2
 8003c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6a1a      	ldr	r2, [r3, #32]
 8003c0c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10f      	bne.n	8003c36 <HAL_TIM_OC_DeInit+0x40>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6a1a      	ldr	r2, [r3, #32]
 8003c1c:	f240 4344 	movw	r3, #1092	; 0x444
 8003c20:	4013      	ands	r3, r2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d107      	bne.n	8003c36 <HAL_TIM_OC_DeInit+0x40>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	6812      	ldr	r2, [r2, #0]
 8003c30:	f022 0201 	bic.w	r2, r2, #1
 8003c34:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f816 	bl	8003c68 <HAL_TIM_OC_MspDeInit>

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr

08003c68 <HAL_TIM_OC_MspDeInit>:
  * @brief  DeInitializes TIM Output Compare MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspDeInit could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr

08003c7a <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	6839      	ldr	r1, [r7, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f003 fbd7 	bl	8007440 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a0c      	ldr	r2, [pc, #48]	; (8003cc8 <HAL_TIM_OC_Start+0x4e>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d107      	bne.n	8003cac <HAL_TIM_OC_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6812      	ldr	r2, [r2, #0]
 8003ca4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003ca6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003caa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	6812      	ldr	r2, [r2, #0]
 8003cb6:	f042 0201 	orr.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40012c00 	.word	0x40012c00

08003ccc <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	6839      	ldr	r1, [r7, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f003 fbae 	bl	8007440 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1b      	ldr	r2, [pc, #108]	; (8003d58 <HAL_TIM_OC_Stop+0x8c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d117      	bne.n	8003d1e <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6a1a      	ldr	r2, [r3, #32]
 8003cf4:	f241 1311 	movw	r3, #4369	; 0x1111
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10f      	bne.n	8003d1e <HAL_TIM_OC_Stop+0x52>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6a1a      	ldr	r2, [r3, #32]
 8003d04:	f240 4344 	movw	r3, #1092	; 0x444
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d107      	bne.n	8003d1e <HAL_TIM_OC_Stop+0x52>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6812      	ldr	r2, [r2, #0]
 8003d16:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003d18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6a1a      	ldr	r2, [r3, #32]
 8003d24:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10f      	bne.n	8003d4e <HAL_TIM_OC_Stop+0x82>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6a1a      	ldr	r2, [r3, #32]
 8003d34:	f240 4344 	movw	r3, #1092	; 0x444
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d107      	bne.n	8003d4e <HAL_TIM_OC_Stop+0x82>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	6812      	ldr	r2, [r2, #0]
 8003d48:	f022 0201 	bic.w	r2, r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40012c00 	.word	0x40012c00

08003d5c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b0c      	cmp	r3, #12
 8003d6a:	d841      	bhi.n	8003df0 <HAL_TIM_OC_Start_IT+0x94>
 8003d6c:	a201      	add	r2, pc, #4	; (adr r2, 8003d74 <HAL_TIM_OC_Start_IT+0x18>)
 8003d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d72:	bf00      	nop
 8003d74:	08003da9 	.word	0x08003da9
 8003d78:	08003df1 	.word	0x08003df1
 8003d7c:	08003df1 	.word	0x08003df1
 8003d80:	08003df1 	.word	0x08003df1
 8003d84:	08003dbb 	.word	0x08003dbb
 8003d88:	08003df1 	.word	0x08003df1
 8003d8c:	08003df1 	.word	0x08003df1
 8003d90:	08003df1 	.word	0x08003df1
 8003d94:	08003dcd 	.word	0x08003dcd
 8003d98:	08003df1 	.word	0x08003df1
 8003d9c:	08003df1 	.word	0x08003df1
 8003da0:	08003df1 	.word	0x08003df1
 8003da4:	08003ddf 	.word	0x08003ddf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	68d2      	ldr	r2, [r2, #12]
 8003db2:	f042 0202 	orr.w	r2, r2, #2
 8003db6:	60da      	str	r2, [r3, #12]
    }
    break;
 8003db8:	e01b      	b.n	8003df2 <HAL_TIM_OC_Start_IT+0x96>

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6812      	ldr	r2, [r2, #0]
 8003dc2:	68d2      	ldr	r2, [r2, #12]
 8003dc4:	f042 0204 	orr.w	r2, r2, #4
 8003dc8:	60da      	str	r2, [r3, #12]
    }
    break;
 8003dca:	e012      	b.n	8003df2 <HAL_TIM_OC_Start_IT+0x96>

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	68d2      	ldr	r2, [r2, #12]
 8003dd6:	f042 0208 	orr.w	r2, r2, #8
 8003dda:	60da      	str	r2, [r3, #12]
    }
    break;
 8003ddc:	e009      	b.n	8003df2 <HAL_TIM_OC_Start_IT+0x96>

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6812      	ldr	r2, [r2, #0]
 8003de6:	68d2      	ldr	r2, [r2, #12]
 8003de8:	f042 0210 	orr.w	r2, r2, #16
 8003dec:	60da      	str	r2, [r3, #12]
    }
    break;
 8003dee:	e000      	b.n	8003df2 <HAL_TIM_OC_Start_IT+0x96>

    default:
    break;
 8003df0:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2201      	movs	r2, #1
 8003df8:	6839      	ldr	r1, [r7, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f003 fb20 	bl	8007440 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a0b      	ldr	r2, [pc, #44]	; (8003e34 <HAL_TIM_OC_Start_IT+0xd8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d107      	bne.n	8003e1a <HAL_TIM_OC_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6812      	ldr	r2, [r2, #0]
 8003e12:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	f042 0201 	orr.w	r2, r2, #1
 8003e28:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40012c00 	.word	0x40012c00

08003e38 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b0c      	cmp	r3, #12
 8003e46:	d841      	bhi.n	8003ecc <HAL_TIM_OC_Stop_IT+0x94>
 8003e48:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <HAL_TIM_OC_Stop_IT+0x18>)
 8003e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4e:	bf00      	nop
 8003e50:	08003e85 	.word	0x08003e85
 8003e54:	08003ecd 	.word	0x08003ecd
 8003e58:	08003ecd 	.word	0x08003ecd
 8003e5c:	08003ecd 	.word	0x08003ecd
 8003e60:	08003e97 	.word	0x08003e97
 8003e64:	08003ecd 	.word	0x08003ecd
 8003e68:	08003ecd 	.word	0x08003ecd
 8003e6c:	08003ecd 	.word	0x08003ecd
 8003e70:	08003ea9 	.word	0x08003ea9
 8003e74:	08003ecd 	.word	0x08003ecd
 8003e78:	08003ecd 	.word	0x08003ecd
 8003e7c:	08003ecd 	.word	0x08003ecd
 8003e80:	08003ebb 	.word	0x08003ebb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6812      	ldr	r2, [r2, #0]
 8003e8c:	68d2      	ldr	r2, [r2, #12]
 8003e8e:	f022 0202 	bic.w	r2, r2, #2
 8003e92:	60da      	str	r2, [r3, #12]
    }
    break;
 8003e94:	e01b      	b.n	8003ece <HAL_TIM_OC_Stop_IT+0x96>

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6812      	ldr	r2, [r2, #0]
 8003e9e:	68d2      	ldr	r2, [r2, #12]
 8003ea0:	f022 0204 	bic.w	r2, r2, #4
 8003ea4:	60da      	str	r2, [r3, #12]
    }
    break;
 8003ea6:	e012      	b.n	8003ece <HAL_TIM_OC_Stop_IT+0x96>

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6812      	ldr	r2, [r2, #0]
 8003eb0:	68d2      	ldr	r2, [r2, #12]
 8003eb2:	f022 0208 	bic.w	r2, r2, #8
 8003eb6:	60da      	str	r2, [r3, #12]
    }
    break;
 8003eb8:	e009      	b.n	8003ece <HAL_TIM_OC_Stop_IT+0x96>

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	68d2      	ldr	r2, [r2, #12]
 8003ec4:	f022 0210 	bic.w	r2, r2, #16
 8003ec8:	60da      	str	r2, [r3, #12]
    }
    break;
 8003eca:	e000      	b.n	8003ece <HAL_TIM_OC_Stop_IT+0x96>

    default:
    break;
 8003ecc:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	6839      	ldr	r1, [r7, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f003 fab2 	bl	8007440 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a1b      	ldr	r2, [pc, #108]	; (8003f50 <HAL_TIM_OC_Stop_IT+0x118>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d117      	bne.n	8003f16 <HAL_TIM_OC_Stop_IT+0xde>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6a1a      	ldr	r2, [r3, #32]
 8003eec:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10f      	bne.n	8003f16 <HAL_TIM_OC_Stop_IT+0xde>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6a1a      	ldr	r2, [r3, #32]
 8003efc:	f240 4344 	movw	r3, #1092	; 0x444
 8003f00:	4013      	ands	r3, r2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d107      	bne.n	8003f16 <HAL_TIM_OC_Stop_IT+0xde>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6812      	ldr	r2, [r2, #0]
 8003f0e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003f10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6a1a      	ldr	r2, [r3, #32]
 8003f1c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f20:	4013      	ands	r3, r2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10f      	bne.n	8003f46 <HAL_TIM_OC_Stop_IT+0x10e>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6a1a      	ldr	r2, [r3, #32]
 8003f2c:	f240 4344 	movw	r3, #1092	; 0x444
 8003f30:	4013      	ands	r3, r2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d107      	bne.n	8003f46 <HAL_TIM_OC_Stop_IT+0x10e>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6812      	ldr	r2, [r2, #0]
 8003f3e:	6812      	ldr	r2, [r2, #0]
 8003f40:	f022 0201 	bic.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40012c00 	.word	0x40012c00

08003f54 <HAL_TIM_OC_Start_DMA>:
  * @param  pData : The source Buffer address.
  * @param  Length : The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if((htim->State == HAL_TIM_STATE_BUSY))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d101      	bne.n	8003f72 <HAL_TIM_OC_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e0bc      	b.n	80040ec <HAL_TIM_OC_Start_DMA+0x198>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d10b      	bne.n	8003f96 <HAL_TIM_OC_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0U) && (Length > 0U))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d104      	bne.n	8003f8e <HAL_TIM_OC_Start_DMA+0x3a>
 8003f84:	887b      	ldrh	r3, [r7, #2]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_TIM_OC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e0ae      	b.n	80040ec <HAL_TIM_OC_Start_DMA+0x198>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2202      	movs	r2, #2
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
  }
  switch (Channel)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b0c      	cmp	r3, #12
 8003f9a:	f200 8089 	bhi.w	80040b0 <HAL_TIM_OC_Start_DMA+0x15c>
 8003f9e:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <HAL_TIM_OC_Start_DMA+0x50>)
 8003fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa4:	08003fd9 	.word	0x08003fd9
 8003fa8:	080040b1 	.word	0x080040b1
 8003fac:	080040b1 	.word	0x080040b1
 8003fb0:	080040b1 	.word	0x080040b1
 8003fb4:	0800400f 	.word	0x0800400f
 8003fb8:	080040b1 	.word	0x080040b1
 8003fbc:	080040b1 	.word	0x080040b1
 8003fc0:	080040b1 	.word	0x080040b1
 8003fc4:	08004045 	.word	0x08004045
 8003fc8:	080040b1 	.word	0x080040b1
 8003fcc:	080040b1 	.word	0x080040b1
 8003fd0:	080040b1 	.word	0x080040b1
 8003fd4:	0800407b 	.word	0x0800407b
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	4a45      	ldr	r2, [pc, #276]	; (80040f4 <HAL_TIM_OC_Start_DMA+0x1a0>)
 8003fde:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	4a44      	ldr	r2, [pc, #272]	; (80040f8 <HAL_TIM_OC_Start_DMA+0x1a4>)
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3334      	adds	r3, #52	; 0x34
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	887b      	ldrh	r3, [r7, #2]
 8003ff8:	f7fc fd66 	bl	8000ac8 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	68d2      	ldr	r2, [r2, #12]
 8004006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800400a:	60da      	str	r2, [r3, #12]
    }
    break;
 800400c:	e051      	b.n	80040b2 <HAL_TIM_OC_Start_DMA+0x15e>

    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004012:	4a38      	ldr	r2, [pc, #224]	; (80040f4 <HAL_TIM_OC_Start_DMA+0x1a0>)
 8004014:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401a:	4a37      	ldr	r2, [pc, #220]	; (80040f8 <HAL_TIM_OC_Start_DMA+0x1a4>)
 800401c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3338      	adds	r3, #56	; 0x38
 800402a:	461a      	mov	r2, r3
 800402c:	887b      	ldrh	r3, [r7, #2]
 800402e:	f7fc fd4b 	bl	8000ac8 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	6812      	ldr	r2, [r2, #0]
 800403a:	68d2      	ldr	r2, [r2, #12]
 800403c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004040:	60da      	str	r2, [r3, #12]
    }
    break;
 8004042:	e036      	b.n	80040b2 <HAL_TIM_OC_Start_DMA+0x15e>

    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	4a2a      	ldr	r2, [pc, #168]	; (80040f4 <HAL_TIM_OC_Start_DMA+0x1a0>)
 800404a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	4a29      	ldr	r2, [pc, #164]	; (80040f8 <HAL_TIM_OC_Start_DMA+0x1a4>)
 8004052:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	333c      	adds	r3, #60	; 0x3c
 8004060:	461a      	mov	r2, r3
 8004062:	887b      	ldrh	r3, [r7, #2]
 8004064:	f7fc fd30 	bl	8000ac8 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	6812      	ldr	r2, [r2, #0]
 8004070:	68d2      	ldr	r2, [r2, #12]
 8004072:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004076:	60da      	str	r2, [r3, #12]
    }
    break;
 8004078:	e01b      	b.n	80040b2 <HAL_TIM_OC_Start_DMA+0x15e>

    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	4a1d      	ldr	r2, [pc, #116]	; (80040f4 <HAL_TIM_OC_Start_DMA+0x1a0>)
 8004080:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	4a1c      	ldr	r2, [pc, #112]	; (80040f8 <HAL_TIM_OC_Start_DMA+0x1a4>)
 8004088:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3340      	adds	r3, #64	; 0x40
 8004096:	461a      	mov	r2, r3
 8004098:	887b      	ldrh	r3, [r7, #2]
 800409a:	f7fc fd15 	bl	8000ac8 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	6812      	ldr	r2, [r2, #0]
 80040a6:	68d2      	ldr	r2, [r2, #12]
 80040a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040ac:	60da      	str	r2, [r3, #12]
    }
    break;
 80040ae:	e000      	b.n	80040b2 <HAL_TIM_OC_Start_DMA+0x15e>

    default:
    break;
 80040b0:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2201      	movs	r2, #1
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f003 f9c0 	bl	8007440 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a0d      	ldr	r2, [pc, #52]	; (80040fc <HAL_TIM_OC_Start_DMA+0x1a8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d107      	bne.n	80040da <HAL_TIM_OC_Start_DMA+0x186>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	6812      	ldr	r2, [r2, #0]
 80040d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80040d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	6812      	ldr	r2, [r2, #0]
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	f042 0201 	orr.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	08006a6f 	.word	0x08006a6f
 80040f8:	08006a4b 	.word	0x08006a4b
 80040fc:	40012c00 	.word	0x40012c00

08004100 <HAL_TIM_OC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b0c      	cmp	r3, #12
 800410e:	d841      	bhi.n	8004194 <HAL_TIM_OC_Stop_DMA+0x94>
 8004110:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <HAL_TIM_OC_Stop_DMA+0x18>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	0800414d 	.word	0x0800414d
 800411c:	08004195 	.word	0x08004195
 8004120:	08004195 	.word	0x08004195
 8004124:	08004195 	.word	0x08004195
 8004128:	0800415f 	.word	0x0800415f
 800412c:	08004195 	.word	0x08004195
 8004130:	08004195 	.word	0x08004195
 8004134:	08004195 	.word	0x08004195
 8004138:	08004171 	.word	0x08004171
 800413c:	08004195 	.word	0x08004195
 8004140:	08004195 	.word	0x08004195
 8004144:	08004195 	.word	0x08004195
 8004148:	08004183 	.word	0x08004183
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6812      	ldr	r2, [r2, #0]
 8004154:	68d2      	ldr	r2, [r2, #12]
 8004156:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800415a:	60da      	str	r2, [r3, #12]
    }
    break;
 800415c:	e01b      	b.n	8004196 <HAL_TIM_OC_Stop_DMA+0x96>

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6812      	ldr	r2, [r2, #0]
 8004166:	68d2      	ldr	r2, [r2, #12]
 8004168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800416c:	60da      	str	r2, [r3, #12]
    }
    break;
 800416e:	e012      	b.n	8004196 <HAL_TIM_OC_Stop_DMA+0x96>

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6812      	ldr	r2, [r2, #0]
 8004178:	68d2      	ldr	r2, [r2, #12]
 800417a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800417e:	60da      	str	r2, [r3, #12]
    }
    break;
 8004180:	e009      	b.n	8004196 <HAL_TIM_OC_Stop_DMA+0x96>

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6812      	ldr	r2, [r2, #0]
 800418a:	68d2      	ldr	r2, [r2, #12]
 800418c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004190:	60da      	str	r2, [r3, #12]
    }
    break;
 8004192:	e000      	b.n	8004196 <HAL_TIM_OC_Stop_DMA+0x96>

    default:
    break;
 8004194:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2200      	movs	r2, #0
 800419c:	6839      	ldr	r1, [r7, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f003 f94e 	bl	8007440 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a1d      	ldr	r2, [pc, #116]	; (8004220 <HAL_TIM_OC_Stop_DMA+0x120>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d117      	bne.n	80041de <HAL_TIM_OC_Stop_DMA+0xde>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6a1a      	ldr	r2, [r3, #32]
 80041b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10f      	bne.n	80041de <HAL_TIM_OC_Stop_DMA+0xde>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6a1a      	ldr	r2, [r3, #32]
 80041c4:	f240 4344 	movw	r3, #1092	; 0x444
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d107      	bne.n	80041de <HAL_TIM_OC_Stop_DMA+0xde>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6812      	ldr	r2, [r2, #0]
 80041d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80041d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6a1a      	ldr	r2, [r3, #32]
 80041e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10f      	bne.n	800420e <HAL_TIM_OC_Stop_DMA+0x10e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6a1a      	ldr	r2, [r3, #32]
 80041f4:	f240 4344 	movw	r3, #1092	; 0x444
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d107      	bne.n	800420e <HAL_TIM_OC_Stop_DMA+0x10e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	6812      	ldr	r2, [r2, #0]
 8004208:	f022 0201 	bic.w	r2, r2, #1
 800420c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40012c00 	.word	0x40012c00

08004224 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e01d      	b.n	8004272 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f845 	bl	80042da <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3304      	adds	r3, #4
 8004260:	4619      	mov	r1, r3
 8004262:	4610      	mov	r0, r2
 8004264:	f002 fc97 	bl	8006b96 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral 
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b082      	sub	sp, #8
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2202      	movs	r2, #2
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6a1a      	ldr	r2, [r3, #32]
 8004290:	f241 1311 	movw	r3, #4369	; 0x1111
 8004294:	4013      	ands	r3, r2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10f      	bne.n	80042ba <HAL_TIM_PWM_DeInit+0x40>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6a1a      	ldr	r2, [r3, #32]
 80042a0:	f240 4344 	movw	r3, #1092	; 0x444
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d107      	bne.n	80042ba <HAL_TIM_PWM_DeInit+0x40>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6812      	ldr	r2, [r2, #0]
 80042b2:	6812      	ldr	r2, [r2, #0]
 80042b4:	f022 0201 	bic.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f816 	bl	80042ec <HAL_TIM_PWM_MspDeInit>

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr

080042ec <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr

080042fe <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2201      	movs	r2, #1
 800430e:	6839      	ldr	r1, [r7, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f003 f895 	bl	8007440 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a0c      	ldr	r2, [pc, #48]	; (800434c <HAL_TIM_PWM_Start+0x4e>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d107      	bne.n	8004330 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800432a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800432e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6812      	ldr	r2, [r2, #0]
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40012c00 	.word	0x40012c00

08004350 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2200      	movs	r2, #0
 8004360:	6839      	ldr	r1, [r7, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f003 f86c 	bl	8007440 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <HAL_TIM_PWM_Stop+0x94>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d117      	bne.n	80043a2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6a1a      	ldr	r2, [r3, #32]
 8004378:	f241 1311 	movw	r3, #4369	; 0x1111
 800437c:	4013      	ands	r3, r2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10f      	bne.n	80043a2 <HAL_TIM_PWM_Stop+0x52>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6a1a      	ldr	r2, [r3, #32]
 8004388:	f240 4344 	movw	r3, #1092	; 0x444
 800438c:	4013      	ands	r3, r2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d107      	bne.n	80043a2 <HAL_TIM_PWM_Stop+0x52>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6812      	ldr	r2, [r2, #0]
 800439a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800439c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6a1a      	ldr	r2, [r3, #32]
 80043a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80043ac:	4013      	ands	r3, r2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10f      	bne.n	80043d2 <HAL_TIM_PWM_Stop+0x82>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6a1a      	ldr	r2, [r3, #32]
 80043b8:	f240 4344 	movw	r3, #1092	; 0x444
 80043bc:	4013      	ands	r3, r2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d107      	bne.n	80043d2 <HAL_TIM_PWM_Stop+0x82>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6812      	ldr	r2, [r2, #0]
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	f022 0201 	bic.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40012c00 	.word	0x40012c00

080043e8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b0c      	cmp	r3, #12
 80043f6:	d841      	bhi.n	800447c <HAL_TIM_PWM_Start_IT+0x94>
 80043f8:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <HAL_TIM_PWM_Start_IT+0x18>)
 80043fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fe:	bf00      	nop
 8004400:	08004435 	.word	0x08004435
 8004404:	0800447d 	.word	0x0800447d
 8004408:	0800447d 	.word	0x0800447d
 800440c:	0800447d 	.word	0x0800447d
 8004410:	08004447 	.word	0x08004447
 8004414:	0800447d 	.word	0x0800447d
 8004418:	0800447d 	.word	0x0800447d
 800441c:	0800447d 	.word	0x0800447d
 8004420:	08004459 	.word	0x08004459
 8004424:	0800447d 	.word	0x0800447d
 8004428:	0800447d 	.word	0x0800447d
 800442c:	0800447d 	.word	0x0800447d
 8004430:	0800446b 	.word	0x0800446b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6812      	ldr	r2, [r2, #0]
 800443c:	68d2      	ldr	r2, [r2, #12]
 800443e:	f042 0202 	orr.w	r2, r2, #2
 8004442:	60da      	str	r2, [r3, #12]
    }
    break;
 8004444:	e01b      	b.n	800447e <HAL_TIM_PWM_Start_IT+0x96>

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6812      	ldr	r2, [r2, #0]
 800444e:	68d2      	ldr	r2, [r2, #12]
 8004450:	f042 0204 	orr.w	r2, r2, #4
 8004454:	60da      	str	r2, [r3, #12]
    }
    break;
 8004456:	e012      	b.n	800447e <HAL_TIM_PWM_Start_IT+0x96>

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6812      	ldr	r2, [r2, #0]
 8004460:	68d2      	ldr	r2, [r2, #12]
 8004462:	f042 0208 	orr.w	r2, r2, #8
 8004466:	60da      	str	r2, [r3, #12]
    }
    break;
 8004468:	e009      	b.n	800447e <HAL_TIM_PWM_Start_IT+0x96>

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6812      	ldr	r2, [r2, #0]
 8004472:	68d2      	ldr	r2, [r2, #12]
 8004474:	f042 0210 	orr.w	r2, r2, #16
 8004478:	60da      	str	r2, [r3, #12]
    }
    break;
 800447a:	e000      	b.n	800447e <HAL_TIM_PWM_Start_IT+0x96>

    default:
    break;
 800447c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2201      	movs	r2, #1
 8004484:	6839      	ldr	r1, [r7, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f002 ffda 	bl	8007440 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a0b      	ldr	r2, [pc, #44]	; (80044c0 <HAL_TIM_PWM_Start_IT+0xd8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d107      	bne.n	80044a6 <HAL_TIM_PWM_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6812      	ldr	r2, [r2, #0]
 800449e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80044a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	6812      	ldr	r2, [r2, #0]
 80044b0:	f042 0201 	orr.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40012c00 	.word	0x40012c00

080044c4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b0c      	cmp	r3, #12
 80044d2:	d841      	bhi.n	8004558 <HAL_TIM_PWM_Stop_IT+0x94>
 80044d4:	a201      	add	r2, pc, #4	; (adr r2, 80044dc <HAL_TIM_PWM_Stop_IT+0x18>)
 80044d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044da:	bf00      	nop
 80044dc:	08004511 	.word	0x08004511
 80044e0:	08004559 	.word	0x08004559
 80044e4:	08004559 	.word	0x08004559
 80044e8:	08004559 	.word	0x08004559
 80044ec:	08004523 	.word	0x08004523
 80044f0:	08004559 	.word	0x08004559
 80044f4:	08004559 	.word	0x08004559
 80044f8:	08004559 	.word	0x08004559
 80044fc:	08004535 	.word	0x08004535
 8004500:	08004559 	.word	0x08004559
 8004504:	08004559 	.word	0x08004559
 8004508:	08004559 	.word	0x08004559
 800450c:	08004547 	.word	0x08004547
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6812      	ldr	r2, [r2, #0]
 8004518:	68d2      	ldr	r2, [r2, #12]
 800451a:	f022 0202 	bic.w	r2, r2, #2
 800451e:	60da      	str	r2, [r3, #12]
    }
    break;
 8004520:	e01b      	b.n	800455a <HAL_TIM_PWM_Stop_IT+0x96>

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6812      	ldr	r2, [r2, #0]
 800452a:	68d2      	ldr	r2, [r2, #12]
 800452c:	f022 0204 	bic.w	r2, r2, #4
 8004530:	60da      	str	r2, [r3, #12]
    }
    break;
 8004532:	e012      	b.n	800455a <HAL_TIM_PWM_Stop_IT+0x96>

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6812      	ldr	r2, [r2, #0]
 800453c:	68d2      	ldr	r2, [r2, #12]
 800453e:	f022 0208 	bic.w	r2, r2, #8
 8004542:	60da      	str	r2, [r3, #12]
    }
    break;
 8004544:	e009      	b.n	800455a <HAL_TIM_PWM_Stop_IT+0x96>

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6812      	ldr	r2, [r2, #0]
 800454e:	68d2      	ldr	r2, [r2, #12]
 8004550:	f022 0210 	bic.w	r2, r2, #16
 8004554:	60da      	str	r2, [r3, #12]
    }
    break;
 8004556:	e000      	b.n	800455a <HAL_TIM_PWM_Stop_IT+0x96>

    default:
    break;
 8004558:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2200      	movs	r2, #0
 8004560:	6839      	ldr	r1, [r7, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f002 ff6c 	bl	8007440 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a1b      	ldr	r2, [pc, #108]	; (80045dc <HAL_TIM_PWM_Stop_IT+0x118>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d117      	bne.n	80045a2 <HAL_TIM_PWM_Stop_IT+0xde>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6a1a      	ldr	r2, [r3, #32]
 8004578:	f241 1311 	movw	r3, #4369	; 0x1111
 800457c:	4013      	ands	r3, r2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10f      	bne.n	80045a2 <HAL_TIM_PWM_Stop_IT+0xde>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6a1a      	ldr	r2, [r3, #32]
 8004588:	f240 4344 	movw	r3, #1092	; 0x444
 800458c:	4013      	ands	r3, r2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d107      	bne.n	80045a2 <HAL_TIM_PWM_Stop_IT+0xde>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6812      	ldr	r2, [r2, #0]
 800459a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800459c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6a1a      	ldr	r2, [r3, #32]
 80045a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80045ac:	4013      	ands	r3, r2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10f      	bne.n	80045d2 <HAL_TIM_PWM_Stop_IT+0x10e>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6a1a      	ldr	r2, [r3, #32]
 80045b8:	f240 4344 	movw	r3, #1092	; 0x444
 80045bc:	4013      	ands	r3, r2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d107      	bne.n	80045d2 <HAL_TIM_PWM_Stop_IT+0x10e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6812      	ldr	r2, [r2, #0]
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	f022 0201 	bic.w	r2, r2, #1
 80045d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40012c00 	.word	0x40012c00

080045e0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData : The source Buffer address.
  * @param  Length : The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
 80045ec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if((htim->State == HAL_TIM_STATE_BUSY))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d101      	bne.n	80045fe <HAL_TIM_PWM_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 80045fa:	2302      	movs	r3, #2
 80045fc:	e0bc      	b.n	8004778 <HAL_TIM_PWM_Start_DMA+0x198>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b01      	cmp	r3, #1
 8004608:	d10b      	bne.n	8004622 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0U) && (Length > 0U))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d104      	bne.n	800461a <HAL_TIM_PWM_Start_DMA+0x3a>
 8004610:	887b      	ldrh	r3, [r7, #2]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e0ae      	b.n	8004778 <HAL_TIM_PWM_Start_DMA+0x198>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2202      	movs	r2, #2
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
  }
  switch (Channel)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b0c      	cmp	r3, #12
 8004626:	f200 8089 	bhi.w	800473c <HAL_TIM_PWM_Start_DMA+0x15c>
 800462a:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <HAL_TIM_PWM_Start_DMA+0x50>)
 800462c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004630:	08004665 	.word	0x08004665
 8004634:	0800473d 	.word	0x0800473d
 8004638:	0800473d 	.word	0x0800473d
 800463c:	0800473d 	.word	0x0800473d
 8004640:	0800469b 	.word	0x0800469b
 8004644:	0800473d 	.word	0x0800473d
 8004648:	0800473d 	.word	0x0800473d
 800464c:	0800473d 	.word	0x0800473d
 8004650:	080046d1 	.word	0x080046d1
 8004654:	0800473d 	.word	0x0800473d
 8004658:	0800473d 	.word	0x0800473d
 800465c:	0800473d 	.word	0x0800473d
 8004660:	08004707 	.word	0x08004707
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	4a45      	ldr	r2, [pc, #276]	; (8004780 <HAL_TIM_PWM_Start_DMA+0x1a0>)
 800466a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	4a44      	ldr	r2, [pc, #272]	; (8004784 <HAL_TIM_PWM_Start_DMA+0x1a4>)
 8004672:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3334      	adds	r3, #52	; 0x34
 8004680:	461a      	mov	r2, r3
 8004682:	887b      	ldrh	r3, [r7, #2]
 8004684:	f7fc fa20 	bl	8000ac8 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	6812      	ldr	r2, [r2, #0]
 8004690:	68d2      	ldr	r2, [r2, #12]
 8004692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004696:	60da      	str	r2, [r3, #12]
    }
    break;
 8004698:	e051      	b.n	800473e <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	4a38      	ldr	r2, [pc, #224]	; (8004780 <HAL_TIM_PWM_Start_DMA+0x1a0>)
 80046a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a6:	4a37      	ldr	r2, [pc, #220]	; (8004784 <HAL_TIM_PWM_Start_DMA+0x1a4>)
 80046a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3338      	adds	r3, #56	; 0x38
 80046b6:	461a      	mov	r2, r3
 80046b8:	887b      	ldrh	r3, [r7, #2]
 80046ba:	f7fc fa05 	bl	8000ac8 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	6812      	ldr	r2, [r2, #0]
 80046c6:	68d2      	ldr	r2, [r2, #12]
 80046c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046cc:	60da      	str	r2, [r3, #12]
    }
    break;
 80046ce:	e036      	b.n	800473e <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	4a2a      	ldr	r2, [pc, #168]	; (8004780 <HAL_TIM_PWM_Start_DMA+0x1a0>)
 80046d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	4a29      	ldr	r2, [pc, #164]	; (8004784 <HAL_TIM_PWM_Start_DMA+0x1a4>)
 80046de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	333c      	adds	r3, #60	; 0x3c
 80046ec:	461a      	mov	r2, r3
 80046ee:	887b      	ldrh	r3, [r7, #2]
 80046f0:	f7fc f9ea 	bl	8000ac8 <HAL_DMA_Start_IT>

      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	68d2      	ldr	r2, [r2, #12]
 80046fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004702:	60da      	str	r2, [r3, #12]
    }
    break;
 8004704:	e01b      	b.n	800473e <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	4a1d      	ldr	r2, [pc, #116]	; (8004780 <HAL_TIM_PWM_Start_DMA+0x1a0>)
 800470c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	4a1c      	ldr	r2, [pc, #112]	; (8004784 <HAL_TIM_PWM_Start_DMA+0x1a4>)
 8004714:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800471a:	6879      	ldr	r1, [r7, #4]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3340      	adds	r3, #64	; 0x40
 8004722:	461a      	mov	r2, r3
 8004724:	887b      	ldrh	r3, [r7, #2]
 8004726:	f7fc f9cf 	bl	8000ac8 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	6812      	ldr	r2, [r2, #0]
 8004732:	68d2      	ldr	r2, [r2, #12]
 8004734:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004738:	60da      	str	r2, [r3, #12]
    }
    break;
 800473a:	e000      	b.n	800473e <HAL_TIM_PWM_Start_DMA+0x15e>

    default:
    break;
 800473c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2201      	movs	r2, #1
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	4618      	mov	r0, r3
 8004748:	f002 fe7a 	bl	8007440 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a0d      	ldr	r2, [pc, #52]	; (8004788 <HAL_TIM_PWM_Start_DMA+0x1a8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d107      	bne.n	8004766 <HAL_TIM_PWM_Start_DMA+0x186>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	6812      	ldr	r2, [r2, #0]
 800475e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004760:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004764:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	6812      	ldr	r2, [r2, #0]
 800476e:	6812      	ldr	r2, [r2, #0]
 8004770:	f042 0201 	orr.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	08006a6f 	.word	0x08006a6f
 8004784:	08006a4b 	.word	0x08006a4b
 8004788:	40012c00 	.word	0x40012c00

0800478c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b0c      	cmp	r3, #12
 800479a:	d841      	bhi.n	8004820 <HAL_TIM_PWM_Stop_DMA+0x94>
 800479c:	a201      	add	r2, pc, #4	; (adr r2, 80047a4 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800479e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a2:	bf00      	nop
 80047a4:	080047d9 	.word	0x080047d9
 80047a8:	08004821 	.word	0x08004821
 80047ac:	08004821 	.word	0x08004821
 80047b0:	08004821 	.word	0x08004821
 80047b4:	080047eb 	.word	0x080047eb
 80047b8:	08004821 	.word	0x08004821
 80047bc:	08004821 	.word	0x08004821
 80047c0:	08004821 	.word	0x08004821
 80047c4:	080047fd 	.word	0x080047fd
 80047c8:	08004821 	.word	0x08004821
 80047cc:	08004821 	.word	0x08004821
 80047d0:	08004821 	.word	0x08004821
 80047d4:	0800480f 	.word	0x0800480f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	68d2      	ldr	r2, [r2, #12]
 80047e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80047e6:	60da      	str	r2, [r3, #12]
    }
    break;
 80047e8:	e01b      	b.n	8004822 <HAL_TIM_PWM_Stop_DMA+0x96>

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6812      	ldr	r2, [r2, #0]
 80047f2:	68d2      	ldr	r2, [r2, #12]
 80047f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f8:	60da      	str	r2, [r3, #12]
    }
    break;
 80047fa:	e012      	b.n	8004822 <HAL_TIM_PWM_Stop_DMA+0x96>

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6812      	ldr	r2, [r2, #0]
 8004804:	68d2      	ldr	r2, [r2, #12]
 8004806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800480a:	60da      	str	r2, [r3, #12]
    }
    break;
 800480c:	e009      	b.n	8004822 <HAL_TIM_PWM_Stop_DMA+0x96>

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	68d2      	ldr	r2, [r2, #12]
 8004818:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800481c:	60da      	str	r2, [r3, #12]
    }
    break;
 800481e:	e000      	b.n	8004822 <HAL_TIM_PWM_Stop_DMA+0x96>

    default:
    break;
 8004820:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2200      	movs	r2, #0
 8004828:	6839      	ldr	r1, [r7, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f002 fe08 	bl	8007440 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a1d      	ldr	r2, [pc, #116]	; (80048ac <HAL_TIM_PWM_Stop_DMA+0x120>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d117      	bne.n	800486a <HAL_TIM_PWM_Stop_DMA+0xde>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6a1a      	ldr	r2, [r3, #32]
 8004840:	f241 1311 	movw	r3, #4369	; 0x1111
 8004844:	4013      	ands	r3, r2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10f      	bne.n	800486a <HAL_TIM_PWM_Stop_DMA+0xde>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6a1a      	ldr	r2, [r3, #32]
 8004850:	f240 4344 	movw	r3, #1092	; 0x444
 8004854:	4013      	ands	r3, r2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d107      	bne.n	800486a <HAL_TIM_PWM_Stop_DMA+0xde>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004864:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004868:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6a1a      	ldr	r2, [r3, #32]
 8004870:	f241 1311 	movw	r3, #4369	; 0x1111
 8004874:	4013      	ands	r3, r2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10f      	bne.n	800489a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6a1a      	ldr	r2, [r3, #32]
 8004880:	f240 4344 	movw	r3, #1092	; 0x444
 8004884:	4013      	ands	r3, r2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d107      	bne.n	800489a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6812      	ldr	r2, [r2, #0]
 8004892:	6812      	ldr	r2, [r2, #0]
 8004894:	f022 0201 	bic.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40012c00 	.word	0x40012c00

080048b0 <HAL_TIM_IC_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e01d      	b.n	80048fe <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d106      	bne.n	80048dc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f845 	bl	8004966 <HAL_TIM_IC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3304      	adds	r3, #4
 80048ec:	4619      	mov	r1, r3
 80048ee:	4610      	mov	r0, r2
 80048f0:	f002 f951 	bl	8006b96 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_TIM_IC_DeInit>:
  * @brief  DeInitializes the TIM peripheral 
  * @param  htim : TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b082      	sub	sp, #8
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2202      	movs	r2, #2
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6a1a      	ldr	r2, [r3, #32]
 800491c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004920:	4013      	ands	r3, r2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10f      	bne.n	8004946 <HAL_TIM_IC_DeInit+0x40>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6a1a      	ldr	r2, [r3, #32]
 800492c:	f240 4344 	movw	r3, #1092	; 0x444
 8004930:	4013      	ands	r3, r2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d107      	bne.n	8004946 <HAL_TIM_IC_DeInit+0x40>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6812      	ldr	r2, [r2, #0]
 800493e:	6812      	ldr	r2, [r2, #0]
 8004940:	f022 0201 	bic.w	r2, r2, #1
 8004944:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_IC_MspDeInit(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f816 	bl	8004978 <HAL_TIM_IC_MspDeInit>

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr

08004978 <HAL_TIM_IC_MspDeInit>:
  * @brief  DeInitializes TIM Input Capture MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspDeInit could be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	bc80      	pop	{r7}
 8004988:	4770      	bx	lr

0800498a <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_IC_Start (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b082      	sub	sp, #8
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2201      	movs	r2, #1
 800499a:	6839      	ldr	r1, [r7, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f002 fd4f 	bl	8007440 <TIM_CCxChannelCmd>

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6812      	ldr	r2, [r2, #0]
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	f042 0201 	orr.w	r2, r2, #1
 80049b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2200      	movs	r2, #0
 80049cc:	6839      	ldr	r1, [r7, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f002 fd36 	bl	8007440 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6a1a      	ldr	r2, [r3, #32]
 80049da:	f241 1311 	movw	r3, #4369	; 0x1111
 80049de:	4013      	ands	r3, r2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10f      	bne.n	8004a04 <HAL_TIM_IC_Stop+0x48>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6a1a      	ldr	r2, [r3, #32]
 80049ea:	f240 4344 	movw	r3, #1092	; 0x444
 80049ee:	4013      	ands	r3, r2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d107      	bne.n	8004a04 <HAL_TIM_IC_Stop+0x48>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6812      	ldr	r2, [r2, #0]
 80049fc:	6812      	ldr	r2, [r2, #0]
 80049fe:	f022 0201 	bic.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_IC_Start_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b0c      	cmp	r3, #12
 8004a1c:	d840      	bhi.n	8004aa0 <HAL_TIM_IC_Start_IT+0x92>
 8004a1e:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <HAL_TIM_IC_Start_IT+0x16>)
 8004a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a24:	08004a59 	.word	0x08004a59
 8004a28:	08004aa1 	.word	0x08004aa1
 8004a2c:	08004aa1 	.word	0x08004aa1
 8004a30:	08004aa1 	.word	0x08004aa1
 8004a34:	08004a6b 	.word	0x08004a6b
 8004a38:	08004aa1 	.word	0x08004aa1
 8004a3c:	08004aa1 	.word	0x08004aa1
 8004a40:	08004aa1 	.word	0x08004aa1
 8004a44:	08004a7d 	.word	0x08004a7d
 8004a48:	08004aa1 	.word	0x08004aa1
 8004a4c:	08004aa1 	.word	0x08004aa1
 8004a50:	08004aa1 	.word	0x08004aa1
 8004a54:	08004a8f 	.word	0x08004a8f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6812      	ldr	r2, [r2, #0]
 8004a60:	68d2      	ldr	r2, [r2, #12]
 8004a62:	f042 0202 	orr.w	r2, r2, #2
 8004a66:	60da      	str	r2, [r3, #12]
    }
    break;
 8004a68:	e01b      	b.n	8004aa2 <HAL_TIM_IC_Start_IT+0x94>

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6812      	ldr	r2, [r2, #0]
 8004a72:	68d2      	ldr	r2, [r2, #12]
 8004a74:	f042 0204 	orr.w	r2, r2, #4
 8004a78:	60da      	str	r2, [r3, #12]
    }
    break;
 8004a7a:	e012      	b.n	8004aa2 <HAL_TIM_IC_Start_IT+0x94>

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6812      	ldr	r2, [r2, #0]
 8004a84:	68d2      	ldr	r2, [r2, #12]
 8004a86:	f042 0208 	orr.w	r2, r2, #8
 8004a8a:	60da      	str	r2, [r3, #12]
    }
    break;
 8004a8c:	e009      	b.n	8004aa2 <HAL_TIM_IC_Start_IT+0x94>

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6812      	ldr	r2, [r2, #0]
 8004a96:	68d2      	ldr	r2, [r2, #12]
 8004a98:	f042 0210 	orr.w	r2, r2, #16
 8004a9c:	60da      	str	r2, [r3, #12]
    }
    break;
 8004a9e:	e000      	b.n	8004aa2 <HAL_TIM_IC_Start_IT+0x94>

    default:
    break;
 8004aa0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	6839      	ldr	r1, [r7, #0]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f002 fcc8 	bl	8007440 <TIM_CCxChannelCmd>

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6812      	ldr	r2, [r2, #0]
 8004ab8:	6812      	ldr	r2, [r2, #0]
 8004aba:	f042 0201 	orr.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b082      	sub	sp, #8
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2b0c      	cmp	r3, #12
 8004ad8:	d840      	bhi.n	8004b5c <HAL_TIM_IC_Stop_IT+0x92>
 8004ada:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <HAL_TIM_IC_Stop_IT+0x16>)
 8004adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae0:	08004b15 	.word	0x08004b15
 8004ae4:	08004b5d 	.word	0x08004b5d
 8004ae8:	08004b5d 	.word	0x08004b5d
 8004aec:	08004b5d 	.word	0x08004b5d
 8004af0:	08004b27 	.word	0x08004b27
 8004af4:	08004b5d 	.word	0x08004b5d
 8004af8:	08004b5d 	.word	0x08004b5d
 8004afc:	08004b5d 	.word	0x08004b5d
 8004b00:	08004b39 	.word	0x08004b39
 8004b04:	08004b5d 	.word	0x08004b5d
 8004b08:	08004b5d 	.word	0x08004b5d
 8004b0c:	08004b5d 	.word	0x08004b5d
 8004b10:	08004b4b 	.word	0x08004b4b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6812      	ldr	r2, [r2, #0]
 8004b1c:	68d2      	ldr	r2, [r2, #12]
 8004b1e:	f022 0202 	bic.w	r2, r2, #2
 8004b22:	60da      	str	r2, [r3, #12]
    }
    break;
 8004b24:	e01b      	b.n	8004b5e <HAL_TIM_IC_Stop_IT+0x94>

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6812      	ldr	r2, [r2, #0]
 8004b2e:	68d2      	ldr	r2, [r2, #12]
 8004b30:	f022 0204 	bic.w	r2, r2, #4
 8004b34:	60da      	str	r2, [r3, #12]
    }
    break;
 8004b36:	e012      	b.n	8004b5e <HAL_TIM_IC_Stop_IT+0x94>

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6812      	ldr	r2, [r2, #0]
 8004b40:	68d2      	ldr	r2, [r2, #12]
 8004b42:	f022 0208 	bic.w	r2, r2, #8
 8004b46:	60da      	str	r2, [r3, #12]
    }
    break;
 8004b48:	e009      	b.n	8004b5e <HAL_TIM_IC_Stop_IT+0x94>

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	68d2      	ldr	r2, [r2, #12]
 8004b54:	f022 0210 	bic.w	r2, r2, #16
 8004b58:	60da      	str	r2, [r3, #12]
    }
    break;
 8004b5a:	e000      	b.n	8004b5e <HAL_TIM_IC_Stop_IT+0x94>

    default:
    break;
 8004b5c:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2200      	movs	r2, #0
 8004b64:	6839      	ldr	r1, [r7, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f002 fc6a 	bl	8007440 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6a1a      	ldr	r2, [r3, #32]
 8004b72:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b76:	4013      	ands	r3, r2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10f      	bne.n	8004b9c <HAL_TIM_IC_Stop_IT+0xd2>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6a1a      	ldr	r2, [r3, #32]
 8004b82:	f240 4344 	movw	r3, #1092	; 0x444
 8004b86:	4013      	ands	r3, r2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d107      	bne.n	8004b9c <HAL_TIM_IC_Stop_IT+0xd2>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6812      	ldr	r2, [r2, #0]
 8004b94:	6812      	ldr	r2, [r2, #0]
 8004b96:	f022 0201 	bic.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_TIM_IC_Start_DMA>:
  * @param  pData : The destination Buffer address.
  * @param  Length : The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	607a      	str	r2, [r7, #4]
 8004bb2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if((htim->State == HAL_TIM_STATE_BUSY))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d101      	bne.n	8004bc4 <HAL_TIM_IC_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e0b0      	b.n	8004d26 <HAL_TIM_IC_Start_DMA+0x180>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d10b      	bne.n	8004be8 <HAL_TIM_IC_Start_DMA+0x42>
  {
    if((pData == 0U) && (Length > 0U))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d104      	bne.n	8004be0 <HAL_TIM_IC_Start_DMA+0x3a>
 8004bd6:	887b      	ldrh	r3, [r7, #2]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0a2      	b.n	8004d26 <HAL_TIM_IC_Start_DMA+0x180>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
  }

  switch (Channel)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b0c      	cmp	r3, #12
 8004bec:	f200 808a 	bhi.w	8004d04 <HAL_TIM_IC_Start_DMA+0x15e>
 8004bf0:	a201      	add	r2, pc, #4	; (adr r2, 8004bf8 <HAL_TIM_IC_Start_DMA+0x52>)
 8004bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf6:	bf00      	nop
 8004bf8:	08004c2d 	.word	0x08004c2d
 8004bfc:	08004d05 	.word	0x08004d05
 8004c00:	08004d05 	.word	0x08004d05
 8004c04:	08004d05 	.word	0x08004d05
 8004c08:	08004c63 	.word	0x08004c63
 8004c0c:	08004d05 	.word	0x08004d05
 8004c10:	08004d05 	.word	0x08004d05
 8004c14:	08004d05 	.word	0x08004d05
 8004c18:	08004c99 	.word	0x08004c99
 8004c1c:	08004d05 	.word	0x08004d05
 8004c20:	08004d05 	.word	0x08004d05
 8004c24:	08004d05 	.word	0x08004d05
 8004c28:	08004ccf 	.word	0x08004ccf
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	4a3f      	ldr	r2, [pc, #252]	; (8004d30 <HAL_TIM_IC_Start_DMA+0x18a>)
 8004c32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	4a3e      	ldr	r2, [pc, #248]	; (8004d34 <HAL_TIM_IC_Start_DMA+0x18e>)
 8004c3a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3334      	adds	r3, #52	; 0x34
 8004c46:	4619      	mov	r1, r3
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	887b      	ldrh	r3, [r7, #2]
 8004c4c:	f7fb ff3c 	bl	8000ac8 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	68d2      	ldr	r2, [r2, #12]
 8004c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5e:	60da      	str	r2, [r3, #12]
    }
    break;
 8004c60:	e051      	b.n	8004d06 <HAL_TIM_IC_Start_DMA+0x160>

    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c66:	4a32      	ldr	r2, [pc, #200]	; (8004d30 <HAL_TIM_IC_Start_DMA+0x18a>)
 8004c68:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6e:	4a31      	ldr	r2, [pc, #196]	; (8004d34 <HAL_TIM_IC_Start_DMA+0x18e>)
 8004c70:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	3338      	adds	r3, #56	; 0x38
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	887b      	ldrh	r3, [r7, #2]
 8004c82:	f7fb ff21 	bl	8000ac8 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	6812      	ldr	r2, [r2, #0]
 8004c8e:	68d2      	ldr	r2, [r2, #12]
 8004c90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c94:	60da      	str	r2, [r3, #12]
    }
    break;
 8004c96:	e036      	b.n	8004d06 <HAL_TIM_IC_Start_DMA+0x160>

    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	4a24      	ldr	r2, [pc, #144]	; (8004d30 <HAL_TIM_IC_Start_DMA+0x18a>)
 8004c9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca4:	4a23      	ldr	r2, [pc, #140]	; (8004d34 <HAL_TIM_IC_Start_DMA+0x18e>)
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	333c      	adds	r3, #60	; 0x3c
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	887b      	ldrh	r3, [r7, #2]
 8004cb8:	f7fb ff06 	bl	8000ac8 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	6812      	ldr	r2, [r2, #0]
 8004cc4:	68d2      	ldr	r2, [r2, #12]
 8004cc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cca:	60da      	str	r2, [r3, #12]
    }
    break;
 8004ccc:	e01b      	b.n	8004d06 <HAL_TIM_IC_Start_DMA+0x160>

    case TIM_CHANNEL_4:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	4a17      	ldr	r2, [pc, #92]	; (8004d30 <HAL_TIM_IC_Start_DMA+0x18a>)
 8004cd4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cda:	4a16      	ldr	r2, [pc, #88]	; (8004d34 <HAL_TIM_IC_Start_DMA+0x18e>)
 8004cdc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3340      	adds	r3, #64	; 0x40
 8004ce8:	4619      	mov	r1, r3
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	887b      	ldrh	r3, [r7, #2]
 8004cee:	f7fb feeb 	bl	8000ac8 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	68d2      	ldr	r2, [r2, #12]
 8004cfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d00:	60da      	str	r2, [r3, #12]
    }
    break;
 8004d02:	e000      	b.n	8004d06 <HAL_TIM_IC_Start_DMA+0x160>

    default:
    break;
 8004d04:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	68b9      	ldr	r1, [r7, #8]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f002 fb96 	bl	8007440 <TIM_CCxChannelCmd>

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	6812      	ldr	r2, [r2, #0]
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	08006adf 	.word	0x08006adf
 8004d34:	08006a4b 	.word	0x08006a4b

08004d38 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b0c      	cmp	r3, #12
 8004d46:	d841      	bhi.n	8004dcc <HAL_TIM_IC_Stop_DMA+0x94>
 8004d48:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <HAL_TIM_IC_Stop_DMA+0x18>)
 8004d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4e:	bf00      	nop
 8004d50:	08004d85 	.word	0x08004d85
 8004d54:	08004dcd 	.word	0x08004dcd
 8004d58:	08004dcd 	.word	0x08004dcd
 8004d5c:	08004dcd 	.word	0x08004dcd
 8004d60:	08004d97 	.word	0x08004d97
 8004d64:	08004dcd 	.word	0x08004dcd
 8004d68:	08004dcd 	.word	0x08004dcd
 8004d6c:	08004dcd 	.word	0x08004dcd
 8004d70:	08004da9 	.word	0x08004da9
 8004d74:	08004dcd 	.word	0x08004dcd
 8004d78:	08004dcd 	.word	0x08004dcd
 8004d7c:	08004dcd 	.word	0x08004dcd
 8004d80:	08004dbb 	.word	0x08004dbb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	68d2      	ldr	r2, [r2, #12]
 8004d8e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d92:	60da      	str	r2, [r3, #12]
    }
    break;
 8004d94:	e01b      	b.n	8004dce <HAL_TIM_IC_Stop_DMA+0x96>

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6812      	ldr	r2, [r2, #0]
 8004d9e:	68d2      	ldr	r2, [r2, #12]
 8004da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da4:	60da      	str	r2, [r3, #12]
    }
    break;
 8004da6:	e012      	b.n	8004dce <HAL_TIM_IC_Stop_DMA+0x96>

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6812      	ldr	r2, [r2, #0]
 8004db0:	68d2      	ldr	r2, [r2, #12]
 8004db2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004db6:	60da      	str	r2, [r3, #12]
    }
    break;
 8004db8:	e009      	b.n	8004dce <HAL_TIM_IC_Stop_DMA+0x96>

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6812      	ldr	r2, [r2, #0]
 8004dc2:	68d2      	ldr	r2, [r2, #12]
 8004dc4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dc8:	60da      	str	r2, [r3, #12]
    }
    break;
 8004dca:	e000      	b.n	8004dce <HAL_TIM_IC_Stop_DMA+0x96>

    default:
    break;
 8004dcc:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	6839      	ldr	r1, [r7, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f002 fb32 	bl	8007440 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6a1a      	ldr	r2, [r3, #32]
 8004de2:	f241 1311 	movw	r3, #4369	; 0x1111
 8004de6:	4013      	ands	r3, r2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10f      	bne.n	8004e0c <HAL_TIM_IC_Stop_DMA+0xd4>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6a1a      	ldr	r2, [r3, #32]
 8004df2:	f240 4344 	movw	r3, #1092	; 0x444
 8004df6:	4013      	ands	r3, r2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d107      	bne.n	8004e0c <HAL_TIM_IC_Stop_DMA+0xd4>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	6812      	ldr	r2, [r2, #0]
 8004e06:	f022 0201 	bic.w	r2, r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses wil be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b082      	sub	sp, #8
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e02d      	b.n	8004e8e <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));

  if(htim->State == HAL_TIM_STATE_RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f855 	bl	8004ef6 <HAL_TIM_OnePulse_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	f001 fe99 	bl	8006b96 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6812      	ldr	r2, [r2, #0]
 8004e6c:	6812      	ldr	r2, [r2, #0]
 8004e6e:	f022 0208 	bic.w	r2, r2, #8
 8004e72:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	6811      	ldr	r1, [r2, #0]
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_TIM_OnePulse_DeInit>:
  * @brief  DeInitializes the TIM One Pulse 
  * @param  htim : TIM One Pulse handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b082      	sub	sp, #8
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6a1a      	ldr	r2, [r3, #32]
 8004eac:	f241 1311 	movw	r3, #4369	; 0x1111
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10f      	bne.n	8004ed6 <HAL_TIM_OnePulse_DeInit+0x40>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6a1a      	ldr	r2, [r3, #32]
 8004ebc:	f240 4344 	movw	r3, #1092	; 0x444
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d107      	bne.n	8004ed6 <HAL_TIM_OnePulse_DeInit+0x40>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6812      	ldr	r2, [r2, #0]
 8004ece:	6812      	ldr	r2, [r2, #0]
 8004ed0:	f022 0201 	bic.w	r2, r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_OnePulse_MspDeInit(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f816 	bl	8004f08 <HAL_TIM_OnePulse_MspDeInit>

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr

08004f08 <HAL_TIM_OnePulse_MspDeInit>:
  * @brief  DeInitializes TIM One Pulse MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspDeInit could be implemented in the user file
   */
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bc80      	pop	{r7}
 8004f18:	4770      	bx	lr

08004f1a <HAL_TIM_OnePulse_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b082      	sub	sp, #8
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	6039      	str	r1, [r7, #0]
    in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together 

    No need to enable the counter, it's enabled automatically by hardware 
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f002 fa87 	bl	8007440 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2201      	movs	r2, #1
 8004f38:	2104      	movs	r1, #4
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f002 fa80 	bl	8007440 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a07      	ldr	r2, [pc, #28]	; (8004f64 <HAL_TIM_OnePulse_Start+0x4a>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d107      	bne.n	8004f5a <HAL_TIM_OnePulse_Start+0x40>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	6812      	ldr	r2, [r2, #0]
 8004f52:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004f54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40012c00 	.word	0x40012c00

08004f68 <HAL_TIM_OnePulse_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output 
  in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2200      	movs	r2, #0
 8004f78:	2100      	movs	r1, #0
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f002 fa60 	bl	8007440 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2200      	movs	r2, #0
 8004f86:	2104      	movs	r1, #4
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f002 fa59 	bl	8007440 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a1c      	ldr	r2, [pc, #112]	; (8005004 <HAL_TIM_OnePulse_Stop+0x9c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d117      	bne.n	8004fc8 <HAL_TIM_OnePulse_Stop+0x60>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6a1a      	ldr	r2, [r3, #32]
 8004f9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10f      	bne.n	8004fc8 <HAL_TIM_OnePulse_Stop+0x60>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6a1a      	ldr	r2, [r3, #32]
 8004fae:	f240 4344 	movw	r3, #1092	; 0x444
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d107      	bne.n	8004fc8 <HAL_TIM_OnePulse_Stop+0x60>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6812      	ldr	r2, [r2, #0]
 8004fc0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004fc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fc6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6a1a      	ldr	r2, [r3, #32]
 8004fce:	f241 1311 	movw	r3, #4369	; 0x1111
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10f      	bne.n	8004ff8 <HAL_TIM_OnePulse_Stop+0x90>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6a1a      	ldr	r2, [r3, #32]
 8004fde:	f240 4344 	movw	r3, #1092	; 0x444
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d107      	bne.n	8004ff8 <HAL_TIM_OnePulse_Stop+0x90>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6812      	ldr	r2, [r2, #0]
 8004ff0:	6812      	ldr	r2, [r2, #0]
 8004ff2:	f022 0201 	bic.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40012c00 	.word	0x40012c00

08005008 <HAL_TIM_OnePulse_Start_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]

    No need to enable the counter, it's enabled automatically by hardware 
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	6812      	ldr	r2, [r2, #0]
 800501a:	68d2      	ldr	r2, [r2, #12]
 800501c:	f042 0202 	orr.w	r2, r2, #2
 8005020:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6812      	ldr	r2, [r2, #0]
 800502a:	68d2      	ldr	r2, [r2, #12]
 800502c:	f042 0204 	orr.w	r2, r2, #4
 8005030:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2201      	movs	r2, #1
 8005038:	2100      	movs	r1, #0
 800503a:	4618      	mov	r0, r3
 800503c:	f002 fa00 	bl	8007440 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2201      	movs	r2, #1
 8005046:	2104      	movs	r1, #4
 8005048:	4618      	mov	r0, r3
 800504a:	f002 f9f9 	bl	8007440 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a08      	ldr	r2, [pc, #32]	; (8005074 <HAL_TIM_OnePulse_Start_IT+0x6c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d107      	bne.n	8005068 <HAL_TIM_OnePulse_Start_IT+0x60>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6812      	ldr	r2, [r2, #0]
 8005060:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005062:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005066:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40012c00 	.word	0x40012c00

08005078 <HAL_TIM_OnePulse_Stop_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	6812      	ldr	r2, [r2, #0]
 800508a:	68d2      	ldr	r2, [r2, #12]
 800508c:	f022 0202 	bic.w	r2, r2, #2
 8005090:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6812      	ldr	r2, [r2, #0]
 800509a:	68d2      	ldr	r2, [r2, #12]
 800509c:	f022 0204 	bic.w	r2, r2, #4
 80050a0:	60da      	str	r2, [r3, #12]
  /* Disable the Capture compare and the Input Capture channels 
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output 
  in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2200      	movs	r2, #0
 80050a8:	2100      	movs	r1, #0
 80050aa:	4618      	mov	r0, r3
 80050ac:	f002 f9c8 	bl	8007440 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2200      	movs	r2, #0
 80050b6:	2104      	movs	r1, #4
 80050b8:	4618      	mov	r0, r3
 80050ba:	f002 f9c1 	bl	8007440 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1c      	ldr	r2, [pc, #112]	; (8005134 <HAL_TIM_OnePulse_Stop_IT+0xbc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d117      	bne.n	80050f8 <HAL_TIM_OnePulse_Stop_IT+0x80>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6a1a      	ldr	r2, [r3, #32]
 80050ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80050d2:	4013      	ands	r3, r2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10f      	bne.n	80050f8 <HAL_TIM_OnePulse_Stop_IT+0x80>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6a1a      	ldr	r2, [r3, #32]
 80050de:	f240 4344 	movw	r3, #1092	; 0x444
 80050e2:	4013      	ands	r3, r2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d107      	bne.n	80050f8 <HAL_TIM_OnePulse_Stop_IT+0x80>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6812      	ldr	r2, [r2, #0]
 80050f0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80050f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
   __HAL_TIM_DISABLE(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6a1a      	ldr	r2, [r3, #32]
 80050fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8005102:	4013      	ands	r3, r2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10f      	bne.n	8005128 <HAL_TIM_OnePulse_Stop_IT+0xb0>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6a1a      	ldr	r2, [r3, #32]
 800510e:	f240 4344 	movw	r3, #1092	; 0x444
 8005112:	4013      	ands	r3, r2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d107      	bne.n	8005128 <HAL_TIM_OnePulse_Stop_IT+0xb0>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6812      	ldr	r2, [r2, #0]
 8005120:	6812      	ldr	r2, [r2, #0]
 8005122:	f022 0201 	bic.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	40012c00 	.word	0x40012c00

08005138 <HAL_TIM_Encoder_Init>:
  * @param  htim : TIM Encoder Interface handle
  * @param  sConfig : TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	60fb      	str	r3, [r7, #12]

  /* Check the TIM handle allocation */
  if(htim == NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e081      	b.n	800525c <HAL_TIM_Encoder_Init+0x124>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d106      	bne.n	8005172 <HAL_TIM_Encoder_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f8a9 	bl	80052c4 <HAL_TIM_Encoder_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2202      	movs	r2, #2
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6812      	ldr	r2, [r2, #0]
 8005182:	6892      	ldr	r2, [r2, #8]
 8005184:	f022 0207 	bic.w	r2, r2, #7
 8005188:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3304      	adds	r3, #4
 8005192:	4619      	mov	r1, r3
 8005194:	4610      	mov	r0, r2
 8005196:	f001 fcfe 	bl	8006b96 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c2:	f023 0303 	bic.w	r3, r3, #3
 80051c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	021b      	lsls	r3, r3, #8
 80051d2:	4313      	orrs	r3, r2
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]

  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80051e0:	f023 030c 	bic.w	r3, r3, #12
 80051e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	021b      	lsls	r3, r3, #8
 80051fc:	4313      	orrs	r3, r2
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4313      	orrs	r3, r2
 8005202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	011a      	lsls	r2, r3, #4
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	031b      	lsls	r3, r3, #12
 8005210:	4313      	orrs	r3, r2
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800521e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005226:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	4313      	orrs	r3, r2
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_TIM_Encoder_DeInit>:
  * @brief  DeInitializes the TIM Encoder interface 
  * @param  htim : TIM Encoder handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6a1a      	ldr	r2, [r3, #32]
 800527a:	f241 1311 	movw	r3, #4369	; 0x1111
 800527e:	4013      	ands	r3, r2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10f      	bne.n	80052a4 <HAL_TIM_Encoder_DeInit+0x40>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6a1a      	ldr	r2, [r3, #32]
 800528a:	f240 4344 	movw	r3, #1092	; 0x444
 800528e:	4013      	ands	r3, r2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d107      	bne.n	80052a4 <HAL_TIM_Encoder_DeInit+0x40>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6812      	ldr	r2, [r2, #0]
 800529c:	6812      	ldr	r2, [r2, #0]
 800529e:	f022 0201 	bic.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Encoder_MspDeInit(htim);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f816 	bl	80052d6 <HAL_TIM_Encoder_MspDeInit>

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bc80      	pop	{r7}
 80052d4:	4770      	bx	lr

080052d6 <HAL_TIM_Encoder_MspDeInit>:
  * @brief  DeInitializes TIM Encoder Interface MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspDeInit could be implemented in the user file
   */
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bc80      	pop	{r7}
 80052e6:	4770      	bx	lr

080052e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <HAL_TIM_Encoder_Start+0x16>
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	d008      	beq.n	800530e <HAL_TIM_Encoder_Start+0x26>
 80052fc:	e00f      	b.n	800531e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2201      	movs	r2, #1
 8005304:	2100      	movs	r1, #0
 8005306:	4618      	mov	r0, r3
 8005308:	f002 f89a 	bl	8007440 <TIM_CCxChannelCmd>
      break;
 800530c:	e016      	b.n	800533c <HAL_TIM_Encoder_Start+0x54>
  }
    case TIM_CHANNEL_2:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2201      	movs	r2, #1
 8005314:	2104      	movs	r1, #4
 8005316:	4618      	mov	r0, r3
 8005318:	f002 f892 	bl	8007440 <TIM_CCxChannelCmd>
      break;
 800531c:	e00e      	b.n	800533c <HAL_TIM_Encoder_Start+0x54>
  }
    default :
  {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2201      	movs	r2, #1
 8005324:	2100      	movs	r1, #0
 8005326:	4618      	mov	r0, r3
 8005328:	f002 f88a 	bl	8007440 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2201      	movs	r2, #1
 8005332:	2104      	movs	r1, #4
 8005334:	4618      	mov	r0, r3
 8005336:	f002 f883 	bl	8007440 <TIM_CCxChannelCmd>
     break;
 800533a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6812      	ldr	r2, [r2, #0]
 8005344:	6812      	ldr	r2, [r2, #0]
 8005346:	f042 0201 	orr.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

   /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d002      	beq.n	800536c <HAL_TIM_Encoder_Stop+0x16>
 8005366:	2b04      	cmp	r3, #4
 8005368:	d008      	beq.n	800537c <HAL_TIM_Encoder_Stop+0x26>
 800536a:	e00f      	b.n	800538c <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
  {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2200      	movs	r2, #0
 8005372:	2100      	movs	r1, #0
 8005374:	4618      	mov	r0, r3
 8005376:	f002 f863 	bl	8007440 <TIM_CCxChannelCmd>
      break;
 800537a:	e016      	b.n	80053aa <HAL_TIM_Encoder_Stop+0x54>
  }
    case TIM_CHANNEL_2:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2200      	movs	r2, #0
 8005382:	2104      	movs	r1, #4
 8005384:	4618      	mov	r0, r3
 8005386:	f002 f85b 	bl	8007440 <TIM_CCxChannelCmd>
      break;
 800538a:	e00e      	b.n	80053aa <HAL_TIM_Encoder_Stop+0x54>
  }
    default :
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2200      	movs	r2, #0
 8005392:	2100      	movs	r1, #0
 8005394:	4618      	mov	r0, r3
 8005396:	f002 f853 	bl	8007440 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2200      	movs	r2, #0
 80053a0:	2104      	movs	r1, #4
 80053a2:	4618      	mov	r0, r3
 80053a4:	f002 f84c 	bl	8007440 <TIM_CCxChannelCmd>
     break;
 80053a8:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6a1a      	ldr	r2, [r3, #32]
 80053b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80053b4:	4013      	ands	r3, r2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10f      	bne.n	80053da <HAL_TIM_Encoder_Stop+0x84>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6a1a      	ldr	r2, [r3, #32]
 80053c0:	f240 4344 	movw	r3, #1092	; 0x444
 80053c4:	4013      	ands	r3, r2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d107      	bne.n	80053da <HAL_TIM_Encoder_Stop+0x84>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6812      	ldr	r2, [r2, #0]
 80053d2:	6812      	ldr	r2, [r2, #0]
 80053d4:	f022 0201 	bic.w	r2, r2, #1
 80053d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <HAL_TIM_Encoder_Start_IT+0x16>
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d010      	beq.n	800541a <HAL_TIM_Encoder_Start_IT+0x36>
 80053f8:	e01f      	b.n	800543a <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2201      	movs	r2, #1
 8005400:	2100      	movs	r1, #0
 8005402:	4618      	mov	r0, r3
 8005404:	f002 f81c 	bl	8007440 <TIM_CCxChannelCmd>
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6812      	ldr	r2, [r2, #0]
 8005410:	68d2      	ldr	r2, [r2, #12]
 8005412:	f042 0202 	orr.w	r2, r2, #2
 8005416:	60da      	str	r2, [r3, #12]
      break;
 8005418:	e02e      	b.n	8005478 <HAL_TIM_Encoder_Start_IT+0x94>
  }
    case TIM_CHANNEL_2:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2201      	movs	r2, #1
 8005420:	2104      	movs	r1, #4
 8005422:	4618      	mov	r0, r3
 8005424:	f002 f80c 	bl	8007440 <TIM_CCxChannelCmd>
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6812      	ldr	r2, [r2, #0]
 8005430:	68d2      	ldr	r2, [r2, #12]
 8005432:	f042 0204 	orr.w	r2, r2, #4
 8005436:	60da      	str	r2, [r3, #12]
      break;
 8005438:	e01e      	b.n	8005478 <HAL_TIM_Encoder_Start_IT+0x94>
  }
    default :
  {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2201      	movs	r2, #1
 8005440:	2100      	movs	r1, #0
 8005442:	4618      	mov	r0, r3
 8005444:	f001 fffc 	bl	8007440 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2201      	movs	r2, #1
 800544e:	2104      	movs	r1, #4
 8005450:	4618      	mov	r0, r3
 8005452:	f001 fff5 	bl	8007440 <TIM_CCxChannelCmd>
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6812      	ldr	r2, [r2, #0]
 800545e:	68d2      	ldr	r2, [r2, #12]
 8005460:	f042 0202 	orr.w	r2, r2, #2
 8005464:	60da      	str	r2, [r3, #12]
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	6812      	ldr	r2, [r2, #0]
 800546e:	68d2      	ldr	r2, [r2, #12]
 8005470:	f042 0204 	orr.w	r2, r2, #4
 8005474:	60da      	str	r2, [r3, #12]
     break;
 8005476:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6812      	ldr	r2, [r2, #0]
 8005480:	6812      	ldr	r2, [r2, #0]
 8005482:	f042 0201 	orr.w	r2, r2, #1
 8005486:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b082      	sub	sp, #8
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
 800549a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if(Channel == TIM_CHANNEL_1)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10f      	bne.n	80054c2 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2200      	movs	r2, #0
 80054a8:	2100      	movs	r1, #0
 80054aa:	4618      	mov	r0, r3
 80054ac:	f001 ffc8 	bl	8007440 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6812      	ldr	r2, [r2, #0]
 80054b8:	68d2      	ldr	r2, [r2, #12]
 80054ba:	f022 0202 	bic.w	r2, r2, #2
 80054be:	60da      	str	r2, [r3, #12]
 80054c0:	e030      	b.n	8005524 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if(Channel == TIM_CHANNEL_2)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d10f      	bne.n	80054e8 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2200      	movs	r2, #0
 80054ce:	2104      	movs	r1, #4
 80054d0:	4618      	mov	r0, r3
 80054d2:	f001 ffb5 	bl	8007440 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6812      	ldr	r2, [r2, #0]
 80054de:	68d2      	ldr	r2, [r2, #12]
 80054e0:	f022 0204 	bic.w	r2, r2, #4
 80054e4:	60da      	str	r2, [r3, #12]
 80054e6:	e01d      	b.n	8005524 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2200      	movs	r2, #0
 80054ee:	2100      	movs	r1, #0
 80054f0:	4618      	mov	r0, r3
 80054f2:	f001 ffa5 	bl	8007440 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2200      	movs	r2, #0
 80054fc:	2104      	movs	r1, #4
 80054fe:	4618      	mov	r0, r3
 8005500:	f001 ff9e 	bl	8007440 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6812      	ldr	r2, [r2, #0]
 800550c:	68d2      	ldr	r2, [r2, #12]
 800550e:	f022 0202 	bic.w	r2, r2, #2
 8005512:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6812      	ldr	r2, [r2, #0]
 800551c:	68d2      	ldr	r2, [r2, #12]
 800551e:	f022 0204 	bic.w	r2, r2, #4
 8005522:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6a1a      	ldr	r2, [r3, #32]
 800552a:	f241 1311 	movw	r3, #4369	; 0x1111
 800552e:	4013      	ands	r3, r2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10f      	bne.n	8005554 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6a1a      	ldr	r2, [r3, #32]
 800553a:	f240 4344 	movw	r3, #1092	; 0x444
 800553e:	4013      	ands	r3, r2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d107      	bne.n	8005554 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6812      	ldr	r2, [r2, #0]
 800554c:	6812      	ldr	r2, [r2, #0]
 800554e:	f022 0201 	bic.w	r2, r2, #1
 8005552:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_TIM_Encoder_Start_DMA>:
  * @param  pData2 : The destination Buffer address for IC2.
  * @param  Length : The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1, uint32_t *pData2, uint16_t Length)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	607a      	str	r2, [r7, #4]
 8005572:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if((htim->State == HAL_TIM_STATE_BUSY))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d101      	bne.n	8005584 <HAL_TIM_Encoder_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 8005580:	2302      	movs	r3, #2
 8005582:	e0bc      	b.n	80056fe <HAL_TIM_Encoder_Start_DMA+0x198>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b01      	cmp	r3, #1
 800558e:	d10e      	bne.n	80055ae <HAL_TIM_Encoder_Start_DMA+0x48>
  {
    if((((pData1 == 0U) || (pData2 == 0U) )) && (Length > 0U))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <HAL_TIM_Encoder_Start_DMA+0x36>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d104      	bne.n	80055a6 <HAL_TIM_Encoder_Start_DMA+0x40>
 800559c:	8b3b      	ldrh	r3, [r7, #24]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <HAL_TIM_Encoder_Start_DMA+0x40>
    {
      return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e0ab      	b.n	80056fe <HAL_TIM_Encoder_Start_DMA+0x198>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2202      	movs	r2, #2
 80055aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
  }

  switch (Channel)
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d02e      	beq.n	8005612 <HAL_TIM_Encoder_Start_DMA+0xac>
 80055b4:	2b18      	cmp	r3, #24
 80055b6:	d056      	beq.n	8005666 <HAL_TIM_Encoder_Start_DMA+0x100>
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d000      	beq.n	80055be <HAL_TIM_Encoder_Start_DMA+0x58>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
    }
    break;

    default:
    break;
 80055bc:	e09e      	b.n	80056fc <HAL_TIM_Encoder_Start_DMA+0x196>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	4a51      	ldr	r2, [pc, #324]	; (8005708 <HAL_TIM_Encoder_Start_DMA+0x1a2>)
 80055c4:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	4a50      	ldr	r2, [pc, #320]	; (800570c <HAL_TIM_Encoder_Start_DMA+0x1a6>)
 80055cc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t )pData1, Length);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3334      	adds	r3, #52	; 0x34
 80055d8:	4619      	mov	r1, r3
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	8b3b      	ldrh	r3, [r7, #24]
 80055de:	f7fb fa73 	bl	8000ac8 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	6812      	ldr	r2, [r2, #0]
 80055ea:	68d2      	ldr	r2, [r2, #12]
 80055ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f0:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE(htim);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	6812      	ldr	r2, [r2, #0]
 80055fc:	f042 0201 	orr.w	r2, r2, #1
 8005600:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2201      	movs	r2, #1
 8005608:	2100      	movs	r1, #0
 800560a:	4618      	mov	r0, r3
 800560c:	f001 ff18 	bl	8007440 <TIM_CCxChannelCmd>
    break;
 8005610:	e074      	b.n	80056fc <HAL_TIM_Encoder_Start_DMA+0x196>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005616:	4a3c      	ldr	r2, [pc, #240]	; (8005708 <HAL_TIM_Encoder_Start_DMA+0x1a2>)
 8005618:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561e:	4a3b      	ldr	r2, [pc, #236]	; (800570c <HAL_TIM_Encoder_Start_DMA+0x1a6>)
 8005620:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3338      	adds	r3, #56	; 0x38
 800562c:	4619      	mov	r1, r3
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	8b3b      	ldrh	r3, [r7, #24]
 8005632:	f7fb fa49 	bl	8000ac8 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	6812      	ldr	r2, [r2, #0]
 800563e:	68d2      	ldr	r2, [r2, #12]
 8005640:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005644:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE(htim);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	6812      	ldr	r2, [r2, #0]
 800564e:	6812      	ldr	r2, [r2, #0]
 8005650:	f042 0201 	orr.w	r2, r2, #1
 8005654:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2201      	movs	r2, #1
 800565c:	2104      	movs	r1, #4
 800565e:	4618      	mov	r0, r3
 8005660:	f001 feee 	bl	8007440 <TIM_CCxChannelCmd>
    break;
 8005664:	e04a      	b.n	80056fc <HAL_TIM_Encoder_Start_DMA+0x196>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	4a27      	ldr	r2, [pc, #156]	; (8005708 <HAL_TIM_Encoder_Start_DMA+0x1a2>)
 800566c:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	4a26      	ldr	r2, [pc, #152]	; (800570c <HAL_TIM_Encoder_Start_DMA+0x1a6>)
 8005674:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3334      	adds	r3, #52	; 0x34
 8005680:	4619      	mov	r1, r3
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	8b3b      	ldrh	r3, [r7, #24]
 8005686:	f7fb fa1f 	bl	8000ac8 <HAL_DMA_Start_IT>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568e:	4a1e      	ldr	r2, [pc, #120]	; (8005708 <HAL_TIM_Encoder_Start_DMA+0x1a2>)
 8005690:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005696:	4a1d      	ldr	r2, [pc, #116]	; (800570c <HAL_TIM_Encoder_Start_DMA+0x1a6>)
 8005698:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3338      	adds	r3, #56	; 0x38
 80056a4:	4619      	mov	r1, r3
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	8b3b      	ldrh	r3, [r7, #24]
 80056aa:	f7fb fa0d 	bl	8000ac8 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE(htim);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	6812      	ldr	r2, [r2, #0]
 80056b8:	f042 0201 	orr.w	r2, r2, #1
 80056bc:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2201      	movs	r2, #1
 80056c4:	2100      	movs	r1, #0
 80056c6:	4618      	mov	r0, r3
 80056c8:	f001 feba 	bl	8007440 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2201      	movs	r2, #1
 80056d2:	2104      	movs	r1, #4
 80056d4:	4618      	mov	r0, r3
 80056d6:	f001 feb3 	bl	8007440 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	6812      	ldr	r2, [r2, #0]
 80056e2:	68d2      	ldr	r2, [r2, #12]
 80056e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056e8:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	6812      	ldr	r2, [r2, #0]
 80056f2:	68d2      	ldr	r2, [r2, #12]
 80056f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056f8:	60da      	str	r2, [r3, #12]
    break;
 80056fa:	bf00      	nop
  }
  /* Return function status */
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	08006adf 	.word	0x08006adf
 800570c:	08006a4b 	.word	0x08006a4b

08005710 <HAL_TIM_Encoder_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if(Channel == TIM_CHANNEL_1)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10f      	bne.n	8005740 <HAL_TIM_Encoder_Stop_DMA+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2200      	movs	r2, #0
 8005726:	2100      	movs	r1, #0
 8005728:	4618      	mov	r0, r3
 800572a:	f001 fe89 	bl	8007440 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 1 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6812      	ldr	r2, [r2, #0]
 8005736:	68d2      	ldr	r2, [r2, #12]
 8005738:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800573c:	60da      	str	r2, [r3, #12]
 800573e:	e030      	b.n	80057a2 <HAL_TIM_Encoder_Stop_DMA+0x92>
  }
  else if(Channel == TIM_CHANNEL_2)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2b04      	cmp	r3, #4
 8005744:	d10f      	bne.n	8005766 <HAL_TIM_Encoder_Stop_DMA+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2200      	movs	r2, #0
 800574c:	2104      	movs	r1, #4
 800574e:	4618      	mov	r0, r3
 8005750:	f001 fe76 	bl	8007440 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6812      	ldr	r2, [r2, #0]
 800575c:	68d2      	ldr	r2, [r2, #12]
 800575e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005762:	60da      	str	r2, [r3, #12]
 8005764:	e01d      	b.n	80057a2 <HAL_TIM_Encoder_Stop_DMA+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2200      	movs	r2, #0
 800576c:	2100      	movs	r1, #0
 800576e:	4618      	mov	r0, r3
 8005770:	f001 fe66 	bl	8007440 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2200      	movs	r2, #0
 800577a:	2104      	movs	r1, #4
 800577c:	4618      	mov	r0, r3
 800577e:	f001 fe5f 	bl	8007440 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 1 and 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6812      	ldr	r2, [r2, #0]
 800578a:	68d2      	ldr	r2, [r2, #12]
 800578c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005790:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6812      	ldr	r2, [r2, #0]
 800579a:	68d2      	ldr	r2, [r2, #12]
 800579c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057a0:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6a1a      	ldr	r2, [r3, #32]
 80057a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80057ac:	4013      	ands	r3, r2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10f      	bne.n	80057d2 <HAL_TIM_Encoder_Stop_DMA+0xc2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6a1a      	ldr	r2, [r3, #32]
 80057b8:	f240 4344 	movw	r3, #1092	; 0x444
 80057bc:	4013      	ands	r3, r2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d107      	bne.n	80057d2 <HAL_TIM_Encoder_Stop_DMA+0xc2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	6812      	ldr	r2, [r2, #0]
 80057ca:	6812      	ldr	r2, [r2, #0]
 80057cc:	f022 0201 	bic.w	r2, r2, #1
 80057d0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d122      	bne.n	8005840 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b02      	cmp	r3, #2
 8005806:	d11b      	bne.n	8005840 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f06f 0202 	mvn.w	r2, #2
 8005810:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f003 f96a 	bl	8008b00 <HAL_TIM_IC_CaptureCallback>
 800582c:	e005      	b.n	800583a <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f001 f890 	bl	8006954 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f001 f89f 	bl	8006978 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b04      	cmp	r3, #4
 800584c:	d122      	bne.n	8005894 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b04      	cmp	r3, #4
 800585a:	d11b      	bne.n	8005894 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f06f 0204 	mvn.w	r2, #4
 8005864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2202      	movs	r2, #2
 800586a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f003 f940 	bl	8008b00 <HAL_TIM_IC_CaptureCallback>
 8005880:	e005      	b.n	800588e <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f001 f866 	bl	8006954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f001 f875 	bl	8006978 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b08      	cmp	r3, #8
 80058a0:	d122      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 0308 	and.w	r3, r3, #8
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d11b      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f06f 0208 	mvn.w	r2, #8
 80058b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2204      	movs	r2, #4
 80058be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f003 f916 	bl	8008b00 <HAL_TIM_IC_CaptureCallback>
 80058d4:	e005      	b.n	80058e2 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f001 f83c 	bl	8006954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f001 f84b 	bl	8006978 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0310 	and.w	r3, r3, #16
 80058f2:	2b10      	cmp	r3, #16
 80058f4:	d122      	bne.n	800593c <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f003 0310 	and.w	r3, r3, #16
 8005900:	2b10      	cmp	r3, #16
 8005902:	d11b      	bne.n	800593c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f06f 0210 	mvn.w	r2, #16
 800590c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2208      	movs	r2, #8
 8005912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f003 f8ec 	bl	8008b00 <HAL_TIM_IC_CaptureCallback>
 8005928:	e005      	b.n	8005936 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f001 f812 	bl	8006954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f001 f821 	bl	8006978 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b01      	cmp	r3, #1
 8005948:	d10e      	bne.n	8005968 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b01      	cmp	r3, #1
 8005956:	d107      	bne.n	8005968 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0201 	mvn.w	r2, #1
 8005960:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f003 f8e6 	bl	8008b34 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005972:	2b80      	cmp	r3, #128	; 0x80
 8005974:	d10e      	bne.n	8005994 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005980:	2b80      	cmp	r3, #128	; 0x80
 8005982:	d107      	bne.n	8005994 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800598c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f002 ff71 	bl	8008876 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599e:	2b40      	cmp	r3, #64	; 0x40
 80059a0:	d10e      	bne.n	80059c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ac:	2b40      	cmp	r3, #64	; 0x40
 80059ae:	d107      	bne.n	80059c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059b8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 ffe5 	bl	800698a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f003 0320 	and.w	r3, r3, #32
 80059ca:	2b20      	cmp	r3, #32
 80059cc:	d10e      	bne.n	80059ec <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f003 0320 	and.w	r3, r3, #32
 80059d8:	2b20      	cmp	r3, #32
 80059da:	d107      	bne.n	80059ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f06f 0220 	mvn.w	r2, #32
 80059e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f002 ff3c 	bl	8008864 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80059ec:	bf00      	nop
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <HAL_TIM_OC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d101      	bne.n	8005a0e <HAL_TIM_OC_ConfigChannel+0x1a>
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	e04e      	b.n	8005aac <HAL_TIM_OC_ConfigChannel+0xb8>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b0c      	cmp	r3, #12
 8005a22:	d839      	bhi.n	8005a98 <HAL_TIM_OC_ConfigChannel+0xa4>
 8005a24:	a201      	add	r2, pc, #4	; (adr r2, 8005a2c <HAL_TIM_OC_ConfigChannel+0x38>)
 8005a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2a:	bf00      	nop
 8005a2c:	08005a61 	.word	0x08005a61
 8005a30:	08005a99 	.word	0x08005a99
 8005a34:	08005a99 	.word	0x08005a99
 8005a38:	08005a99 	.word	0x08005a99
 8005a3c:	08005a6f 	.word	0x08005a6f
 8005a40:	08005a99 	.word	0x08005a99
 8005a44:	08005a99 	.word	0x08005a99
 8005a48:	08005a99 	.word	0x08005a99
 8005a4c:	08005a7d 	.word	0x08005a7d
 8005a50:	08005a99 	.word	0x08005a99
 8005a54:	08005a99 	.word	0x08005a99
 8005a58:	08005a99 	.word	0x08005a99
 8005a5c:	08005a8b 	.word	0x08005a8b
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68b9      	ldr	r1, [r7, #8]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f001 f8fc 	bl	8006c64 <TIM_OC1_SetConfig>
    }
    break;
 8005a6c:	e015      	b.n	8005a9a <HAL_TIM_OC_ConfigChannel+0xa6>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68b9      	ldr	r1, [r7, #8]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f001 f961 	bl	8006d3c <TIM_OC2_SetConfig>
    }
    break;
 8005a7a:	e00e      	b.n	8005a9a <HAL_TIM_OC_ConfigChannel+0xa6>

    case TIM_CHANNEL_3:
    {
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68b9      	ldr	r1, [r7, #8]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 f9ca 	bl	8006e1c <TIM_OC3_SetConfig>
    }
    break;
 8005a88:	e007      	b.n	8005a9a <HAL_TIM_OC_ConfigChannel+0xa6>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
       /* Configure the TIM Channel 4 in Output Compare */
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68b9      	ldr	r1, [r7, #8]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f001 fa33 	bl	8006efc <TIM_OC4_SetConfig>
    }
    break;
 8005a96:	e000      	b.n	8005a9a <HAL_TIM_OC_ConfigChannel+0xa6>

    default:
    break;
 8005a98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  __HAL_LOCK(htim);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d101      	bne.n	8005ace <HAL_TIM_IC_ConfigChannel+0x1a>
 8005aca:	2302      	movs	r3, #2
 8005acc:	e08a      	b.n	8005be4 <HAL_TIM_IC_ConfigChannel+0x130>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2202      	movs	r2, #2
 8005ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d11b      	bne.n	8005b1c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6818      	ldr	r0, [r3, #0]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	6819      	ldr	r1, [r3, #0]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f001 fae1 	bl	80070ba <TIM_TI1_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	6812      	ldr	r2, [r2, #0]
 8005b00:	6992      	ldr	r2, [r2, #24]
 8005b02:	f022 020c 	bic.w	r2, r2, #12
 8005b06:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	6812      	ldr	r2, [r2, #0]
 8005b10:	6991      	ldr	r1, [r2, #24]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	6892      	ldr	r2, [r2, #8]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	619a      	str	r2, [r3, #24]
 8005b1a:	e05a      	b.n	8005bd2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d11c      	bne.n	8005b5c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	6819      	ldr	r1, [r3, #0]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f001 fb53 	bl	80071dc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	6812      	ldr	r2, [r2, #0]
 8005b3e:	6992      	ldr	r2, [r2, #24]
 8005b40:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b44:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	6812      	ldr	r2, [r2, #0]
 8005b4e:	6991      	ldr	r1, [r2, #24]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	6892      	ldr	r2, [r2, #8]
 8005b54:	0212      	lsls	r2, r2, #8
 8005b56:	430a      	orrs	r2, r1
 8005b58:	619a      	str	r2, [r3, #24]
 8005b5a:	e03a      	b.n	8005bd2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d11b      	bne.n	8005b9a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	6819      	ldr	r1, [r3, #0]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f001 fba6 	bl	80072c2 <TIM_TI3_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	6812      	ldr	r2, [r2, #0]
 8005b7e:	69d2      	ldr	r2, [r2, #28]
 8005b80:	f022 020c 	bic.w	r2, r2, #12
 8005b84:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	6812      	ldr	r2, [r2, #0]
 8005b8e:	69d1      	ldr	r1, [r2, #28]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	6892      	ldr	r2, [r2, #8]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	61da      	str	r2, [r3, #28]
 8005b98:	e01b      	b.n	8005bd2 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6818      	ldr	r0, [r3, #0]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	6819      	ldr	r1, [r3, #0]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f001 fbc9 	bl	8007340 <TIM_TI4_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	6812      	ldr	r2, [r2, #0]
 8005bb6:	69d2      	ldr	r2, [r2, #28]
 8005bb8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005bbc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	69d1      	ldr	r1, [r2, #28]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	6892      	ldr	r2, [r2, #8]
 8005bcc:	0212      	lsls	r2, r2, #8
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d101      	bne.n	8005c06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005c02:	2302      	movs	r3, #2
 8005c04:	e0b4      	b.n	8005d70 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2202      	movs	r2, #2
 8005c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b0c      	cmp	r3, #12
 8005c1a:	f200 809f 	bhi.w	8005d5c <HAL_TIM_PWM_ConfigChannel+0x170>
 8005c1e:	a201      	add	r2, pc, #4	; (adr r2, 8005c24 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c24:	08005c59 	.word	0x08005c59
 8005c28:	08005d5d 	.word	0x08005d5d
 8005c2c:	08005d5d 	.word	0x08005d5d
 8005c30:	08005d5d 	.word	0x08005d5d
 8005c34:	08005c99 	.word	0x08005c99
 8005c38:	08005d5d 	.word	0x08005d5d
 8005c3c:	08005d5d 	.word	0x08005d5d
 8005c40:	08005d5d 	.word	0x08005d5d
 8005c44:	08005cdb 	.word	0x08005cdb
 8005c48:	08005d5d 	.word	0x08005d5d
 8005c4c:	08005d5d 	.word	0x08005d5d
 8005c50:	08005d5d 	.word	0x08005d5d
 8005c54:	08005d1b 	.word	0x08005d1b
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68b9      	ldr	r1, [r7, #8]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f001 f800 	bl	8006c64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	6812      	ldr	r2, [r2, #0]
 8005c6c:	6992      	ldr	r2, [r2, #24]
 8005c6e:	f042 0208 	orr.w	r2, r2, #8
 8005c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	6812      	ldr	r2, [r2, #0]
 8005c7c:	6992      	ldr	r2, [r2, #24]
 8005c7e:	f022 0204 	bic.w	r2, r2, #4
 8005c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	6812      	ldr	r2, [r2, #0]
 8005c8c:	6991      	ldr	r1, [r2, #24]
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	6912      	ldr	r2, [r2, #16]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	619a      	str	r2, [r3, #24]
    }
    break;
 8005c96:	e062      	b.n	8005d5e <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68b9      	ldr	r1, [r7, #8]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 f84c 	bl	8006d3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	6812      	ldr	r2, [r2, #0]
 8005cac:	6992      	ldr	r2, [r2, #24]
 8005cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	6812      	ldr	r2, [r2, #0]
 8005cbc:	6992      	ldr	r2, [r2, #24]
 8005cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	6812      	ldr	r2, [r2, #0]
 8005ccc:	6991      	ldr	r1, [r2, #24]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	6912      	ldr	r2, [r2, #16]
 8005cd2:	0212      	lsls	r2, r2, #8
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	619a      	str	r2, [r3, #24]
    }
    break;
 8005cd8:	e041      	b.n	8005d5e <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68b9      	ldr	r1, [r7, #8]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f001 f89b 	bl	8006e1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	6812      	ldr	r2, [r2, #0]
 8005cee:	69d2      	ldr	r2, [r2, #28]
 8005cf0:	f042 0208 	orr.w	r2, r2, #8
 8005cf4:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	6812      	ldr	r2, [r2, #0]
 8005cfe:	69d2      	ldr	r2, [r2, #28]
 8005d00:	f022 0204 	bic.w	r2, r2, #4
 8005d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	6812      	ldr	r2, [r2, #0]
 8005d0e:	69d1      	ldr	r1, [r2, #28]
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	6912      	ldr	r2, [r2, #16]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	61da      	str	r2, [r3, #28]
    }
    break;
 8005d18:	e021      	b.n	8005d5e <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68b9      	ldr	r1, [r7, #8]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f001 f8eb 	bl	8006efc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	6812      	ldr	r2, [r2, #0]
 8005d2e:	69d2      	ldr	r2, [r2, #28]
 8005d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d34:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	6812      	ldr	r2, [r2, #0]
 8005d3e:	69d2      	ldr	r2, [r2, #28]
 8005d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	6812      	ldr	r2, [r2, #0]
 8005d4e:	69d1      	ldr	r1, [r2, #28]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	6912      	ldr	r2, [r2, #16]
 8005d54:	0212      	lsls	r2, r2, #8
 8005d56:	430a      	orrs	r2, r1
 8005d58:	61da      	str	r2, [r3, #28]
    }
    break;
 8005d5a:	e000      	b.n	8005d5e <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8005d5c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_TIM_OnePulse_ConfigChannel>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef* sConfig, uint32_t OutputChannel,  uint32_t InputChannel)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08c      	sub	sp, #48	; 0x30
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if(OutputChannel != InputChannel)
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	f000 80af 	beq.w	8005eee <HAL_TIM_OnePulse_ConfigChannel+0x176>
  {
  __HAL_LOCK(htim);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d101      	bne.n	8005d9e <HAL_TIM_OnePulse_ConfigChannel+0x26>
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	e0a8      	b.n	8005ef0 <HAL_TIM_OnePulse_ConfigChannel+0x178>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2202      	movs	r2, #2
 8005daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Extract the Ouput compare configuration from sConfig structure */
  temp1.OCMode = sConfig->OCMode;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	617b      	str	r3, [r7, #20]
  temp1.Pulse = sConfig->Pulse;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	61bb      	str	r3, [r7, #24]
  temp1.OCPolarity = sConfig->OCPolarity;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	61fb      	str	r3, [r7, #28]
  temp1.OCNPolarity = sConfig->OCNPolarity;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	623b      	str	r3, [r7, #32]
  temp1.OCIdleState = sConfig->OCIdleState;
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	62bb      	str	r3, [r7, #40]	; 0x28
  temp1.OCNIdleState = sConfig->OCNIdleState;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (OutputChannel)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <HAL_TIM_OnePulse_ConfigChannel+0x66>
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	d009      	beq.n	8005df0 <HAL_TIM_OnePulse_ConfigChannel+0x78>

      TIM_OC2_SetConfig(htim->Instance, &temp1);
    }
    break;
    default:
    break;
 8005ddc:	e011      	b.n	8005e02 <HAL_TIM_OnePulse_ConfigChannel+0x8a>
      TIM_OC1_SetConfig(htim->Instance, &temp1);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f107 0214 	add.w	r2, r7, #20
 8005de6:	4611      	mov	r1, r2
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 ff3b 	bl	8006c64 <TIM_OC1_SetConfig>
    break;
 8005dee:	e008      	b.n	8005e02 <HAL_TIM_OnePulse_ConfigChannel+0x8a>
      TIM_OC2_SetConfig(htim->Instance, &temp1);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f107 0214 	add.w	r2, r7, #20
 8005df8:	4611      	mov	r1, r2
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 ff9e 	bl	8006d3c <TIM_OC2_SetConfig>
    break;
 8005e00:	bf00      	nop
  }
  switch (InputChannel)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <HAL_TIM_OnePulse_ConfigChannel+0x96>
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d033      	beq.n	8005e74 <HAL_TIM_OnePulse_ConfigChannel+0xfc>
      htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
    }
    break;

    default:
    break;
 8005e0c:	e065      	b.n	8005eda <HAL_TIM_OnePulse_ConfigChannel+0x162>
      TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6818      	ldr	r0, [r3, #0]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	6999      	ldr	r1, [r3, #24]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	69da      	ldr	r2, [r3, #28]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	f001 f94c 	bl	80070ba <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	6812      	ldr	r2, [r2, #0]
 8005e2a:	6992      	ldr	r2, [r2, #24]
 8005e2c:	f022 020c 	bic.w	r2, r2, #12
 8005e30:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	6812      	ldr	r2, [r2, #0]
 8005e3a:	6892      	ldr	r2, [r2, #8]
 8005e3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005e40:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_TS_TI1FP1;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	6812      	ldr	r2, [r2, #0]
 8005e4a:	6892      	ldr	r2, [r2, #8]
 8005e4c:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8005e50:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	6812      	ldr	r2, [r2, #0]
 8005e5a:	6892      	ldr	r2, [r2, #8]
 8005e5c:	f022 0207 	bic.w	r2, r2, #7
 8005e60:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	6812      	ldr	r2, [r2, #0]
 8005e6a:	6892      	ldr	r2, [r2, #8]
 8005e6c:	f042 0206 	orr.w	r2, r2, #6
 8005e70:	609a      	str	r2, [r3, #8]
    break;
 8005e72:	e032      	b.n	8005eda <HAL_TIM_OnePulse_ConfigChannel+0x162>
      TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6818      	ldr	r0, [r3, #0]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	6999      	ldr	r1, [r3, #24]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	69da      	ldr	r2, [r3, #28]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	f001 f9aa 	bl	80071dc <TIM_TI2_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	6812      	ldr	r2, [r2, #0]
 8005e90:	6992      	ldr	r2, [r2, #24]
 8005e92:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e96:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	6812      	ldr	r2, [r2, #0]
 8005ea0:	6892      	ldr	r2, [r2, #8]
 8005ea2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005ea6:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_TS_TI2FP2;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	6892      	ldr	r2, [r2, #8]
 8005eb2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005eb6:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	6812      	ldr	r2, [r2, #0]
 8005ec0:	6892      	ldr	r2, [r2, #8]
 8005ec2:	f022 0207 	bic.w	r2, r2, #7
 8005ec6:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	6812      	ldr	r2, [r2, #0]
 8005ed0:	6892      	ldr	r2, [r2, #8]
 8005ed2:	f042 0206 	orr.w	r2, r2, #6
 8005ed6:	609a      	str	r2, [r3, #8]
    break;
 8005ed8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	e000      	b.n	8005ef0 <HAL_TIM_OnePulse_ConfigChannel+0x178>
}
  else
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
  }
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3730      	adds	r7, #48	; 0x30
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <HAL_TIM_DMABurst_WriteStart>:
  *         between: TIM_DMABURSTLENGTH_1TRANSFER and TIM_DMABURSTLENGTH_18TRANSFERS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                              uint32_t* BurstBuffer, uint32_t  BurstLength)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	603b      	str	r3, [r7, #0]
  assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));

  if((htim->State == HAL_TIM_STATE_BUSY))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d101      	bne.n	8005f16 <HAL_TIM_DMABurst_WriteStart+0x1e>
  {
     return HAL_BUSY;
 8005f12:	2302      	movs	r3, #2
 8005f14:	e0d3      	b.n	80060be <HAL_TIM_DMABurst_WriteStart+0x1c6>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d10b      	bne.n	8005f3a <HAL_TIM_DMABurst_WriteStart+0x42>
  {
    if((BurstBuffer == 0U) && (BurstLength > 0U))
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d104      	bne.n	8005f32 <HAL_TIM_DMABurst_WriteStart+0x3a>
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <HAL_TIM_DMABurst_WriteStart+0x3a>
    {
      return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e0c5      	b.n	80060be <HAL_TIM_DMABurst_WriteStart+0x1c6>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2202      	movs	r2, #2
 8005f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
  }
  switch(BurstRequestSrc)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f40:	d056      	beq.n	8005ff0 <HAL_TIM_DMABurst_WriteStart+0xf8>
 8005f42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f46:	d809      	bhi.n	8005f5c <HAL_TIM_DMABurst_WriteStart+0x64>
 8005f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f4c:	d026      	beq.n	8005f9c <HAL_TIM_DMABurst_WriteStart+0xa4>
 8005f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f52:	d038      	beq.n	8005fc6 <HAL_TIM_DMABurst_WriteStart+0xce>
 8005f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f58:	d00b      	beq.n	8005f72 <HAL_TIM_DMABurst_WriteStart+0x7a>
      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);
    }
    break;
    default:
    break;
 8005f5a:	e09d      	b.n	8006098 <HAL_TIM_DMABurst_WriteStart+0x1a0>
  switch(BurstRequestSrc)
 8005f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f60:	d070      	beq.n	8006044 <HAL_TIM_DMABurst_WriteStart+0x14c>
 8005f62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f66:	f000 8082 	beq.w	800606e <HAL_TIM_DMABurst_WriteStart+0x176>
 8005f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6e:	d054      	beq.n	800601a <HAL_TIM_DMABurst_WriteStart+0x122>
    break;
 8005f70:	e092      	b.n	8006098 <HAL_TIM_DMABurst_WriteStart+0x1a0>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	4a54      	ldr	r2, [pc, #336]	; (80060c8 <HAL_TIM_DMABurst_WriteStart+0x1d0>)
 8005f78:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	4a53      	ldr	r2, [pc, #332]	; (80060cc <HAL_TIM_DMABurst_WriteStart+0x1d4>)
 8005f80:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6a18      	ldr	r0, [r3, #32]
 8005f86:	6839      	ldr	r1, [r7, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	334c      	adds	r3, #76	; 0x4c
 8005f8e:	461a      	mov	r2, r3
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	0a1b      	lsrs	r3, r3, #8
 8005f94:	3301      	adds	r3, #1
 8005f96:	f7fa fd97 	bl	8000ac8 <HAL_DMA_Start_IT>
    break;
 8005f9a:	e07d      	b.n	8006098 <HAL_TIM_DMABurst_WriteStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback =  TIM_DMADelayPulseCplt;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	4a4b      	ldr	r2, [pc, #300]	; (80060d0 <HAL_TIM_DMABurst_WriteStart+0x1d8>)
 8005fa2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	4a48      	ldr	r2, [pc, #288]	; (80060cc <HAL_TIM_DMABurst_WriteStart+0x1d4>)
 8005faa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	334c      	adds	r3, #76	; 0x4c
 8005fb8:	461a      	mov	r2, r3
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	0a1b      	lsrs	r3, r3, #8
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	f7fa fd82 	bl	8000ac8 <HAL_DMA_Start_IT>
    break;
 8005fc4:	e068      	b.n	8006098 <HAL_TIM_DMABurst_WriteStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback =  TIM_DMADelayPulseCplt;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fca:	4a41      	ldr	r2, [pc, #260]	; (80060d0 <HAL_TIM_DMABurst_WriteStart+0x1d8>)
 8005fcc:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd2:	4a3e      	ldr	r2, [pc, #248]	; (80060cc <HAL_TIM_DMABurst_WriteStart+0x1d4>)
 8005fd4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	334c      	adds	r3, #76	; 0x4c
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	0a1b      	lsrs	r3, r3, #8
 8005fe8:	3301      	adds	r3, #1
 8005fea:	f7fa fd6d 	bl	8000ac8 <HAL_DMA_Start_IT>
    break;
 8005fee:	e053      	b.n	8006098 <HAL_TIM_DMABurst_WriteStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback =  TIM_DMADelayPulseCplt;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff4:	4a36      	ldr	r2, [pc, #216]	; (80060d0 <HAL_TIM_DMABurst_WriteStart+0x1d8>)
 8005ff6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffc:	4a33      	ldr	r2, [pc, #204]	; (80060cc <HAL_TIM_DMABurst_WriteStart+0x1d4>)
 8005ffe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006004:	6839      	ldr	r1, [r7, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	334c      	adds	r3, #76	; 0x4c
 800600c:	461a      	mov	r2, r3
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	0a1b      	lsrs	r3, r3, #8
 8006012:	3301      	adds	r3, #1
 8006014:	f7fa fd58 	bl	8000ac8 <HAL_DMA_Start_IT>
    break;
 8006018:	e03e      	b.n	8006098 <HAL_TIM_DMABurst_WriteStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback =  TIM_DMADelayPulseCplt;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601e:	4a2c      	ldr	r2, [pc, #176]	; (80060d0 <HAL_TIM_DMABurst_WriteStart+0x1d8>)
 8006020:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006026:	4a29      	ldr	r2, [pc, #164]	; (80060cc <HAL_TIM_DMABurst_WriteStart+0x1d4>)
 8006028:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800602e:	6839      	ldr	r1, [r7, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	334c      	adds	r3, #76	; 0x4c
 8006036:	461a      	mov	r2, r3
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	0a1b      	lsrs	r3, r3, #8
 800603c:	3301      	adds	r3, #1
 800603e:	f7fa fd43 	bl	8000ac8 <HAL_DMA_Start_IT>
    break;
 8006042:	e029      	b.n	8006098 <HAL_TIM_DMABurst_WriteStart+0x1a0>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006048:	4a22      	ldr	r2, [pc, #136]	; (80060d4 <HAL_TIM_DMABurst_WriteStart+0x1dc>)
 800604a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006050:	4a1e      	ldr	r2, [pc, #120]	; (80060cc <HAL_TIM_DMABurst_WriteStart+0x1d4>)
 8006052:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006058:	6839      	ldr	r1, [r7, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	334c      	adds	r3, #76	; 0x4c
 8006060:	461a      	mov	r2, r3
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	0a1b      	lsrs	r3, r3, #8
 8006066:	3301      	adds	r3, #1
 8006068:	f7fa fd2e 	bl	8000ac8 <HAL_DMA_Start_IT>
    break;
 800606c:	e014      	b.n	8006098 <HAL_TIM_DMABurst_WriteStart+0x1a0>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	4a19      	ldr	r2, [pc, #100]	; (80060d8 <HAL_TIM_DMABurst_WriteStart+0x1e0>)
 8006074:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607a:	4a14      	ldr	r2, [pc, #80]	; (80060cc <HAL_TIM_DMABurst_WriteStart+0x1d4>)
 800607c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006082:	6839      	ldr	r1, [r7, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	334c      	adds	r3, #76	; 0x4c
 800608a:	461a      	mov	r2, r3
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	0a1b      	lsrs	r3, r3, #8
 8006090:	3301      	adds	r3, #1
 8006092:	f7fa fd19 	bl	8000ac8 <HAL_DMA_Start_IT>
    break;
 8006096:	bf00      	nop
  }
   /* configure the DMA Burst Mode */
   htim->Instance->DCR = BurstBaseAddress | BurstLength;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68b9      	ldr	r1, [r7, #8]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	649a      	str	r2, [r3, #72]	; 0x48

   /* Enable the TIM DMA Request */
   __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	6812      	ldr	r2, [r2, #0]
 80060ac:	68d1      	ldr	r1, [r2, #12]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	60da      	str	r2, [r3, #12]

   htim->State = HAL_TIM_STATE_READY;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	08006b4f 	.word	0x08006b4f
 80060cc:	08006a4b 	.word	0x08006a4b
 80060d0:	08006a6f 	.word	0x08006a6f
 80060d4:	08008889 	.word	0x08008889
 80060d8:	08006b73 	.word	0x08006b73

080060dc <HAL_TIM_DMABurst_WriteStop>:
  * @param  htim : TIM handle
  * @param  BurstRequestSrc : TIM DMA Request sources to disable
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch(BurstRequestSrc)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ec:	d028      	beq.n	8006140 <HAL_TIM_DMABurst_WriteStop+0x64>
 80060ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f2:	d809      	bhi.n	8006108 <HAL_TIM_DMABurst_WriteStop+0x2c>
 80060f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060f8:	d016      	beq.n	8006128 <HAL_TIM_DMABurst_WriteStop+0x4c>
 80060fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060fe:	d019      	beq.n	8006134 <HAL_TIM_DMABurst_WriteStop+0x58>
 8006100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006104:	d00a      	beq.n	800611c <HAL_TIM_DMABurst_WriteStop+0x40>
    {
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
    }
    break;
    default:
    break;
 8006106:	e033      	b.n	8006170 <HAL_TIM_DMABurst_WriteStop+0x94>
  switch(BurstRequestSrc)
 8006108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800610c:	d024      	beq.n	8006158 <HAL_TIM_DMABurst_WriteStop+0x7c>
 800610e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006112:	d027      	beq.n	8006164 <HAL_TIM_DMABurst_WriteStop+0x88>
 8006114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006118:	d018      	beq.n	800614c <HAL_TIM_DMABurst_WriteStop+0x70>
    break;
 800611a:	e029      	b.n	8006170 <HAL_TIM_DMABurst_WriteStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_UPDATE]);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	4618      	mov	r0, r3
 8006122:	f7fa fd30 	bl	8000b86 <HAL_DMA_Abort>
    break;
 8006126:	e023      	b.n	8006170 <HAL_TIM_DMABurst_WriteStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC1]);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612c:	4618      	mov	r0, r3
 800612e:	f7fa fd2a 	bl	8000b86 <HAL_DMA_Abort>
    break;
 8006132:	e01d      	b.n	8006170 <HAL_TIM_DMABurst_WriteStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC2]);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006138:	4618      	mov	r0, r3
 800613a:	f7fa fd24 	bl	8000b86 <HAL_DMA_Abort>
    break;
 800613e:	e017      	b.n	8006170 <HAL_TIM_DMABurst_WriteStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC3]);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006144:	4618      	mov	r0, r3
 8006146:	f7fa fd1e 	bl	8000b86 <HAL_DMA_Abort>
    break;
 800614a:	e011      	b.n	8006170 <HAL_TIM_DMABurst_WriteStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC4]);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006150:	4618      	mov	r0, r3
 8006152:	f7fa fd18 	bl	8000b86 <HAL_DMA_Abort>
    break;
 8006156:	e00b      	b.n	8006170 <HAL_TIM_DMABurst_WriteStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615c:	4618      	mov	r0, r3
 800615e:	f7fa fd12 	bl	8000b86 <HAL_DMA_Abort>
    break;
 8006162:	e005      	b.n	8006170 <HAL_TIM_DMABurst_WriteStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	4618      	mov	r0, r3
 800616a:	f7fa fd0c 	bl	8000b86 <HAL_DMA_Abort>
    break;
 800616e:	bf00      	nop
  }

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	6812      	ldr	r2, [r2, #0]
 8006178:	68d1      	ldr	r1, [r2, #12]
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	43d2      	mvns	r2, r2
 800617e:	400a      	ands	r2, r1
 8006180:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_TIM_DMABurst_ReadStart>:
  *         between: TIM_DMABURSTLENGTH_1TRANSFER and TIM_DMABURSTLENGTH_18TRANSFERS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                             uint32_t  *BurstBuffer, uint32_t  BurstLength)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
 8006198:	603b      	str	r3, [r7, #0]
  assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));

  if((htim->State == HAL_TIM_STATE_BUSY))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d101      	bne.n	80061aa <HAL_TIM_DMABurst_ReadStart+0x1e>
  {
     return HAL_BUSY;
 80061a6:	2302      	movs	r3, #2
 80061a8:	e0d3      	b.n	8006352 <HAL_TIM_DMABurst_ReadStart+0x1c6>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d10b      	bne.n	80061ce <HAL_TIM_DMABurst_ReadStart+0x42>
  {
    if((BurstBuffer == 0U) && (BurstLength > 0U))
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d104      	bne.n	80061c6 <HAL_TIM_DMABurst_ReadStart+0x3a>
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <HAL_TIM_DMABurst_ReadStart+0x3a>
    {
      return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e0c5      	b.n	8006352 <HAL_TIM_DMABurst_ReadStart+0x1c6>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2202      	movs	r2, #2
 80061ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
  }
  switch(BurstRequestSrc)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061d4:	d056      	beq.n	8006284 <HAL_TIM_DMABurst_ReadStart+0xf8>
 80061d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061da:	d809      	bhi.n	80061f0 <HAL_TIM_DMABurst_ReadStart+0x64>
 80061dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061e0:	d026      	beq.n	8006230 <HAL_TIM_DMABurst_ReadStart+0xa4>
 80061e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e6:	d038      	beq.n	800625a <HAL_TIM_DMABurst_ReadStart+0xce>
 80061e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ec:	d00b      	beq.n	8006206 <HAL_TIM_DMABurst_ReadStart+0x7a>
      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);
    }
    break;
    default:
    break;
 80061ee:	e09d      	b.n	800632c <HAL_TIM_DMABurst_ReadStart+0x1a0>
  switch(BurstRequestSrc)
 80061f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061f4:	d070      	beq.n	80062d8 <HAL_TIM_DMABurst_ReadStart+0x14c>
 80061f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061fa:	f000 8082 	beq.w	8006302 <HAL_TIM_DMABurst_ReadStart+0x176>
 80061fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006202:	d054      	beq.n	80062ae <HAL_TIM_DMABurst_ReadStart+0x122>
    break;
 8006204:	e092      	b.n	800632c <HAL_TIM_DMABurst_ReadStart+0x1a0>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	4a54      	ldr	r2, [pc, #336]	; (800635c <HAL_TIM_DMABurst_ReadStart+0x1d0>)
 800620c:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	4a53      	ldr	r2, [pc, #332]	; (8006360 <HAL_TIM_DMABurst_ReadStart+0x1d4>)
 8006214:	631a      	str	r2, [r3, #48]	; 0x30
       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6a18      	ldr	r0, [r3, #32]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	334c      	adds	r3, #76	; 0x4c
 8006220:	4619      	mov	r1, r3
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	0a1b      	lsrs	r3, r3, #8
 8006228:	3301      	adds	r3, #1
 800622a:	f7fa fc4d 	bl	8000ac8 <HAL_DMA_Start_IT>
    break;
 800622e:	e07d      	b.n	800632c <HAL_TIM_DMABurst_ReadStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback =  TIM_DMACaptureCplt;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006234:	4a4b      	ldr	r2, [pc, #300]	; (8006364 <HAL_TIM_DMABurst_ReadStart+0x1d8>)
 8006236:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	4a48      	ldr	r2, [pc, #288]	; (8006360 <HAL_TIM_DMABurst_ReadStart+0x1d4>)
 800623e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	334c      	adds	r3, #76	; 0x4c
 800624a:	4619      	mov	r1, r3
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	0a1b      	lsrs	r3, r3, #8
 8006252:	3301      	adds	r3, #1
 8006254:	f7fa fc38 	bl	8000ac8 <HAL_DMA_Start_IT>
    break;
 8006258:	e068      	b.n	800632c <HAL_TIM_DMABurst_ReadStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback =  TIM_DMACaptureCplt;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625e:	4a41      	ldr	r2, [pc, #260]	; (8006364 <HAL_TIM_DMABurst_ReadStart+0x1d8>)
 8006260:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006266:	4a3e      	ldr	r2, [pc, #248]	; (8006360 <HAL_TIM_DMABurst_ReadStart+0x1d4>)
 8006268:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	334c      	adds	r3, #76	; 0x4c
 8006274:	4619      	mov	r1, r3
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	0a1b      	lsrs	r3, r3, #8
 800627c:	3301      	adds	r3, #1
 800627e:	f7fa fc23 	bl	8000ac8 <HAL_DMA_Start_IT>
    break;
 8006282:	e053      	b.n	800632c <HAL_TIM_DMABurst_ReadStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback =  TIM_DMACaptureCplt;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006288:	4a36      	ldr	r2, [pc, #216]	; (8006364 <HAL_TIM_DMABurst_ReadStart+0x1d8>)
 800628a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	4a33      	ldr	r2, [pc, #204]	; (8006360 <HAL_TIM_DMABurst_ReadStart+0x1d4>)
 8006292:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	334c      	adds	r3, #76	; 0x4c
 800629e:	4619      	mov	r1, r3
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	0a1b      	lsrs	r3, r3, #8
 80062a6:	3301      	adds	r3, #1
 80062a8:	f7fa fc0e 	bl	8000ac8 <HAL_DMA_Start_IT>
    break;
 80062ac:	e03e      	b.n	800632c <HAL_TIM_DMABurst_ReadStart+0x1a0>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback =  TIM_DMACaptureCplt;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b2:	4a2c      	ldr	r2, [pc, #176]	; (8006364 <HAL_TIM_DMABurst_ReadStart+0x1d8>)
 80062b4:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ba:	4a29      	ldr	r2, [pc, #164]	; (8006360 <HAL_TIM_DMABurst_ReadStart+0x1d4>)
 80062bc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	334c      	adds	r3, #76	; 0x4c
 80062c8:	4619      	mov	r1, r3
 80062ca:	683a      	ldr	r2, [r7, #0]
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	0a1b      	lsrs	r3, r3, #8
 80062d0:	3301      	adds	r3, #1
 80062d2:	f7fa fbf9 	bl	8000ac8 <HAL_DMA_Start_IT>
    break;
 80062d6:	e029      	b.n	800632c <HAL_TIM_DMABurst_ReadStart+0x1a0>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062dc:	4a22      	ldr	r2, [pc, #136]	; (8006368 <HAL_TIM_DMABurst_ReadStart+0x1dc>)
 80062de:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e4:	4a1e      	ldr	r2, [pc, #120]	; (8006360 <HAL_TIM_DMABurst_ReadStart+0x1d4>)
 80062e6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	334c      	adds	r3, #76	; 0x4c
 80062f2:	4619      	mov	r1, r3
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	0a1b      	lsrs	r3, r3, #8
 80062fa:	3301      	adds	r3, #1
 80062fc:	f7fa fbe4 	bl	8000ac8 <HAL_DMA_Start_IT>
    break;
 8006300:	e014      	b.n	800632c <HAL_TIM_DMABurst_ReadStart+0x1a0>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006306:	4a19      	ldr	r2, [pc, #100]	; (800636c <HAL_TIM_DMABurst_ReadStart+0x1e0>)
 8006308:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630e:	4a14      	ldr	r2, [pc, #80]	; (8006360 <HAL_TIM_DMABurst_ReadStart+0x1d4>)
 8006310:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	334c      	adds	r3, #76	; 0x4c
 800631c:	4619      	mov	r1, r3
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	0a1b      	lsrs	r3, r3, #8
 8006324:	3301      	adds	r3, #1
 8006326:	f7fa fbcf 	bl	8000ac8 <HAL_DMA_Start_IT>
    break;
 800632a:	bf00      	nop
  }

  /* configure the DMA Burst Mode */
  htim->Instance->DCR = BurstBaseAddress | BurstLength;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68b9      	ldr	r1, [r7, #8]
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	430a      	orrs	r2, r1
 8006336:	649a      	str	r2, [r3, #72]	; 0x48

  /* Enable the TIM DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	6812      	ldr	r2, [r2, #0]
 8006340:	68d1      	ldr	r1, [r2, #12]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	430a      	orrs	r2, r1
 8006346:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	08006b4f 	.word	0x08006b4f
 8006360:	08006a4b 	.word	0x08006a4b
 8006364:	08006adf 	.word	0x08006adf
 8006368:	08008889 	.word	0x08008889
 800636c:	08006b73 	.word	0x08006b73

08006370 <HAL_TIM_DMABurst_ReadStop>:
  * @param  htim : TIM handle
  * @param  BurstRequestSrc : TIM DMA Request sources to disable.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch(BurstRequestSrc)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006380:	d028      	beq.n	80063d4 <HAL_TIM_DMABurst_ReadStop+0x64>
 8006382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006386:	d809      	bhi.n	800639c <HAL_TIM_DMABurst_ReadStop+0x2c>
 8006388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800638c:	d016      	beq.n	80063bc <HAL_TIM_DMABurst_ReadStop+0x4c>
 800638e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006392:	d019      	beq.n	80063c8 <HAL_TIM_DMABurst_ReadStop+0x58>
 8006394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006398:	d00a      	beq.n	80063b0 <HAL_TIM_DMABurst_ReadStop+0x40>
    {
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
    }
    break;
    default:
    break;
 800639a:	e033      	b.n	8006404 <HAL_TIM_DMABurst_ReadStop+0x94>
  switch(BurstRequestSrc)
 800639c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a0:	d024      	beq.n	80063ec <HAL_TIM_DMABurst_ReadStop+0x7c>
 80063a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063a6:	d027      	beq.n	80063f8 <HAL_TIM_DMABurst_ReadStop+0x88>
 80063a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ac:	d018      	beq.n	80063e0 <HAL_TIM_DMABurst_ReadStop+0x70>
    break;
 80063ae:	e029      	b.n	8006404 <HAL_TIM_DMABurst_ReadStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_UPDATE]);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7fa fbe6 	bl	8000b86 <HAL_DMA_Abort>
    break;
 80063ba:	e023      	b.n	8006404 <HAL_TIM_DMABurst_ReadStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC1]);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fa fbe0 	bl	8000b86 <HAL_DMA_Abort>
    break;
 80063c6:	e01d      	b.n	8006404 <HAL_TIM_DMABurst_ReadStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC2]);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7fa fbda 	bl	8000b86 <HAL_DMA_Abort>
    break;
 80063d2:	e017      	b.n	8006404 <HAL_TIM_DMABurst_ReadStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC3]);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d8:	4618      	mov	r0, r3
 80063da:	f7fa fbd4 	bl	8000b86 <HAL_DMA_Abort>
    break;
 80063de:	e011      	b.n	8006404 <HAL_TIM_DMABurst_ReadStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC4]);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fa fbce 	bl	8000b86 <HAL_DMA_Abort>
    break;
 80063ea:	e00b      	b.n	8006404 <HAL_TIM_DMABurst_ReadStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fa fbc8 	bl	8000b86 <HAL_DMA_Abort>
    break;
 80063f6:	e005      	b.n	8006404 <HAL_TIM_DMABurst_ReadStop+0x94>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7fa fbc2 	bl	8000b86 <HAL_DMA_Abort>
    break;
 8006402:	bf00      	nop
  }

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	6812      	ldr	r2, [r2, #0]
 800640c:	68d1      	ldr	r1, [r2, #12]
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	43d2      	mvns	r2, r2
 8006412:	400a      	ands	r2, r1
 8006414:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <HAL_TIM_GenerateEvent>:
  * @note TIM_EVENTSOURCE_COM and TIM_EVENTSOURCE_BREAK are used only with TIM1, TIM15, TIM16 and TIM17.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006430:	2b01      	cmp	r3, #1
 8006432:	d101      	bne.n	8006438 <HAL_TIM_GenerateEvent+0x18>
 8006434:	2302      	movs	r3, #2
 8006436:	e014      	b.n	8006462 <HAL_TIM_GenerateEvent+0x42>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	bc80      	pop	{r7}
 800646a:	4770      	bx	lr

0800646c <HAL_TIM_ConfigOCrefClear>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3
  *            @arg TIM_CHANNEL_4: TIM Channel 4
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim, TIM_ClearInputConfigTypeDef * sClearInputConfig, uint32_t Channel)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
  uint32_t tmpsmcr = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
  assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
  assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006482:	2b01      	cmp	r3, #1
 8006484:	d101      	bne.n	800648a <HAL_TIM_ConfigOCrefClear+0x1e>
 8006486:	2302      	movs	r3, #2
 8006488:	e0a4      	b.n	80065d4 <HAL_TIM_ConfigOCrefClear+0x168>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2202      	movs	r2, #2
 8006496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (sClearInputConfig->ClearInputSource)
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <HAL_TIM_ConfigOCrefClear+0x3c>
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d009      	beq.n	80064ba <HAL_TIM_ConfigOCrefClear+0x4e>
                        sClearInputConfig->ClearInputFilter);

    }
    break;
    default:
    break;
 80064a6:	e013      	b.n	80064d0 <HAL_TIM_ConfigOCrefClear+0x64>
      tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064ae:	617b      	str	r3, [r7, #20]
      htim->Instance->SMCR = tmpsmcr;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	609a      	str	r2, [r3, #8]
    break;
 80064b8:	e00a      	b.n	80064d0 <HAL_TIM_ConfigOCrefClear+0x64>
      TIM_ETR_SetConfig(htim->Instance,
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6818      	ldr	r0, [r3, #0]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	68d9      	ldr	r1, [r3, #12]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	689a      	ldr	r2, [r3, #8]
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f000 ff98 	bl	80073fe <TIM_ETR_SetConfig>
    break;
 80064ce:	bf00      	nop
  }

  switch (Channel)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b0c      	cmp	r3, #12
 80064d4:	d874      	bhi.n	80065c0 <HAL_TIM_ConfigOCrefClear+0x154>
 80064d6:	a201      	add	r2, pc, #4	; (adr r2, 80064dc <HAL_TIM_ConfigOCrefClear+0x70>)
 80064d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064dc:	08006511 	.word	0x08006511
 80064e0:	080065c1 	.word	0x080065c1
 80064e4:	080065c1 	.word	0x080065c1
 80064e8:	080065c1 	.word	0x080065c1
 80064ec:	0800653d 	.word	0x0800653d
 80064f0:	080065c1 	.word	0x080065c1
 80064f4:	080065c1 	.word	0x080065c1
 80064f8:	080065c1 	.word	0x080065c1
 80064fc:	08006569 	.word	0x08006569
 8006500:	080065c1 	.word	0x080065c1
 8006504:	080065c1 	.word	0x080065c1
 8006508:	080065c1 	.word	0x080065c1
 800650c:	08006595 	.word	0x08006595
  {
    case TIM_CHANNEL_1:
      {
        if(sClearInputConfig->ClearInputState != RESET)
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d008      	beq.n	800652a <HAL_TIM_ConfigOCrefClear+0xbe>
        {
          /* Enable the Ocref clear feature for Channel 1 */
          htim->Instance->CCMR1 |= TIM_CCMR1_OC1CE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	6812      	ldr	r2, [r2, #0]
 8006520:	6992      	ldr	r2, [r2, #24]
 8006522:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006526:	619a      	str	r2, [r3, #24]
        {
          /* Disable the Ocref clear feature for Channel 1 */
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1CE;
        }
      }
      break;
 8006528:	e04b      	b.n	80065c2 <HAL_TIM_ConfigOCrefClear+0x156>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1CE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	6812      	ldr	r2, [r2, #0]
 8006532:	6992      	ldr	r2, [r2, #24]
 8006534:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006538:	619a      	str	r2, [r3, #24]
      break;
 800653a:	e042      	b.n	80065c2 <HAL_TIM_ConfigOCrefClear+0x156>
    case TIM_CHANNEL_2:
      {
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        if(sClearInputConfig->ClearInputState != RESET)
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d008      	beq.n	8006556 <HAL_TIM_ConfigOCrefClear+0xea>
        {
          /* Enable the Ocref clear feature for Channel 2 */
          htim->Instance->CCMR1 |= TIM_CCMR1_OC2CE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	6812      	ldr	r2, [r2, #0]
 800654c:	6992      	ldr	r2, [r2, #24]
 800654e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006552:	619a      	str	r2, [r3, #24]
        {
          /* Disable the Ocref clear feature for Channel 2 */
          htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2CE;
        }
      }
    break;
 8006554:	e035      	b.n	80065c2 <HAL_TIM_ConfigOCrefClear+0x156>
          htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2CE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	6812      	ldr	r2, [r2, #0]
 800655e:	6992      	ldr	r2, [r2, #24]
 8006560:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006564:	619a      	str	r2, [r3, #24]
    break;
 8006566:	e02c      	b.n	80065c2 <HAL_TIM_ConfigOCrefClear+0x156>
    case TIM_CHANNEL_3:
      {
        assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
        if(sClearInputConfig->ClearInputState != RESET)
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d008      	beq.n	8006582 <HAL_TIM_ConfigOCrefClear+0x116>
        {
          /* Enable the Ocref clear feature for Channel 3 */
          htim->Instance->CCMR2 |= TIM_CCMR2_OC3CE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	6812      	ldr	r2, [r2, #0]
 8006578:	69d2      	ldr	r2, [r2, #28]
 800657a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800657e:	61da      	str	r2, [r3, #28]
        {
          /* Disable the Ocref clear feature for Channel 3 */
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3CE;
        }
      }
    break;
 8006580:	e01f      	b.n	80065c2 <HAL_TIM_ConfigOCrefClear+0x156>
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3CE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	6812      	ldr	r2, [r2, #0]
 800658a:	69d2      	ldr	r2, [r2, #28]
 800658c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006590:	61da      	str	r2, [r3, #28]
    break;
 8006592:	e016      	b.n	80065c2 <HAL_TIM_ConfigOCrefClear+0x156>
    case TIM_CHANNEL_4:
      {
        assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
        if(sClearInputConfig->ClearInputState != RESET)
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d008      	beq.n	80065ae <HAL_TIM_ConfigOCrefClear+0x142>
        {
          /* Enable the Ocref clear feature for Channel 4 */
          htim->Instance->CCMR2 |= TIM_CCMR2_OC4CE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	6812      	ldr	r2, [r2, #0]
 80065a4:	69d2      	ldr	r2, [r2, #28]
 80065a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065aa:	61da      	str	r2, [r3, #28]
        {
          /* Disable the Ocref clear feature for Channel 4 */
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4CE;
        }
      }
    break;
 80065ac:	e009      	b.n	80065c2 <HAL_TIM_ConfigOCrefClear+0x156>
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4CE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	6812      	ldr	r2, [r2, #0]
 80065b6:	69d2      	ldr	r2, [r2, #28]
 80065b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065bc:	61da      	str	r2, [r3, #28]
    break;
 80065be:	e000      	b.n	80065c2 <HAL_TIM_ConfigOCrefClear+0x156>
    default:
    break;
 80065c0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d101      	bne.n	80065f8 <HAL_TIM_ConfigClockSource+0x1c>
 80065f4:	2302      	movs	r3, #2
 80065f6:	e0c8      	b.n	800678a <HAL_TIM_ConfigClockSource+0x1ae>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006616:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800661e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b40      	cmp	r3, #64	; 0x40
 800662e:	d077      	beq.n	8006720 <HAL_TIM_ConfigClockSource+0x144>
 8006630:	2b40      	cmp	r3, #64	; 0x40
 8006632:	d80e      	bhi.n	8006652 <HAL_TIM_ConfigClockSource+0x76>
 8006634:	2b10      	cmp	r3, #16
 8006636:	f000 808a 	beq.w	800674e <HAL_TIM_ConfigClockSource+0x172>
 800663a:	2b10      	cmp	r3, #16
 800663c:	d802      	bhi.n	8006644 <HAL_TIM_ConfigClockSource+0x68>
 800663e:	2b00      	cmp	r3, #0
 8006640:	d07e      	beq.n	8006740 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8006642:	e099      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8006644:	2b20      	cmp	r3, #32
 8006646:	f000 8089 	beq.w	800675c <HAL_TIM_ConfigClockSource+0x180>
 800664a:	2b30      	cmp	r3, #48	; 0x30
 800664c:	f000 808d 	beq.w	800676a <HAL_TIM_ConfigClockSource+0x18e>
    break;
 8006650:	e092      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8006652:	2b70      	cmp	r3, #112	; 0x70
 8006654:	d016      	beq.n	8006684 <HAL_TIM_ConfigClockSource+0xa8>
 8006656:	2b70      	cmp	r3, #112	; 0x70
 8006658:	d804      	bhi.n	8006664 <HAL_TIM_ConfigClockSource+0x88>
 800665a:	2b50      	cmp	r3, #80	; 0x50
 800665c:	d040      	beq.n	80066e0 <HAL_TIM_ConfigClockSource+0x104>
 800665e:	2b60      	cmp	r3, #96	; 0x60
 8006660:	d04e      	beq.n	8006700 <HAL_TIM_ConfigClockSource+0x124>
    break;
 8006662:	e089      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8006664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006668:	d003      	beq.n	8006672 <HAL_TIM_ConfigClockSource+0x96>
 800666a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800666e:	d024      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0xde>
    break;
 8006670:	e082      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	6812      	ldr	r2, [r2, #0]
 800667a:	6892      	ldr	r2, [r2, #8]
 800667c:	f022 0207 	bic.w	r2, r2, #7
 8006680:	609a      	str	r2, [r3, #8]
    break;
 8006682:	e079      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6818      	ldr	r0, [r3, #0]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	6899      	ldr	r1, [r3, #8]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f000 feb3 	bl	80073fe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	609a      	str	r2, [r3, #8]
    break;
 80066b8:	e05e      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6818      	ldr	r0, [r3, #0]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	6899      	ldr	r1, [r3, #8]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f000 fe98 	bl	80073fe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	6812      	ldr	r2, [r2, #0]
 80066d6:	6892      	ldr	r2, [r2, #8]
 80066d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066dc:	609a      	str	r2, [r3, #8]
    break;
 80066de:	e04b      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6818      	ldr	r0, [r3, #0]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	6859      	ldr	r1, [r3, #4]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	461a      	mov	r2, r3
 80066ee:	f000 fd43 	bl	8007178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2150      	movs	r1, #80	; 0x50
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 fe61 	bl	80073c0 <TIM_ITRx_SetConfig>
    break;
 80066fe:	e03b      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6818      	ldr	r0, [r3, #0]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	6859      	ldr	r1, [r3, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	461a      	mov	r2, r3
 800670e:	f000 fda5 	bl	800725c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2160      	movs	r1, #96	; 0x60
 8006718:	4618      	mov	r0, r3
 800671a:	f000 fe51 	bl	80073c0 <TIM_ITRx_SetConfig>
    break;
 800671e:	e02b      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6818      	ldr	r0, [r3, #0]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	6859      	ldr	r1, [r3, #4]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	461a      	mov	r2, r3
 800672e:	f000 fd23 	bl	8007178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2140      	movs	r1, #64	; 0x40
 8006738:	4618      	mov	r0, r3
 800673a:	f000 fe41 	bl	80073c0 <TIM_ITRx_SetConfig>
    break;
 800673e:	e01b      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2100      	movs	r1, #0
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fe3a 	bl	80073c0 <TIM_ITRx_SetConfig>
    break;
 800674c:	e014      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2110      	movs	r1, #16
 8006754:	4618      	mov	r0, r3
 8006756:	f000 fe33 	bl	80073c0 <TIM_ITRx_SetConfig>
    break;
 800675a:	e00d      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2120      	movs	r1, #32
 8006762:	4618      	mov	r0, r3
 8006764:	f000 fe2c 	bl	80073c0 <TIM_ITRx_SetConfig>
    break;
 8006768:	e006      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2130      	movs	r1, #48	; 0x30
 8006770:	4618      	mov	r0, r3
 8006772:	f000 fe25 	bl	80073c0 <TIM_ITRx_SetConfig>
    break;
 8006776:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <HAL_TIM_ConfigTI1Input>:
  *            @arg TIM_TI1SELECTION_XORCOMBINATION: The TIMx_CH1, CH2 and CH3
  *            pins are connected to the TI1 input (XOR combination)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
{
 8006792:	b480      	push	{r7}
 8006794:	b085      	sub	sp, #20
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2 = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TI1SELECTION(TI1_Selection));

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Reset the TI1 selection */
  tmpcr2 &= ~TIM_CR2_TI1S;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Set the the TI1 selection */
  tmpcr2 |= TI1_Selection;
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMxCR2 */
  htim->Instance->CR2 = tmpcr2;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bc80      	pop	{r7}
 80067ca:	4770      	bx	lr

080067cc <HAL_TIM_SlaveConfigSynchronization>:
  *         timer input or external trigger input) and the ) and the Slave 
  *         mode (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d101      	bne.n	80067e4 <HAL_TIM_SlaveConfigSynchronization+0x18>
 80067e0:	2302      	movs	r3, #2
 80067e2:	e024      	b.n	800682e <HAL_TIM_SlaveConfigSynchronization+0x62>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 80067f4:	6839      	ldr	r1, [r7, #0]
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fbd4 	bl	8006fa4 <TIM_SlaveTimer_SetConfig>

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	6812      	ldr	r2, [r2, #0]
 8006804:	68d2      	ldr	r2, [r2, #12]
 8006806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800680a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	6812      	ldr	r2, [r2, #0]
 8006814:	68d2      	ldr	r2, [r2, #12]
 8006816:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800681a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
    }
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <HAL_TIM_SlaveConfigSynchronization_IT>:
  *         mode (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization_IT(TIM_HandleTypeDef *htim,
                                                        TIM_SlaveConfigTypeDef * sSlaveConfig)
    {
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]
      /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006846:	2b01      	cmp	r3, #1
 8006848:	d101      	bne.n	800684e <HAL_TIM_SlaveConfigSynchronization_IT+0x18>
 800684a:	2302      	movs	r3, #2
 800684c:	e024      	b.n	8006898 <HAL_TIM_SlaveConfigSynchronization_IT+0x62>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2202      	movs	r2, #2
 800685a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 800685e:	6839      	ldr	r1, [r7, #0]
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fb9f 	bl	8006fa4 <TIM_SlaveTimer_SetConfig>

  /* Enable Trigger Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	6812      	ldr	r2, [r2, #0]
 800686e:	68d2      	ldr	r2, [r2, #12]
 8006870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006874:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	6812      	ldr	r2, [r2, #0]
 800687e:	68d2      	ldr	r2, [r2, #12]
 8006880:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006884:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3 : TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4 : TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(htim);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d101      	bne.n	80068bc <HAL_TIM_ReadCapturedValue+0x1c>
 80068b8:	2302      	movs	r3, #2
 80068ba:	e03d      	b.n	8006938 <HAL_TIM_ReadCapturedValue+0x98>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	2b0c      	cmp	r3, #12
 80068c8:	d830      	bhi.n	800692c <HAL_TIM_ReadCapturedValue+0x8c>
 80068ca:	a201      	add	r2, pc, #4	; (adr r2, 80068d0 <HAL_TIM_ReadCapturedValue+0x30>)
 80068cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d0:	08006905 	.word	0x08006905
 80068d4:	0800692d 	.word	0x0800692d
 80068d8:	0800692d 	.word	0x0800692d
 80068dc:	0800692d 	.word	0x0800692d
 80068e0:	0800690f 	.word	0x0800690f
 80068e4:	0800692d 	.word	0x0800692d
 80068e8:	0800692d 	.word	0x0800692d
 80068ec:	0800692d 	.word	0x0800692d
 80068f0:	08006919 	.word	0x08006919
 80068f4:	0800692d 	.word	0x0800692d
 80068f8:	0800692d 	.word	0x0800692d
 80068fc:	0800692d 	.word	0x0800692d
 8006900:	08006923 	.word	0x08006923
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800690a:	60fb      	str	r3, [r7, #12]

      break;
 800690c:	e00f      	b.n	800692e <HAL_TIM_ReadCapturedValue+0x8e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006914:	60fb      	str	r3, [r7, #12]

      break;
 8006916:	e00a      	b.n	800692e <HAL_TIM_ReadCapturedValue+0x8e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691e:	60fb      	str	r3, [r7, #12]

      break;
 8006920:	e005      	b.n	800692e <HAL_TIM_ReadCapturedValue+0x8e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006928:	60fb      	str	r3, [r7, #12]

      break;
 800692a:	e000      	b.n	800692e <HAL_TIM_ReadCapturedValue+0x8e>
    }

  default:
    break;
 800692c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return tmpreg;
 8006936:	68fb      	ldr	r3, [r7, #12]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	bc80      	pop	{r7}
 8006940:	4770      	bx	lr
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006942:	b480      	push	{r7}
 8006944:	b083      	sub	sp, #12
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 800694a:	bf00      	nop
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	bc80      	pop	{r7}
 8006952:	4770      	bx	lr

08006954 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	bc80      	pop	{r7}
 8006964:	4770      	bx	lr
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800696e:	bf00      	nop
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	bc80      	pop	{r7}
 8006976:	4770      	bx	lr

08006978 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	bc80      	pop	{r7}
 8006988:	4770      	bx	lr

0800698a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800698a:	b480      	push	{r7}
 800698c:	b083      	sub	sp, #12
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006992:	bf00      	nop
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	bc80      	pop	{r7}
 800699a:	4770      	bx	lr

0800699c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bc80      	pop	{r7}
 80069ac:	4770      	bx	lr

080069ae <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base state
  * @param  htim : TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  return htim->State;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069bc:	b2db      	uxtb	r3, r3
}
 80069be:	4618      	mov	r0, r3
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bc80      	pop	{r7}
 80069c6:	4770      	bx	lr

080069c8 <HAL_TIM_OC_GetState>:
  * @brief  Return the TIM OC state
  * @param  htim : TIM Ouput Compare handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  return htim->State;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069d6:	b2db      	uxtb	r3, r3
}
 80069d8:	4618      	mov	r0, r3
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	bc80      	pop	{r7}
 80069e0:	4770      	bx	lr

080069e2 <HAL_TIM_PWM_GetState>:
  * @brief  Return the TIM PWM state
  * @param  htim : TIM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b083      	sub	sp, #12
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  return htim->State;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f0:	b2db      	uxtb	r3, r3
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bc80      	pop	{r7}
 80069fa:	4770      	bx	lr

080069fc <HAL_TIM_IC_GetState>:
  * @brief  Return the TIM Input Capture state
  * @param  htim : TIM IC handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_IC_GetState(TIM_HandleTypeDef *htim)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  return htim->State;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a0a:	b2db      	uxtb	r3, r3
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bc80      	pop	{r7}
 8006a14:	4770      	bx	lr

08006a16 <HAL_TIM_OnePulse_GetState>:
  * @brief  Return the TIM One Pulse Mode state
  * @param  htim : TIM OPM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(TIM_HandleTypeDef *htim)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b083      	sub	sp, #12
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  return htim->State;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a24:	b2db      	uxtb	r3, r3
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bc80      	pop	{r7}
 8006a2e:	4770      	bx	lr

08006a30 <HAL_TIM_Encoder_GetState>:
  * @brief  Return the TIM Encoder Mode state
  * @param  htim : TIM Encoder handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  return htim->State;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a3e:	b2db      	uxtb	r3, r3
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bc80      	pop	{r7}
 8006a48:	4770      	bx	lr

08006a4a <TIM_DMAError>:
  * @brief  TIM DMA error callback 
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b084      	sub	sp, #16
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a56:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  HAL_TIM_ErrorCallback(htim);
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f7ff ff9b 	bl	800699c <HAL_TIM_ErrorCallback>
}
 8006a66:	bf00      	nop
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b084      	sub	sp, #16
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d103      	bne.n	8006a96 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2201      	movs	r2, #1
 8006a92:	771a      	strb	r2, [r3, #28]
 8006a94:	e019      	b.n	8006aca <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d103      	bne.n	8006aa8 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	771a      	strb	r2, [r3, #28]
 8006aa6:	e010      	b.n	8006aca <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d103      	bne.n	8006aba <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2204      	movs	r2, #4
 8006ab6:	771a      	strb	r2, [r3, #28]
 8006ab8:	e007      	b.n	8006aca <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d102      	bne.n	8006aca <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2208      	movs	r2, #8
 8006ac8:	771a      	strb	r2, [r3, #28]
  }

  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f7ff ff54 	bl	8006978 <HAL_TIM_PWM_PulseFinishedCallback>

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	771a      	strb	r2, [r3, #28]
}
 8006ad6:	bf00      	nop
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b084      	sub	sp, #16
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d103      	bne.n	8006b06 <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2201      	movs	r2, #1
 8006b02:	771a      	strb	r2, [r3, #28]
 8006b04:	e019      	b.n	8006b3a <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d103      	bne.n	8006b18 <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2202      	movs	r2, #2
 8006b14:	771a      	strb	r2, [r3, #28]
 8006b16:	e010      	b.n	8006b3a <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d103      	bne.n	8006b2a <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2204      	movs	r2, #4
 8006b26:	771a      	strb	r2, [r3, #28]
 8006b28:	e007      	b.n	8006b3a <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d102      	bne.n	8006b3a <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2208      	movs	r2, #8
 8006b38:	771a      	strb	r2, [r3, #28]
  }

  HAL_TIM_IC_CaptureCallback(htim);
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f001 ffe0 	bl	8008b00 <HAL_TIM_IC_CaptureCallback>

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	771a      	strb	r2, [r3, #28]
}
 8006b46:	bf00      	nop
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <TIM_DMAPeriodElapsedCplt>:
  * @brief  TIM DMA Period Elapse complete callback.
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b084      	sub	sp, #16
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5a:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  HAL_TIM_PeriodElapsedCallback(htim);
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f001 ffe5 	bl	8008b34 <HAL_TIM_PeriodElapsedCallback>
}
 8006b6a:	bf00      	nop
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <TIM_DMATriggerCplt>:
  * @brief  TIM DMA Trigger callback.
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b084      	sub	sp, #16
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  HAL_TIM_TriggerCallback(htim);
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f7ff fefe 	bl	800698a <HAL_TIM_TriggerCallback>
}
 8006b8e:	bf00      	nop
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b085      	sub	sp, #20
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a2a      	ldr	r2, [pc, #168]	; (8006c58 <TIM_Base_SetConfig+0xc2>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d00b      	beq.n	8006bca <TIM_Base_SetConfig+0x34>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb8:	d007      	beq.n	8006bca <TIM_Base_SetConfig+0x34>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a27      	ldr	r2, [pc, #156]	; (8006c5c <TIM_Base_SetConfig+0xc6>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d003      	beq.n	8006bca <TIM_Base_SetConfig+0x34>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a26      	ldr	r2, [pc, #152]	; (8006c60 <TIM_Base_SetConfig+0xca>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d108      	bne.n	8006bdc <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a1e      	ldr	r2, [pc, #120]	; (8006c58 <TIM_Base_SetConfig+0xc2>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d00b      	beq.n	8006bfc <TIM_Base_SetConfig+0x66>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bea:	d007      	beq.n	8006bfc <TIM_Base_SetConfig+0x66>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a1b      	ldr	r2, [pc, #108]	; (8006c5c <TIM_Base_SetConfig+0xc6>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d003      	beq.n	8006bfc <TIM_Base_SetConfig+0x66>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a1a      	ldr	r2, [pc, #104]	; (8006c60 <TIM_Base_SetConfig+0xca>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d108      	bne.n	8006c0e <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c14:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	689a      	ldr	r2, [r3, #8]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a07      	ldr	r2, [pc, #28]	; (8006c58 <TIM_Base_SetConfig+0xc2>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d103      	bne.n	8006c46 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	691a      	ldr	r2, [r3, #16]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	615a      	str	r2, [r3, #20]
}
 8006c4c:	bf00      	nop
 8006c4e:	3714      	adds	r7, #20
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bc80      	pop	{r7}
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	40012c00 	.word	0x40012c00
 8006c5c:	40000400 	.word	0x40000400
 8006c60:	40000800 	.word	0x40000800

08006c64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	f023 0201 	bic.w	r2, r3, #1
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f023 0303 	bic.w	r3, r3, #3
 8006ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f023 0302 	bic.w	r3, r3, #2
 8006cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a1c      	ldr	r2, [pc, #112]	; (8006d38 <TIM_OC1_SetConfig+0xd4>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d10c      	bne.n	8006ce6 <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f023 0308 	bic.w	r3, r3, #8
 8006cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f023 0304 	bic.w	r3, r3, #4
 8006ce4:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a13      	ldr	r2, [pc, #76]	; (8006d38 <TIM_OC1_SetConfig+0xd4>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d111      	bne.n	8006d12 <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	621a      	str	r2, [r3, #32]
}
 8006d2c:	bf00      	nop
 8006d2e:	371c      	adds	r7, #28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bc80      	pop	{r7}
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	40012c00 	.word	0x40012c00

08006d3c <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	f023 0210 	bic.w	r2, r3, #16
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	021b      	lsls	r3, r3, #8
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f023 0320 	bic.w	r3, r3, #32
 8006d92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	011b      	lsls	r3, r3, #4
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a1d      	ldr	r2, [pc, #116]	; (8006e18 <TIM_OC2_SetConfig+0xdc>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d10d      	bne.n	8006dc4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	011b      	lsls	r3, r3, #4
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dc2:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a14      	ldr	r2, [pc, #80]	; (8006e18 <TIM_OC2_SetConfig+0xdc>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d113      	bne.n	8006df4 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	621a      	str	r2, [r3, #32]
}
 8006e0e:	bf00      	nop
 8006e10:	371c      	adds	r7, #28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bc80      	pop	{r7}
 8006e16:	4770      	bx	lr
 8006e18:	40012c00 	.word	0x40012c00

08006e1c <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 0303 	bic.w	r3, r3, #3
 8006e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	021b      	lsls	r3, r3, #8
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a1d      	ldr	r2, [pc, #116]	; (8006ef8 <TIM_OC3_SetConfig+0xdc>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d10d      	bne.n	8006ea2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	021b      	lsls	r3, r3, #8
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ea0:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a14      	ldr	r2, [pc, #80]	; (8006ef8 <TIM_OC3_SetConfig+0xdc>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d113      	bne.n	8006ed2 <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	011b      	lsls	r3, r3, #4
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	011b      	lsls	r3, r3, #4
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	621a      	str	r2, [r3, #32]
}
 8006eec:	bf00      	nop
 8006eee:	371c      	adds	r7, #28
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bc80      	pop	{r7}
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	40012c00 	.word	0x40012c00

08006efc <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f36:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f3e:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	021b      	lsls	r3, r3, #8
 8006f46:	693a      	ldr	r2, [r7, #16]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f52:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	031b      	lsls	r3, r3, #12
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a0f      	ldr	r2, [pc, #60]	; (8006fa0 <TIM_OC4_SetConfig+0xa4>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d109      	bne.n	8006f7c <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	695b      	ldr	r3, [r3, #20]
 8006f74:	019b      	lsls	r3, r3, #6
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	621a      	str	r2, [r3, #32]
}
 8006f96:	bf00      	nop
 8006f98:	371c      	adds	r7, #28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bc80      	pop	{r7}
 8006f9e:	4770      	bx	lr
 8006fa0:	40012c00 	.word	0x40012c00

08006fa4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig: The slave configuration structure
  * @retval None
  */
static void TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                              TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	f023 0307 	bic.w	r3, r3, #7
 8006fda:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	2b30      	cmp	r3, #48	; 0x30
 8006ff4:	d056      	beq.n	80070a4 <TIM_SlaveTimer_SetConfig+0x100>
 8006ff6:	2b30      	cmp	r3, #48	; 0x30
 8006ff8:	d806      	bhi.n	8007008 <TIM_SlaveTimer_SetConfig+0x64>
 8006ffa:	2b10      	cmp	r3, #16
 8006ffc:	d054      	beq.n	80070a8 <TIM_SlaveTimer_SetConfig+0x104>
 8006ffe:	2b20      	cmp	r3, #32
 8007000:	d054      	beq.n	80070ac <TIM_SlaveTimer_SetConfig+0x108>
 8007002:	2b00      	cmp	r3, #0
 8007004:	d054      	beq.n	80070b0 <TIM_SlaveTimer_SetConfig+0x10c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    }
    break;

  default:
    break;
 8007006:	e054      	b.n	80070b2 <TIM_SlaveTimer_SetConfig+0x10e>
  switch (sSlaveConfig->InputTrigger)
 8007008:	2b50      	cmp	r3, #80	; 0x50
 800700a:	d037      	beq.n	800707c <TIM_SlaveTimer_SetConfig+0xd8>
 800700c:	2b50      	cmp	r3, #80	; 0x50
 800700e:	d802      	bhi.n	8007016 <TIM_SlaveTimer_SetConfig+0x72>
 8007010:	2b40      	cmp	r3, #64	; 0x40
 8007012:	d010      	beq.n	8007036 <TIM_SlaveTimer_SetConfig+0x92>
    break;
 8007014:	e04d      	b.n	80070b2 <TIM_SlaveTimer_SetConfig+0x10e>
  switch (sSlaveConfig->InputTrigger)
 8007016:	2b60      	cmp	r3, #96	; 0x60
 8007018:	d03a      	beq.n	8007090 <TIM_SlaveTimer_SetConfig+0xec>
 800701a:	2b70      	cmp	r3, #112	; 0x70
 800701c:	d000      	beq.n	8007020 <TIM_SlaveTimer_SetConfig+0x7c>
    break;
 800701e:	e048      	b.n	80070b2 <TIM_SlaveTimer_SetConfig+0x10e>
      TIM_ETR_SetConfig(htim->Instance,
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6818      	ldr	r0, [r3, #0]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	68d9      	ldr	r1, [r3, #12]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	689a      	ldr	r2, [r3, #8]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	f000 f9e5 	bl	80073fe <TIM_ETR_SetConfig>
    break;
 8007034:	e03d      	b.n	80070b2 <TIM_SlaveTimer_SetConfig+0x10e>
      tmpccer = htim->Instance->CCER;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	6a1b      	ldr	r3, [r3, #32]
 800703c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	6812      	ldr	r2, [r2, #0]
 8007046:	6a12      	ldr	r2, [r2, #32]
 8007048:	f022 0201 	bic.w	r2, r2, #1
 800704c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	613b      	str	r3, [r7, #16]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800705c:	613b      	str	r3, [r7, #16]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	011b      	lsls	r3, r3, #4
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	4313      	orrs	r3, r2
 8007068:	613b      	str	r3, [r7, #16]
      htim->Instance->CCMR1 = tmpccmr1;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	621a      	str	r2, [r3, #32]
    break;
 800707a:	e01a      	b.n	80070b2 <TIM_SlaveTimer_SetConfig+0x10e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6818      	ldr	r0, [r3, #0]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	6899      	ldr	r1, [r3, #8]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	461a      	mov	r2, r3
 800708a:	f000 f875 	bl	8007178 <TIM_TI1_ConfigInputStage>
    break;
 800708e:	e010      	b.n	80070b2 <TIM_SlaveTimer_SetConfig+0x10e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6818      	ldr	r0, [r3, #0]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	6899      	ldr	r1, [r3, #8]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	461a      	mov	r2, r3
 800709e:	f000 f8dd 	bl	800725c <TIM_TI2_ConfigInputStage>
    break;
 80070a2:	e006      	b.n	80070b2 <TIM_SlaveTimer_SetConfig+0x10e>
    break;
 80070a4:	bf00      	nop
 80070a6:	e004      	b.n	80070b2 <TIM_SlaveTimer_SetConfig+0x10e>
    break;
 80070a8:	bf00      	nop
 80070aa:	e002      	b.n	80070b2 <TIM_SlaveTimer_SetConfig+0x10e>
    break;
 80070ac:	bf00      	nop
 80070ae:	e000      	b.n	80070b2 <TIM_SlaveTimer_SetConfig+0x10e>
    break;
 80070b0:	bf00      	nop
  }
}
 80070b2:	bf00      	nop
 80070b4:	3718      	adds	r7, #24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b087      	sub	sp, #28
 80070be:	af00      	add	r7, sp, #0
 80070c0:	60f8      	str	r0, [r7, #12]
 80070c2:	60b9      	str	r1, [r7, #8]
 80070c4:	607a      	str	r2, [r7, #4]
 80070c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	f023 0201 	bic.w	r2, r3, #1
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4a20      	ldr	r2, [pc, #128]	; (800716c <TIM_TI1_SetConfig+0xb2>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d00b      	beq.n	8007108 <TIM_TI1_SetConfig+0x4e>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f6:	d007      	beq.n	8007108 <TIM_TI1_SetConfig+0x4e>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	4a1d      	ldr	r2, [pc, #116]	; (8007170 <TIM_TI1_SetConfig+0xb6>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d003      	beq.n	8007108 <TIM_TI1_SetConfig+0x4e>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4a1c      	ldr	r2, [pc, #112]	; (8007174 <TIM_TI1_SetConfig+0xba>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d101      	bne.n	800710c <TIM_TI1_SetConfig+0x52>
 8007108:	2301      	movs	r3, #1
 800710a:	e000      	b.n	800710e <TIM_TI1_SetConfig+0x54>
 800710c:	2300      	movs	r3, #0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d008      	beq.n	8007124 <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f023 0303 	bic.w	r3, r3, #3
 8007118:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4313      	orrs	r3, r2
 8007120:	617b      	str	r3, [r7, #20]
 8007122:	e003      	b.n	800712c <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	f043 0301 	orr.w	r3, r3, #1
 800712a:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007132:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	011b      	lsls	r3, r3, #4
 8007138:	b2db      	uxtb	r3, r3
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	4313      	orrs	r3, r2
 800713e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f023 030a 	bic.w	r3, r3, #10
 8007146:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f003 030a 	and.w	r3, r3, #10
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	4313      	orrs	r3, r2
 8007152:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	621a      	str	r2, [r3, #32]
}
 8007160:	bf00      	nop
 8007162:	371c      	adds	r7, #28
 8007164:	46bd      	mov	sp, r7
 8007166:	bc80      	pop	{r7}
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40012c00 	.word	0x40012c00
 8007170:	40000400 	.word	0x40000400
 8007174:	40000800 	.word	0x40000800

08007178 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007178:	b480      	push	{r7}
 800717a:	b087      	sub	sp, #28
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8007184:	2300      	movs	r3, #0
 8007186:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8007188:	2300      	movs	r3, #0
 800718a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6a1b      	ldr	r3, [r3, #32]
 8007190:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	f023 0201 	bic.w	r2, r3, #1
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	011b      	lsls	r3, r3, #4
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f023 030a 	bic.w	r3, r3, #10
 80071bc:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	621a      	str	r2, [r3, #32]
}
 80071d2:	bf00      	nop
 80071d4:	371c      	adds	r7, #28
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bc80      	pop	{r7}
 80071da:	4770      	bx	lr

080071dc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
 80071e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 80071ea:	2300      	movs	r3, #0
 80071ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80071ee:	2300      	movs	r3, #0
 80071f0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	f023 0210 	bic.w	r2, r3, #16
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6a1b      	ldr	r3, [r3, #32]
 8007208:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007210:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	021b      	lsls	r3, r3, #8
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	4313      	orrs	r3, r2
 800721a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007222:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	031b      	lsls	r3, r3, #12
 8007228:	b29b      	uxth	r3, r3
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	4313      	orrs	r3, r2
 800722e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007236:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	011b      	lsls	r3, r3, #4
 800723c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	4313      	orrs	r3, r2
 8007244:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	697a      	ldr	r2, [r7, #20]
 800724a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	693a      	ldr	r2, [r7, #16]
 8007250:	621a      	str	r2, [r3, #32]
}
 8007252:	bf00      	nop
 8007254:	371c      	adds	r7, #28
 8007256:	46bd      	mov	sp, r7
 8007258:	bc80      	pop	{r7}
 800725a:	4770      	bx	lr

0800725c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	f023 0210 	bic.w	r2, r3, #16
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800728e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	031b      	lsls	r3, r3, #12
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	4313      	orrs	r3, r2
 8007298:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	011b      	lsls	r3, r3, #4
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	621a      	str	r2, [r3, #32]
}
 80072b8:	bf00      	nop
 80072ba:	371c      	adds	r7, #28
 80072bc:	46bd      	mov	sp, r7
 80072be:	bc80      	pop	{r7}
 80072c0:	4770      	bx	lr

080072c2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b087      	sub	sp, #28
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	60f8      	str	r0, [r7, #12]
 80072ca:	60b9      	str	r1, [r7, #8]
 80072cc:	607a      	str	r2, [r7, #4]
 80072ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 80072d0:	2300      	movs	r3, #0
 80072d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80072d4:	2300      	movs	r3, #0
 80072d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6a1b      	ldr	r3, [r3, #32]
 80072dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	f023 0303 	bic.w	r3, r3, #3
 80072f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007306:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	011b      	lsls	r3, r3, #4
 800730c:	b2db      	uxtb	r3, r3
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	4313      	orrs	r3, r2
 8007312:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800731a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	021b      	lsls	r3, r3, #8
 8007320:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	4313      	orrs	r3, r2
 8007328:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	621a      	str	r2, [r3, #32]
}
 8007336:	bf00      	nop
 8007338:	371c      	adds	r7, #28
 800733a:	46bd      	mov	sp, r7
 800733c:	bc80      	pop	{r7}
 800733e:	4770      	bx	lr

08007340 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800734e:	2300      	movs	r3, #0
 8007350:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8007352:	2300      	movs	r3, #0
 8007354:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	69db      	ldr	r3, [r3, #28]
 8007366:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007374:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	021b      	lsls	r3, r3, #8
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	4313      	orrs	r3, r2
 800737e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007386:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	031b      	lsls	r3, r3, #12
 800738c:	b29b      	uxth	r3, r3
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	4313      	orrs	r3, r2
 8007392:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~TIM_CCER_CC4P;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800739a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	031b      	lsls	r3, r3, #12
 80073a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	621a      	str	r2, [r3, #32]
}
 80073b6:	bf00      	nop
 80073b8:	371c      	adds	r7, #28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bc80      	pop	{r7}
 80073be:	4770      	bx	lr

080073c0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	460b      	mov	r3, r1
 80073ca:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073dc:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80073de:	887b      	ldrh	r3, [r7, #2]
 80073e0:	f043 0307 	orr.w	r3, r3, #7
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	461a      	mov	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	609a      	str	r2, [r3, #8]
}
 80073f4:	bf00      	nop
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bc80      	pop	{r7}
 80073fc:	4770      	bx	lr

080073fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073fe:	b480      	push	{r7}
 8007400:	b087      	sub	sp, #28
 8007402:	af00      	add	r7, sp, #0
 8007404:	60f8      	str	r0, [r7, #12]
 8007406:	60b9      	str	r1, [r7, #8]
 8007408:	607a      	str	r2, [r7, #4]
 800740a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800740c:	2300      	movs	r3, #0
 800740e:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800741c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	021a      	lsls	r2, r3, #8
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	431a      	orrs	r2, r3
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	4313      	orrs	r3, r2
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	4313      	orrs	r3, r2
 800742e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	609a      	str	r2, [r3, #8]
}
 8007436:	bf00      	nop
 8007438:	371c      	adds	r7, #28
 800743a:	46bd      	mov	sp, r7
 800743c:	bc80      	pop	{r7}
 800743e:	4770      	bx	lr

08007440 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007440:	b480      	push	{r7}
 8007442:	b087      	sub	sp, #28
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8007450:	2201      	movs	r2, #1
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	fa02 f303 	lsl.w	r3, r2, r3
 8007458:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6a1a      	ldr	r2, [r3, #32]
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	43db      	mvns	r3, r3
 8007462:	401a      	ands	r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6a1a      	ldr	r2, [r3, #32]
 800746c:	6879      	ldr	r1, [r7, #4]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	fa01 f303 	lsl.w	r3, r1, r3
 8007474:	431a      	orrs	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	621a      	str	r2, [r3, #32]
}
 800747a:	bf00      	nop
 800747c:	371c      	adds	r7, #28
 800747e:	46bd      	mov	sp, r7
 8007480:	bc80      	pop	{r7}
 8007482:	4770      	bx	lr

08007484 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim : TIM Encoder Interface handle
  * @param  sConfig : TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef* sConfig)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b08a      	sub	sp, #40	; 0x28
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if(htim == NULL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e086      	b.n	80075a6 <HAL_TIMEx_HallSensor_Init+0x122>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d106      	bne.n	80074b2 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f8ae 	bl	800760e <HAL_TIMEx_HallSensor_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2202      	movs	r2, #2
 80074b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3304      	adds	r3, #4
 80074c2:	4619      	mov	r1, r3
 80074c4:	4610      	mov	r0, r2
 80074c6:	f7ff fb66 	bl	8006b96 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6818      	ldr	r0, [r3, #0]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	6819      	ldr	r1, [r3, #0]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	2203      	movs	r2, #3
 80074d8:	f7ff fdef 	bl	80070ba <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	6812      	ldr	r2, [r2, #0]
 80074e4:	6992      	ldr	r2, [r2, #24]
 80074e6:	f022 020c 	bic.w	r2, r2, #12
 80074ea:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	6812      	ldr	r2, [r2, #0]
 80074f4:	6991      	ldr	r1, [r2, #24]
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	6852      	ldr	r2, [r2, #4]
 80074fa:	430a      	orrs	r2, r1
 80074fc:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	6812      	ldr	r2, [r2, #0]
 8007506:	6852      	ldr	r2, [r2, #4]
 8007508:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800750c:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	6812      	ldr	r2, [r2, #0]
 8007516:	6892      	ldr	r2, [r2, #8]
 8007518:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800751c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	6812      	ldr	r2, [r2, #0]
 8007526:	6892      	ldr	r2, [r2, #8]
 8007528:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800752c:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	6812      	ldr	r2, [r2, #0]
 8007536:	6892      	ldr	r2, [r2, #8]
 8007538:	f022 0207 	bic.w	r2, r2, #7
 800753c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	6812      	ldr	r2, [r2, #0]
 8007546:	6892      	ldr	r2, [r2, #8]
 8007548:	f042 0204 	orr.w	r2, r2, #4
 800754c:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800754e:	2300      	movs	r3, #0
 8007550:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007552:	2300      	movs	r3, #0
 8007554:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8007556:	2370      	movs	r3, #112	; 0x70
 8007558:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800755a:	2300      	movs	r3, #0
 800755c:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800755e:	2300      	movs	r3, #0
 8007560:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007562:	2300      	movs	r3, #0
 8007564:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f107 020c 	add.w	r2, r7, #12
 8007574:	4611      	mov	r1, r2
 8007576:	4618      	mov	r0, r3
 8007578:	f7ff fbe0 	bl	8006d3c <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	6812      	ldr	r2, [r2, #0]
 8007584:	6852      	ldr	r2, [r2, #4]
 8007586:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800758a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	6812      	ldr	r2, [r2, #0]
 8007594:	6852      	ldr	r2, [r2, #4]
 8007596:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800759a:	605a      	str	r2, [r3, #4]

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3728      	adds	r7, #40	; 0x28
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <HAL_TIMEx_HallSensor_DeInit>:
  * @brief  DeInitializes the TIM Hall Sensor interface
  * @param  htim : TIM Hall Sensor handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b082      	sub	sp, #8
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2202      	movs	r2, #2
 80075ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6a1a      	ldr	r2, [r3, #32]
 80075c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80075c8:	4013      	ands	r3, r2
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10f      	bne.n	80075ee <HAL_TIMEx_HallSensor_DeInit+0x40>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6a1a      	ldr	r2, [r3, #32]
 80075d4:	f240 4344 	movw	r3, #1092	; 0x444
 80075d8:	4013      	ands	r3, r2
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d107      	bne.n	80075ee <HAL_TIMEx_HallSensor_DeInit+0x40>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	6812      	ldr	r2, [r2, #0]
 80075e6:	6812      	ldr	r2, [r2, #0]
 80075e8:	f022 0201 	bic.w	r2, r2, #1
 80075ec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIMEx_HallSensor_MspDeInit(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f816 	bl	8007620 <HAL_TIMEx_HallSensor_MspDeInit>

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8007616:	bf00      	nop
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	bc80      	pop	{r7}
 800761e:	4770      	bx	lr

08007620 <HAL_TIMEx_HallSensor_MspDeInit>:
  * @brief  DeInitializes TIM Hall Sensor MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	bc80      	pop	{r7}
 8007630:	4770      	bx	lr

08007632 <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim : TIM Hall Sensor handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b082      	sub	sp, #8
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));

  /* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2201      	movs	r2, #1
 8007640:	2100      	movs	r1, #0
 8007642:	4618      	mov	r0, r3
 8007644:	f7ff fefc 	bl	8007440 <TIM_CCxChannelCmd>

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	6812      	ldr	r2, [r2, #0]
 8007650:	6812      	ldr	r2, [r2, #0]
 8007652:	f042 0201 	orr.w	r2, r2, #1
 8007656:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <HAL_TIMEx_HallSensor_Stop>:
  * @brief  Stops the TIM Hall sensor Interface.
  * @param  htim : TIM Hall Sensor handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b082      	sub	sp, #8
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel 1
    (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2200      	movs	r2, #0
 8007670:	2100      	movs	r1, #0
 8007672:	4618      	mov	r0, r3
 8007674:	f7ff fee4 	bl	8007440 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6a1a      	ldr	r2, [r3, #32]
 800767e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007682:	4013      	ands	r3, r2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10f      	bne.n	80076a8 <HAL_TIMEx_HallSensor_Stop+0x46>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6a1a      	ldr	r2, [r3, #32]
 800768e:	f240 4344 	movw	r3, #1092	; 0x444
 8007692:	4013      	ands	r3, r2
 8007694:	2b00      	cmp	r3, #0
 8007696:	d107      	bne.n	80076a8 <HAL_TIMEx_HallSensor_Stop+0x46>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	6812      	ldr	r2, [r2, #0]
 80076a0:	6812      	ldr	r2, [r2, #0]
 80076a2:	f022 0201 	bic.w	r2, r2, #1
 80076a6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim : TIM Hall Sensor handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b082      	sub	sp, #8
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	6812      	ldr	r2, [r2, #0]
 80076c2:	68d2      	ldr	r2, [r2, #12]
 80076c4:	f042 0202 	orr.w	r2, r2, #2
 80076c8:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2201      	movs	r2, #1
 80076d0:	2100      	movs	r1, #0
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7ff feb4 	bl	8007440 <TIM_CCxChannelCmd>

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	6812      	ldr	r2, [r2, #0]
 80076e0:	6812      	ldr	r2, [r2, #0]
 80076e2:	f042 0201 	orr.w	r2, r2, #1
 80076e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <HAL_TIMEx_HallSensor_Stop_IT>:
  * @brief  Stops the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b082      	sub	sp, #8
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel 1
    (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2200      	movs	r2, #0
 8007700:	2100      	movs	r1, #0
 8007702:	4618      	mov	r0, r3
 8007704:	f7ff fe9c 	bl	8007440 <TIM_CCxChannelCmd>

  /* Disable the capture compare Interrupts event */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	6812      	ldr	r2, [r2, #0]
 8007710:	68d2      	ldr	r2, [r2, #12]
 8007712:	f022 0202 	bic.w	r2, r2, #2
 8007716:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6a1a      	ldr	r2, [r3, #32]
 800771e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007722:	4013      	ands	r3, r2
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10f      	bne.n	8007748 <HAL_TIMEx_HallSensor_Stop_IT+0x56>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6a1a      	ldr	r2, [r3, #32]
 800772e:	f240 4344 	movw	r3, #1092	; 0x444
 8007732:	4013      	ands	r3, r2
 8007734:	2b00      	cmp	r3, #0
 8007736:	d107      	bne.n	8007748 <HAL_TIMEx_HallSensor_Stop_IT+0x56>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	6812      	ldr	r2, [r2, #0]
 8007740:	6812      	ldr	r2, [r2, #0]
 8007742:	f022 0201 	bic.w	r2, r2, #1
 8007746:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <HAL_TIMEx_HallSensor_Start_DMA>:
  * @param  pData : The destination Buffer address.
  * @param  Length : The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b084      	sub	sp, #16
 8007756:	af00      	add	r7, sp, #0
 8007758:	60f8      	str	r0, [r7, #12]
 800775a:	60b9      	str	r1, [r7, #8]
 800775c:	4613      	mov	r3, r2
 800775e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));

   if((htim->State == HAL_TIM_STATE_BUSY))
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b02      	cmp	r3, #2
 800776a:	d101      	bne.n	8007770 <HAL_TIMEx_HallSensor_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 800776c:	2302      	movs	r3, #2
 800776e:	e03b      	b.n	80077e8 <HAL_TIMEx_HallSensor_Start_DMA+0x96>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b01      	cmp	r3, #1
 800777a:	d10b      	bne.n	8007794 <HAL_TIMEx_HallSensor_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0U) && (Length > 0U))
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d104      	bne.n	800778c <HAL_TIMEx_HallSensor_Start_DMA+0x3a>
 8007782:	88fb      	ldrh	r3, [r7, #6]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d001      	beq.n	800778c <HAL_TIMEx_HallSensor_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e02d      	b.n	80077e8 <HAL_TIMEx_HallSensor_Start_DMA+0x96>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2202      	movs	r2, #2
 8007790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
  }
  /* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2201      	movs	r2, #1
 800779a:	2100      	movs	r1, #0
 800779c:	4618      	mov	r0, r3
 800779e:	f7ff fe4f 	bl	8007440 <TIM_CCxChannelCmd>

  /* Set the DMA Input Capture 1 Callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a6:	4a12      	ldr	r2, [pc, #72]	; (80077f0 <HAL_TIMEx_HallSensor_Start_DMA+0x9e>)
 80077a8:	629a      	str	r2, [r3, #40]	; 0x28
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	4a11      	ldr	r2, [pc, #68]	; (80077f4 <HAL_TIMEx_HallSensor_Start_DMA+0xa2>)
 80077b0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the DMA channel for Capture 1*/
  HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	3334      	adds	r3, #52	; 0x34
 80077bc:	4619      	mov	r1, r3
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	88fb      	ldrh	r3, [r7, #6]
 80077c2:	f7f9 f981 	bl	8000ac8 <HAL_DMA_Start_IT>

  /* Enable the capture compare 1 Interrupt */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	6812      	ldr	r2, [r2, #0]
 80077ce:	68d2      	ldr	r2, [r2, #12]
 80077d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	6812      	ldr	r2, [r2, #0]
 80077de:	6812      	ldr	r2, [r2, #0]
 80077e0:	f042 0201 	orr.w	r2, r2, #1
 80077e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	08006adf 	.word	0x08006adf
 80077f4:	08006a4b 	.word	0x08006a4b

080077f8 <HAL_TIMEx_HallSensor_Stop_DMA>:
  * @brief  Stops the TIM Hall Sensor Interface in DMA mode.
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel 1
    (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2200      	movs	r2, #0
 8007806:	2100      	movs	r1, #0
 8007808:	4618      	mov	r0, r3
 800780a:	f7ff fe19 	bl	8007440 <TIM_CCxChannelCmd>


  /* Disable the capture compare Interrupts 1 event */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	6812      	ldr	r2, [r2, #0]
 8007816:	68d2      	ldr	r2, [r2, #12]
 8007818:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800781c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	6a1a      	ldr	r2, [r3, #32]
 8007824:	f241 1311 	movw	r3, #4369	; 0x1111
 8007828:	4013      	ands	r3, r2
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10f      	bne.n	800784e <HAL_TIMEx_HallSensor_Stop_DMA+0x56>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6a1a      	ldr	r2, [r3, #32]
 8007834:	f240 4344 	movw	r3, #1092	; 0x444
 8007838:	4013      	ands	r3, r2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d107      	bne.n	800784e <HAL_TIMEx_HallSensor_Stop_DMA+0x56>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	6812      	ldr	r2, [r2, #0]
 8007846:	6812      	ldr	r2, [r2, #0]
 8007848:	f022 0201 	bic.w	r2, r2, #1
 800784c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2204      	movs	r2, #4
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	4618      	mov	r0, r3
 800786c:	f001 f82b 	bl	80088c6 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	6812      	ldr	r2, [r2, #0]
 8007878:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800787a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800787e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	6812      	ldr	r2, [r2, #0]
 8007888:	6812      	ldr	r2, [r2, #0]
 800788a:	f042 0201 	orr.w	r2, r2, #1
 800788e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <HAL_TIMEx_OCN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b082      	sub	sp, #8
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2200      	movs	r2, #0
 80078aa:	6839      	ldr	r1, [r7, #0]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f001 f80a 	bl	80088c6 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
  __HAL_TIM_MOE_DISABLE(htim);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6a1a      	ldr	r2, [r3, #32]
 80078b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80078bc:	4013      	ands	r3, r2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10f      	bne.n	80078e2 <HAL_TIMEx_OCN_Stop+0x48>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	6a1a      	ldr	r2, [r3, #32]
 80078c8:	f240 4344 	movw	r3, #1092	; 0x444
 80078cc:	4013      	ands	r3, r2
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d107      	bne.n	80078e2 <HAL_TIMEx_OCN_Stop+0x48>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	6812      	ldr	r2, [r2, #0]
 80078da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80078dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80078e0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6a1a      	ldr	r2, [r3, #32]
 80078e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80078ec:	4013      	ands	r3, r2
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10f      	bne.n	8007912 <HAL_TIMEx_OCN_Stop+0x78>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6a1a      	ldr	r2, [r3, #32]
 80078f8:	f240 4344 	movw	r3, #1092	; 0x444
 80078fc:	4013      	ands	r3, r2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d107      	bne.n	8007912 <HAL_TIMEx_OCN_Stop+0x78>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	6812      	ldr	r2, [r2, #0]
 800790a:	6812      	ldr	r2, [r2, #0]
 800790c:	f022 0201 	bic.w	r2, r2, #1
 8007910:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b0c      	cmp	r3, #12
 800792a:	d841      	bhi.n	80079b0 <HAL_TIMEx_OCN_Start_IT+0x94>
 800792c:	a201      	add	r2, pc, #4	; (adr r2, 8007934 <HAL_TIMEx_OCN_Start_IT+0x18>)
 800792e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007932:	bf00      	nop
 8007934:	08007969 	.word	0x08007969
 8007938:	080079b1 	.word	0x080079b1
 800793c:	080079b1 	.word	0x080079b1
 8007940:	080079b1 	.word	0x080079b1
 8007944:	0800797b 	.word	0x0800797b
 8007948:	080079b1 	.word	0x080079b1
 800794c:	080079b1 	.word	0x080079b1
 8007950:	080079b1 	.word	0x080079b1
 8007954:	0800798d 	.word	0x0800798d
 8007958:	080079b1 	.word	0x080079b1
 800795c:	080079b1 	.word	0x080079b1
 8007960:	080079b1 	.word	0x080079b1
 8007964:	0800799f 	.word	0x0800799f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	6812      	ldr	r2, [r2, #0]
 8007970:	68d2      	ldr	r2, [r2, #12]
 8007972:	f042 0202 	orr.w	r2, r2, #2
 8007976:	60da      	str	r2, [r3, #12]
    }
    break;
 8007978:	e01b      	b.n	80079b2 <HAL_TIMEx_OCN_Start_IT+0x96>

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	6812      	ldr	r2, [r2, #0]
 8007982:	68d2      	ldr	r2, [r2, #12]
 8007984:	f042 0204 	orr.w	r2, r2, #4
 8007988:	60da      	str	r2, [r3, #12]
    }
    break;
 800798a:	e012      	b.n	80079b2 <HAL_TIMEx_OCN_Start_IT+0x96>

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	6812      	ldr	r2, [r2, #0]
 8007994:	68d2      	ldr	r2, [r2, #12]
 8007996:	f042 0208 	orr.w	r2, r2, #8
 800799a:	60da      	str	r2, [r3, #12]
    }
    break;
 800799c:	e009      	b.n	80079b2 <HAL_TIMEx_OCN_Start_IT+0x96>

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	6812      	ldr	r2, [r2, #0]
 80079a6:	68d2      	ldr	r2, [r2, #12]
 80079a8:	f042 0210 	orr.w	r2, r2, #16
 80079ac:	60da      	str	r2, [r3, #12]
    }
    break;
 80079ae:	e000      	b.n	80079b2 <HAL_TIMEx_OCN_Start_IT+0x96>

    default:
    break;
 80079b0:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	6812      	ldr	r2, [r2, #0]
 80079ba:	68d2      	ldr	r2, [r2, #12]
 80079bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80079c0:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2204      	movs	r2, #4
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 ff7b 	bl	80088c6 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	6812      	ldr	r2, [r2, #0]
 80079d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80079da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	6812      	ldr	r2, [r2, #0]
 80079e8:	6812      	ldr	r2, [r2, #0]
 80079ea:	f042 0201 	orr.w	r2, r2, #1
 80079ee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b084      	sub	sp, #16
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2b0c      	cmp	r3, #12
 8007a0c:	d840      	bhi.n	8007a90 <HAL_TIMEx_OCN_Stop_IT+0x96>
 8007a0e:	a201      	add	r2, pc, #4	; (adr r2, 8007a14 <HAL_TIMEx_OCN_Stop_IT+0x1a>)
 8007a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a14:	08007a49 	.word	0x08007a49
 8007a18:	08007a91 	.word	0x08007a91
 8007a1c:	08007a91 	.word	0x08007a91
 8007a20:	08007a91 	.word	0x08007a91
 8007a24:	08007a5b 	.word	0x08007a5b
 8007a28:	08007a91 	.word	0x08007a91
 8007a2c:	08007a91 	.word	0x08007a91
 8007a30:	08007a91 	.word	0x08007a91
 8007a34:	08007a6d 	.word	0x08007a6d
 8007a38:	08007a91 	.word	0x08007a91
 8007a3c:	08007a91 	.word	0x08007a91
 8007a40:	08007a91 	.word	0x08007a91
 8007a44:	08007a7f 	.word	0x08007a7f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	6812      	ldr	r2, [r2, #0]
 8007a50:	68d2      	ldr	r2, [r2, #12]
 8007a52:	f022 0202 	bic.w	r2, r2, #2
 8007a56:	60da      	str	r2, [r3, #12]
    }
    break;
 8007a58:	e01b      	b.n	8007a92 <HAL_TIMEx_OCN_Stop_IT+0x98>

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	6812      	ldr	r2, [r2, #0]
 8007a62:	68d2      	ldr	r2, [r2, #12]
 8007a64:	f022 0204 	bic.w	r2, r2, #4
 8007a68:	60da      	str	r2, [r3, #12]
    }
    break;
 8007a6a:	e012      	b.n	8007a92 <HAL_TIMEx_OCN_Stop_IT+0x98>

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	6812      	ldr	r2, [r2, #0]
 8007a74:	68d2      	ldr	r2, [r2, #12]
 8007a76:	f022 0208 	bic.w	r2, r2, #8
 8007a7a:	60da      	str	r2, [r3, #12]
    }
    break;
 8007a7c:	e009      	b.n	8007a92 <HAL_TIMEx_OCN_Stop_IT+0x98>

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	6812      	ldr	r2, [r2, #0]
 8007a86:	68d2      	ldr	r2, [r2, #12]
 8007a88:	f022 0210 	bic.w	r2, r2, #16
 8007a8c:	60da      	str	r2, [r3, #12]
    }
    break;
 8007a8e:	e000      	b.n	8007a92 <HAL_TIMEx_OCN_Stop_IT+0x98>

    default:
    break;
 8007a90:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2200      	movs	r2, #0
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 ff13 	bl	80088c6 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	f240 4344 	movw	r3, #1092	; 0x444
 8007aae:	4013      	ands	r3, r2
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d107      	bne.n	8007ac4 <HAL_TIMEx_OCN_Stop_IT+0xca>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	6812      	ldr	r2, [r2, #0]
 8007abc:	68d2      	ldr	r2, [r2, #12]
 8007abe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ac2:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Ouput */
  __HAL_TIM_MOE_DISABLE(htim);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6a1a      	ldr	r2, [r3, #32]
 8007aca:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ace:	4013      	ands	r3, r2
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10f      	bne.n	8007af4 <HAL_TIMEx_OCN_Stop_IT+0xfa>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6a1a      	ldr	r2, [r3, #32]
 8007ada:	f240 4344 	movw	r3, #1092	; 0x444
 8007ade:	4013      	ands	r3, r2
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d107      	bne.n	8007af4 <HAL_TIMEx_OCN_Stop_IT+0xfa>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	6812      	ldr	r2, [r2, #0]
 8007aec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007aee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007af2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6a1a      	ldr	r2, [r3, #32]
 8007afa:	f241 1311 	movw	r3, #4369	; 0x1111
 8007afe:	4013      	ands	r3, r2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10f      	bne.n	8007b24 <HAL_TIMEx_OCN_Stop_IT+0x12a>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6a1a      	ldr	r2, [r3, #32]
 8007b0a:	f240 4344 	movw	r3, #1092	; 0x444
 8007b0e:	4013      	ands	r3, r2
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d107      	bne.n	8007b24 <HAL_TIMEx_OCN_Stop_IT+0x12a>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	6812      	ldr	r2, [r2, #0]
 8007b1c:	6812      	ldr	r2, [r2, #0]
 8007b1e:	f022 0201 	bic.w	r2, r2, #1
 8007b22:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <HAL_TIMEx_OCN_Start_DMA>:
  * @param  pData : The source Buffer address.
  * @param  Length : The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b084      	sub	sp, #16
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	60f8      	str	r0, [r7, #12]
 8007b36:	60b9      	str	r1, [r7, #8]
 8007b38:	607a      	str	r2, [r7, #4]
 8007b3a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  if((htim->State == HAL_TIM_STATE_BUSY))
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d101      	bne.n	8007b4c <HAL_TIMEx_OCN_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 8007b48:	2302      	movs	r3, #2
 8007b4a:	e0b8      	b.n	8007cbe <HAL_TIMEx_OCN_Start_DMA+0x190>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d10b      	bne.n	8007b70 <HAL_TIMEx_OCN_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0U) && (Length > 0U))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d104      	bne.n	8007b68 <HAL_TIMEx_OCN_Start_DMA+0x3a>
 8007b5e:	887b      	ldrh	r3, [r7, #2]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <HAL_TIMEx_OCN_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	e0aa      	b.n	8007cbe <HAL_TIMEx_OCN_Start_DMA+0x190>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
  }
  switch (Channel)
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	2b0c      	cmp	r3, #12
 8007b74:	f200 808a 	bhi.w	8007c8c <HAL_TIMEx_OCN_Start_DMA+0x15e>
 8007b78:	a201      	add	r2, pc, #4	; (adr r2, 8007b80 <HAL_TIMEx_OCN_Start_DMA+0x52>)
 8007b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7e:	bf00      	nop
 8007b80:	08007bb5 	.word	0x08007bb5
 8007b84:	08007c8d 	.word	0x08007c8d
 8007b88:	08007c8d 	.word	0x08007c8d
 8007b8c:	08007c8d 	.word	0x08007c8d
 8007b90:	08007beb 	.word	0x08007beb
 8007b94:	08007c8d 	.word	0x08007c8d
 8007b98:	08007c8d 	.word	0x08007c8d
 8007b9c:	08007c8d 	.word	0x08007c8d
 8007ba0:	08007c21 	.word	0x08007c21
 8007ba4:	08007c8d 	.word	0x08007c8d
 8007ba8:	08007c8d 	.word	0x08007c8d
 8007bac:	08007c8d 	.word	0x08007c8d
 8007bb0:	08007c57 	.word	0x08007c57
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	4a43      	ldr	r2, [pc, #268]	; (8007cc8 <HAL_TIMEx_OCN_Start_DMA+0x19a>)
 8007bba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc0:	4a42      	ldr	r2, [pc, #264]	; (8007ccc <HAL_TIMEx_OCN_Start_DMA+0x19e>)
 8007bc2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007bc8:	6879      	ldr	r1, [r7, #4]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3334      	adds	r3, #52	; 0x34
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	887b      	ldrh	r3, [r7, #2]
 8007bd4:	f7f8 ff78 	bl	8000ac8 <HAL_DMA_Start_IT>

      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	6812      	ldr	r2, [r2, #0]
 8007be0:	68d2      	ldr	r2, [r2, #12]
 8007be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007be6:	60da      	str	r2, [r3, #12]
    }
    break;
 8007be8:	e051      	b.n	8007c8e <HAL_TIMEx_OCN_Start_DMA+0x160>

    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bee:	4a36      	ldr	r2, [pc, #216]	; (8007cc8 <HAL_TIMEx_OCN_Start_DMA+0x19a>)
 8007bf0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf6:	4a35      	ldr	r2, [pc, #212]	; (8007ccc <HAL_TIMEx_OCN_Start_DMA+0x19e>)
 8007bf8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007bfe:	6879      	ldr	r1, [r7, #4]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	3338      	adds	r3, #56	; 0x38
 8007c06:	461a      	mov	r2, r3
 8007c08:	887b      	ldrh	r3, [r7, #2]
 8007c0a:	f7f8 ff5d 	bl	8000ac8 <HAL_DMA_Start_IT>

      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	6812      	ldr	r2, [r2, #0]
 8007c16:	68d2      	ldr	r2, [r2, #12]
 8007c18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c1c:	60da      	str	r2, [r3, #12]
    }
    break;
 8007c1e:	e036      	b.n	8007c8e <HAL_TIMEx_OCN_Start_DMA+0x160>

    case TIM_CHANNEL_3:
{
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c24:	4a28      	ldr	r2, [pc, #160]	; (8007cc8 <HAL_TIMEx_OCN_Start_DMA+0x19a>)
 8007c26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2c:	4a27      	ldr	r2, [pc, #156]	; (8007ccc <HAL_TIMEx_OCN_Start_DMA+0x19e>)
 8007c2e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007c34:	6879      	ldr	r1, [r7, #4]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	333c      	adds	r3, #60	; 0x3c
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	887b      	ldrh	r3, [r7, #2]
 8007c40:	f7f8 ff42 	bl	8000ac8 <HAL_DMA_Start_IT>

      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	6812      	ldr	r2, [r2, #0]
 8007c4c:	68d2      	ldr	r2, [r2, #12]
 8007c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c52:	60da      	str	r2, [r3, #12]
    }
    break;
 8007c54:	e01b      	b.n	8007c8e <HAL_TIMEx_OCN_Start_DMA+0x160>

    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c5a:	4a1b      	ldr	r2, [pc, #108]	; (8007cc8 <HAL_TIMEx_OCN_Start_DMA+0x19a>)
 8007c5c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c62:	4a1a      	ldr	r2, [pc, #104]	; (8007ccc <HAL_TIMEx_OCN_Start_DMA+0x19e>)
 8007c64:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007c6a:	6879      	ldr	r1, [r7, #4]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3340      	adds	r3, #64	; 0x40
 8007c72:	461a      	mov	r2, r3
 8007c74:	887b      	ldrh	r3, [r7, #2]
 8007c76:	f7f8 ff27 	bl	8000ac8 <HAL_DMA_Start_IT>

      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	6812      	ldr	r2, [r2, #0]
 8007c82:	68d2      	ldr	r2, [r2, #12]
 8007c84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c88:	60da      	str	r2, [r3, #12]
    }
    break;
 8007c8a:	e000      	b.n	8007c8e <HAL_TIMEx_OCN_Start_DMA+0x160>

    default:
    break;
 8007c8c:	bf00      	nop
  }

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2204      	movs	r2, #4
 8007c94:	68b9      	ldr	r1, [r7, #8]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 fe15 	bl	80088c6 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	6812      	ldr	r2, [r2, #0]
 8007ca4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007ca6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007caa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	6812      	ldr	r2, [r2, #0]
 8007cb4:	6812      	ldr	r2, [r2, #0]
 8007cb6:	f042 0201 	orr.w	r2, r2, #1
 8007cba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	08006a6f 	.word	0x08006a6f
 8007ccc:	08006a4b 	.word	0x08006a4b

08007cd0 <HAL_TIMEx_OCN_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b0c      	cmp	r3, #12
 8007cde:	d841      	bhi.n	8007d64 <HAL_TIMEx_OCN_Stop_DMA+0x94>
 8007ce0:	a201      	add	r2, pc, #4	; (adr r2, 8007ce8 <HAL_TIMEx_OCN_Stop_DMA+0x18>)
 8007ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce6:	bf00      	nop
 8007ce8:	08007d1d 	.word	0x08007d1d
 8007cec:	08007d65 	.word	0x08007d65
 8007cf0:	08007d65 	.word	0x08007d65
 8007cf4:	08007d65 	.word	0x08007d65
 8007cf8:	08007d2f 	.word	0x08007d2f
 8007cfc:	08007d65 	.word	0x08007d65
 8007d00:	08007d65 	.word	0x08007d65
 8007d04:	08007d65 	.word	0x08007d65
 8007d08:	08007d41 	.word	0x08007d41
 8007d0c:	08007d65 	.word	0x08007d65
 8007d10:	08007d65 	.word	0x08007d65
 8007d14:	08007d65 	.word	0x08007d65
 8007d18:	08007d53 	.word	0x08007d53
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Output Compare DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	6812      	ldr	r2, [r2, #0]
 8007d24:	68d2      	ldr	r2, [r2, #12]
 8007d26:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007d2a:	60da      	str	r2, [r3, #12]
    }
    break;
 8007d2c:	e01b      	b.n	8007d66 <HAL_TIMEx_OCN_Stop_DMA+0x96>

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Output Compare DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	6812      	ldr	r2, [r2, #0]
 8007d36:	68d2      	ldr	r2, [r2, #12]
 8007d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d3c:	60da      	str	r2, [r3, #12]
    }
    break;
 8007d3e:	e012      	b.n	8007d66 <HAL_TIMEx_OCN_Stop_DMA+0x96>

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Output Compare DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	6812      	ldr	r2, [r2, #0]
 8007d48:	68d2      	ldr	r2, [r2, #12]
 8007d4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d4e:	60da      	str	r2, [r3, #12]
    }
    break;
 8007d50:	e009      	b.n	8007d66 <HAL_TIMEx_OCN_Stop_DMA+0x96>

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	6812      	ldr	r2, [r2, #0]
 8007d5a:	68d2      	ldr	r2, [r2, #12]
 8007d5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d60:	60da      	str	r2, [r3, #12]
    }
    break;
 8007d62:	e000      	b.n	8007d66 <HAL_TIMEx_OCN_Stop_DMA+0x96>

    default:
    break;
 8007d64:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f000 fda9 	bl	80088c6 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
  __HAL_TIM_MOE_DISABLE(htim);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6a1a      	ldr	r2, [r3, #32]
 8007d7a:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d7e:	4013      	ands	r3, r2
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10f      	bne.n	8007da4 <HAL_TIMEx_OCN_Stop_DMA+0xd4>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6a1a      	ldr	r2, [r3, #32]
 8007d8a:	f240 4344 	movw	r3, #1092	; 0x444
 8007d8e:	4013      	ands	r3, r2
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d107      	bne.n	8007da4 <HAL_TIMEx_OCN_Stop_DMA+0xd4>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	6812      	ldr	r2, [r2, #0]
 8007d9c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007d9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007da2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6a1a      	ldr	r2, [r3, #32]
 8007daa:	f241 1311 	movw	r3, #4369	; 0x1111
 8007dae:	4013      	ands	r3, r2
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10f      	bne.n	8007dd4 <HAL_TIMEx_OCN_Stop_DMA+0x104>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6a1a      	ldr	r2, [r3, #32]
 8007dba:	f240 4344 	movw	r3, #1092	; 0x444
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d107      	bne.n	8007dd4 <HAL_TIMEx_OCN_Stop_DMA+0x104>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	6812      	ldr	r2, [r2, #0]
 8007dcc:	6812      	ldr	r2, [r2, #0]
 8007dce:	f022 0201 	bic.w	r2, r2, #1
 8007dd2:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b082      	sub	sp, #8
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
 8007dee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2204      	movs	r2, #4
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f000 fd64 	bl	80088c6 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	6812      	ldr	r2, [r2, #0]
 8007e06:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007e08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e0c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	6812      	ldr	r2, [r2, #0]
 8007e16:	6812      	ldr	r2, [r2, #0]
 8007e18:	f042 0201 	orr.w	r2, r2, #1
 8007e1c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2200      	movs	r2, #0
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 fd43 	bl	80088c6 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
  __HAL_TIM_MOE_DISABLE(htim);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6a1a      	ldr	r2, [r3, #32]
 8007e46:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10f      	bne.n	8007e70 <HAL_TIMEx_PWMN_Stop+0x48>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6a1a      	ldr	r2, [r3, #32]
 8007e56:	f240 4344 	movw	r3, #1092	; 0x444
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d107      	bne.n	8007e70 <HAL_TIMEx_PWMN_Stop+0x48>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	6812      	ldr	r2, [r2, #0]
 8007e68:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007e6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6a1a      	ldr	r2, [r3, #32]
 8007e76:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10f      	bne.n	8007ea0 <HAL_TIMEx_PWMN_Stop+0x78>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6a1a      	ldr	r2, [r3, #32]
 8007e86:	f240 4344 	movw	r3, #1092	; 0x444
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d107      	bne.n	8007ea0 <HAL_TIMEx_PWMN_Stop+0x78>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	6812      	ldr	r2, [r2, #0]
 8007e98:	6812      	ldr	r2, [r2, #0]
 8007e9a:	f022 0201 	bic.w	r2, r2, #1
 8007e9e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b082      	sub	sp, #8
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	2b0c      	cmp	r3, #12
 8007eb8:	d840      	bhi.n	8007f3c <HAL_TIMEx_PWMN_Start_IT+0x92>
 8007eba:	a201      	add	r2, pc, #4	; (adr r2, 8007ec0 <HAL_TIMEx_PWMN_Start_IT+0x16>)
 8007ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec0:	08007ef5 	.word	0x08007ef5
 8007ec4:	08007f3d 	.word	0x08007f3d
 8007ec8:	08007f3d 	.word	0x08007f3d
 8007ecc:	08007f3d 	.word	0x08007f3d
 8007ed0:	08007f07 	.word	0x08007f07
 8007ed4:	08007f3d 	.word	0x08007f3d
 8007ed8:	08007f3d 	.word	0x08007f3d
 8007edc:	08007f3d 	.word	0x08007f3d
 8007ee0:	08007f19 	.word	0x08007f19
 8007ee4:	08007f3d 	.word	0x08007f3d
 8007ee8:	08007f3d 	.word	0x08007f3d
 8007eec:	08007f3d 	.word	0x08007f3d
 8007ef0:	08007f2b 	.word	0x08007f2b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	6812      	ldr	r2, [r2, #0]
 8007efc:	68d2      	ldr	r2, [r2, #12]
 8007efe:	f042 0202 	orr.w	r2, r2, #2
 8007f02:	60da      	str	r2, [r3, #12]
    }
    break;
 8007f04:	e01b      	b.n	8007f3e <HAL_TIMEx_PWMN_Start_IT+0x94>

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	6812      	ldr	r2, [r2, #0]
 8007f0e:	68d2      	ldr	r2, [r2, #12]
 8007f10:	f042 0204 	orr.w	r2, r2, #4
 8007f14:	60da      	str	r2, [r3, #12]
    }
    break;
 8007f16:	e012      	b.n	8007f3e <HAL_TIMEx_PWMN_Start_IT+0x94>

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	6812      	ldr	r2, [r2, #0]
 8007f20:	68d2      	ldr	r2, [r2, #12]
 8007f22:	f042 0208 	orr.w	r2, r2, #8
 8007f26:	60da      	str	r2, [r3, #12]
    }
    break;
 8007f28:	e009      	b.n	8007f3e <HAL_TIMEx_PWMN_Start_IT+0x94>

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	6812      	ldr	r2, [r2, #0]
 8007f32:	68d2      	ldr	r2, [r2, #12]
 8007f34:	f042 0210 	orr.w	r2, r2, #16
 8007f38:	60da      	str	r2, [r3, #12]
    }
    break;
 8007f3a:	e000      	b.n	8007f3e <HAL_TIMEx_PWMN_Start_IT+0x94>

    default:
    break;
 8007f3c:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	6812      	ldr	r2, [r2, #0]
 8007f46:	68d2      	ldr	r2, [r2, #12]
 8007f48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007f4c:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2204      	movs	r2, #4
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 fcb5 	bl	80088c6 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	6812      	ldr	r2, [r2, #0]
 8007f64:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007f66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	6812      	ldr	r2, [r2, #0]
 8007f74:	6812      	ldr	r2, [r2, #0]
 8007f76:	f042 0201 	orr.w	r2, r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b084      	sub	sp, #16
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer = 0U;
 8007f90:	2300      	movs	r3, #0
 8007f92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	2b0c      	cmp	r3, #12
 8007f98:	d840      	bhi.n	800801c <HAL_TIMEx_PWMN_Stop_IT+0x96>
 8007f9a:	a201      	add	r2, pc, #4	; (adr r2, 8007fa0 <HAL_TIMEx_PWMN_Stop_IT+0x1a>)
 8007f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa0:	08007fd5 	.word	0x08007fd5
 8007fa4:	0800801d 	.word	0x0800801d
 8007fa8:	0800801d 	.word	0x0800801d
 8007fac:	0800801d 	.word	0x0800801d
 8007fb0:	08007fe7 	.word	0x08007fe7
 8007fb4:	0800801d 	.word	0x0800801d
 8007fb8:	0800801d 	.word	0x0800801d
 8007fbc:	0800801d 	.word	0x0800801d
 8007fc0:	08007ff9 	.word	0x08007ff9
 8007fc4:	0800801d 	.word	0x0800801d
 8007fc8:	0800801d 	.word	0x0800801d
 8007fcc:	0800801d 	.word	0x0800801d
 8007fd0:	0800800b 	.word	0x0800800b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	6812      	ldr	r2, [r2, #0]
 8007fdc:	68d2      	ldr	r2, [r2, #12]
 8007fde:	f022 0202 	bic.w	r2, r2, #2
 8007fe2:	60da      	str	r2, [r3, #12]
    }
    break;
 8007fe4:	e01b      	b.n	800801e <HAL_TIMEx_PWMN_Stop_IT+0x98>

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	6812      	ldr	r2, [r2, #0]
 8007fee:	68d2      	ldr	r2, [r2, #12]
 8007ff0:	f022 0204 	bic.w	r2, r2, #4
 8007ff4:	60da      	str	r2, [r3, #12]
    }
    break;
 8007ff6:	e012      	b.n	800801e <HAL_TIMEx_PWMN_Stop_IT+0x98>

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	6812      	ldr	r2, [r2, #0]
 8008000:	68d2      	ldr	r2, [r2, #12]
 8008002:	f022 0208 	bic.w	r2, r2, #8
 8008006:	60da      	str	r2, [r3, #12]
    }
    break;
 8008008:	e009      	b.n	800801e <HAL_TIMEx_PWMN_Stop_IT+0x98>

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	6812      	ldr	r2, [r2, #0]
 8008012:	68d2      	ldr	r2, [r2, #12]
 8008014:	f022 0210 	bic.w	r2, r2, #16
 8008018:	60da      	str	r2, [r3, #12]
    }
    break;
 800801a:	e000      	b.n	800801e <HAL_TIMEx_PWMN_Stop_IT+0x98>

    default:
    break;
 800801c:	bf00      	nop
  }

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2200      	movs	r2, #0
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	4618      	mov	r0, r3
 8008028:	f000 fc4d 	bl	80088c6 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	f240 4344 	movw	r3, #1092	; 0x444
 800803a:	4013      	ands	r3, r2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d107      	bne.n	8008050 <HAL_TIMEx_PWMN_Stop_IT+0xca>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	6812      	ldr	r2, [r2, #0]
 8008048:	68d2      	ldr	r2, [r2, #12]
 800804a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800804e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Ouput */
  __HAL_TIM_MOE_DISABLE(htim);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6a1a      	ldr	r2, [r3, #32]
 8008056:	f241 1311 	movw	r3, #4369	; 0x1111
 800805a:	4013      	ands	r3, r2
 800805c:	2b00      	cmp	r3, #0
 800805e:	d10f      	bne.n	8008080 <HAL_TIMEx_PWMN_Stop_IT+0xfa>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6a1a      	ldr	r2, [r3, #32]
 8008066:	f240 4344 	movw	r3, #1092	; 0x444
 800806a:	4013      	ands	r3, r2
 800806c:	2b00      	cmp	r3, #0
 800806e:	d107      	bne.n	8008080 <HAL_TIMEx_PWMN_Stop_IT+0xfa>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	6812      	ldr	r2, [r2, #0]
 8008078:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800807a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800807e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6a1a      	ldr	r2, [r3, #32]
 8008086:	f241 1311 	movw	r3, #4369	; 0x1111
 800808a:	4013      	ands	r3, r2
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10f      	bne.n	80080b0 <HAL_TIMEx_PWMN_Stop_IT+0x12a>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6a1a      	ldr	r2, [r3, #32]
 8008096:	f240 4344 	movw	r3, #1092	; 0x444
 800809a:	4013      	ands	r3, r2
 800809c:	2b00      	cmp	r3, #0
 800809e:	d107      	bne.n	80080b0 <HAL_TIMEx_PWMN_Stop_IT+0x12a>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	6812      	ldr	r2, [r2, #0]
 80080a8:	6812      	ldr	r2, [r2, #0]
 80080aa:	f022 0201 	bic.w	r2, r2, #1
 80080ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <HAL_TIMEx_PWMN_Start_DMA>:
  * @param  pData : The source Buffer address.
  * @param  Length : The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b084      	sub	sp, #16
 80080be:	af00      	add	r7, sp, #0
 80080c0:	60f8      	str	r0, [r7, #12]
 80080c2:	60b9      	str	r1, [r7, #8]
 80080c4:	607a      	str	r2, [r7, #4]
 80080c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  if((htim->State == HAL_TIM_STATE_BUSY))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d101      	bne.n	80080d8 <HAL_TIMEx_PWMN_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 80080d4:	2302      	movs	r3, #2
 80080d6:	e0b8      	b.n	800824a <HAL_TIMEx_PWMN_Start_DMA+0x190>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d10b      	bne.n	80080fc <HAL_TIMEx_PWMN_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0U) && (Length > 0U))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d104      	bne.n	80080f4 <HAL_TIMEx_PWMN_Start_DMA+0x3a>
 80080ea:	887b      	ldrh	r3, [r7, #2]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <HAL_TIMEx_PWMN_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e0aa      	b.n	800824a <HAL_TIMEx_PWMN_Start_DMA+0x190>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2202      	movs	r2, #2
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
  }
  switch (Channel)
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2b0c      	cmp	r3, #12
 8008100:	f200 808a 	bhi.w	8008218 <HAL_TIMEx_PWMN_Start_DMA+0x15e>
 8008104:	a201      	add	r2, pc, #4	; (adr r2, 800810c <HAL_TIMEx_PWMN_Start_DMA+0x52>)
 8008106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810a:	bf00      	nop
 800810c:	08008141 	.word	0x08008141
 8008110:	08008219 	.word	0x08008219
 8008114:	08008219 	.word	0x08008219
 8008118:	08008219 	.word	0x08008219
 800811c:	08008177 	.word	0x08008177
 8008120:	08008219 	.word	0x08008219
 8008124:	08008219 	.word	0x08008219
 8008128:	08008219 	.word	0x08008219
 800812c:	080081ad 	.word	0x080081ad
 8008130:	08008219 	.word	0x08008219
 8008134:	08008219 	.word	0x08008219
 8008138:	08008219 	.word	0x08008219
 800813c:	080081e3 	.word	0x080081e3
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008144:	4a43      	ldr	r2, [pc, #268]	; (8008254 <HAL_TIMEx_PWMN_Start_DMA+0x19a>)
 8008146:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814c:	4a42      	ldr	r2, [pc, #264]	; (8008258 <HAL_TIMEx_PWMN_Start_DMA+0x19e>)
 800814e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008154:	6879      	ldr	r1, [r7, #4]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3334      	adds	r3, #52	; 0x34
 800815c:	461a      	mov	r2, r3
 800815e:	887b      	ldrh	r3, [r7, #2]
 8008160:	f7f8 fcb2 	bl	8000ac8 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	6812      	ldr	r2, [r2, #0]
 800816c:	68d2      	ldr	r2, [r2, #12]
 800816e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008172:	60da      	str	r2, [r3, #12]
    }
    break;
 8008174:	e051      	b.n	800821a <HAL_TIMEx_PWMN_Start_DMA+0x160>

    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817a:	4a36      	ldr	r2, [pc, #216]	; (8008254 <HAL_TIMEx_PWMN_Start_DMA+0x19a>)
 800817c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008182:	4a35      	ldr	r2, [pc, #212]	; (8008258 <HAL_TIMEx_PWMN_Start_DMA+0x19e>)
 8008184:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800818a:	6879      	ldr	r1, [r7, #4]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3338      	adds	r3, #56	; 0x38
 8008192:	461a      	mov	r2, r3
 8008194:	887b      	ldrh	r3, [r7, #2]
 8008196:	f7f8 fc97 	bl	8000ac8 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	6812      	ldr	r2, [r2, #0]
 80081a2:	68d2      	ldr	r2, [r2, #12]
 80081a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80081a8:	60da      	str	r2, [r3, #12]
    }
    break;
 80081aa:	e036      	b.n	800821a <HAL_TIMEx_PWMN_Start_DMA+0x160>

    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b0:	4a28      	ldr	r2, [pc, #160]	; (8008254 <HAL_TIMEx_PWMN_Start_DMA+0x19a>)
 80081b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b8:	4a27      	ldr	r2, [pc, #156]	; (8008258 <HAL_TIMEx_PWMN_Start_DMA+0x19e>)
 80081ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80081c0:	6879      	ldr	r1, [r7, #4]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	333c      	adds	r3, #60	; 0x3c
 80081c8:	461a      	mov	r2, r3
 80081ca:	887b      	ldrh	r3, [r7, #2]
 80081cc:	f7f8 fc7c 	bl	8000ac8 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	6812      	ldr	r2, [r2, #0]
 80081d8:	68d2      	ldr	r2, [r2, #12]
 80081da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081de:	60da      	str	r2, [r3, #12]
    }
    break;
 80081e0:	e01b      	b.n	800821a <HAL_TIMEx_PWMN_Start_DMA+0x160>

    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e6:	4a1b      	ldr	r2, [pc, #108]	; (8008254 <HAL_TIMEx_PWMN_Start_DMA+0x19a>)
 80081e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ee:	4a1a      	ldr	r2, [pc, #104]	; (8008258 <HAL_TIMEx_PWMN_Start_DMA+0x19e>)
 80081f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	3340      	adds	r3, #64	; 0x40
 80081fe:	461a      	mov	r2, r3
 8008200:	887b      	ldrh	r3, [r7, #2]
 8008202:	f7f8 fc61 	bl	8000ac8 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	6812      	ldr	r2, [r2, #0]
 800820e:	68d2      	ldr	r2, [r2, #12]
 8008210:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008214:	60da      	str	r2, [r3, #12]
    }
    break;
 8008216:	e000      	b.n	800821a <HAL_TIMEx_PWMN_Start_DMA+0x160>

    default:
    break;
 8008218:	bf00      	nop
  }

  /* Enable the complementary PWM output  */
     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2204      	movs	r2, #4
 8008220:	68b9      	ldr	r1, [r7, #8]
 8008222:	4618      	mov	r0, r3
 8008224:	f000 fb4f 	bl	80088c6 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
    __HAL_TIM_MOE_ENABLE(htim);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	6812      	ldr	r2, [r2, #0]
 8008230:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008232:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008236:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	6812      	ldr	r2, [r2, #0]
 8008240:	6812      	ldr	r2, [r2, #0]
 8008242:	f042 0201 	orr.w	r2, r2, #1
 8008246:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	08006a6f 	.word	0x08006a6f
 8008258:	08006a4b 	.word	0x08006a4b

0800825c <HAL_TIMEx_PWMN_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b0c      	cmp	r3, #12
 800826a:	d841      	bhi.n	80082f0 <HAL_TIMEx_PWMN_Stop_DMA+0x94>
 800826c:	a201      	add	r2, pc, #4	; (adr r2, 8008274 <HAL_TIMEx_PWMN_Stop_DMA+0x18>)
 800826e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008272:	bf00      	nop
 8008274:	080082a9 	.word	0x080082a9
 8008278:	080082f1 	.word	0x080082f1
 800827c:	080082f1 	.word	0x080082f1
 8008280:	080082f1 	.word	0x080082f1
 8008284:	080082bb 	.word	0x080082bb
 8008288:	080082f1 	.word	0x080082f1
 800828c:	080082f1 	.word	0x080082f1
 8008290:	080082f1 	.word	0x080082f1
 8008294:	080082cd 	.word	0x080082cd
 8008298:	080082f1 	.word	0x080082f1
 800829c:	080082f1 	.word	0x080082f1
 80082a0:	080082f1 	.word	0x080082f1
 80082a4:	080082df 	.word	0x080082df
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	6812      	ldr	r2, [r2, #0]
 80082b0:	68d2      	ldr	r2, [r2, #12]
 80082b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80082b6:	60da      	str	r2, [r3, #12]
    }
    break;
 80082b8:	e01b      	b.n	80082f2 <HAL_TIMEx_PWMN_Stop_DMA+0x96>

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	6812      	ldr	r2, [r2, #0]
 80082c2:	68d2      	ldr	r2, [r2, #12]
 80082c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082c8:	60da      	str	r2, [r3, #12]
    }
    break;
 80082ca:	e012      	b.n	80082f2 <HAL_TIMEx_PWMN_Stop_DMA+0x96>

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	6812      	ldr	r2, [r2, #0]
 80082d4:	68d2      	ldr	r2, [r2, #12]
 80082d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082da:	60da      	str	r2, [r3, #12]
    }
    break;
 80082dc:	e009      	b.n	80082f2 <HAL_TIMEx_PWMN_Stop_DMA+0x96>

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	6812      	ldr	r2, [r2, #0]
 80082e6:	68d2      	ldr	r2, [r2, #12]
 80082e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80082ec:	60da      	str	r2, [r3, #12]
    }
    break;
 80082ee:	e000      	b.n	80082f2 <HAL_TIMEx_PWMN_Stop_DMA+0x96>

    default:
    break;
 80082f0:	bf00      	nop
  }

  /* Disable the complementary PWM output */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2200      	movs	r2, #0
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 fae3 	bl	80088c6 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6a1a      	ldr	r2, [r3, #32]
 8008306:	f241 1311 	movw	r3, #4369	; 0x1111
 800830a:	4013      	ands	r3, r2
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10f      	bne.n	8008330 <HAL_TIMEx_PWMN_Stop_DMA+0xd4>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6a1a      	ldr	r2, [r3, #32]
 8008316:	f240 4344 	movw	r3, #1092	; 0x444
 800831a:	4013      	ands	r3, r2
 800831c:	2b00      	cmp	r3, #0
 800831e:	d107      	bne.n	8008330 <HAL_TIMEx_PWMN_Stop_DMA+0xd4>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	6812      	ldr	r2, [r2, #0]
 8008328:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800832a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800832e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6a1a      	ldr	r2, [r3, #32]
 8008336:	f241 1311 	movw	r3, #4369	; 0x1111
 800833a:	4013      	ands	r3, r2
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10f      	bne.n	8008360 <HAL_TIMEx_PWMN_Stop_DMA+0x104>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6a1a      	ldr	r2, [r3, #32]
 8008346:	f240 4344 	movw	r3, #1092	; 0x444
 800834a:	4013      	ands	r3, r2
 800834c:	2b00      	cmp	r3, #0
 800834e:	d107      	bne.n	8008360 <HAL_TIMEx_PWMN_Stop_DMA+0x104>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	6812      	ldr	r2, [r2, #0]
 8008358:	6812      	ldr	r2, [r2, #0]
 800835a:	f022 0201 	bic.w	r2, r2, #1
 800835e:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <HAL_TIMEx_OnePulseN_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
  {
 8008372:	b580      	push	{r7, lr}
 8008374:	b082      	sub	sp, #8
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Enable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2204      	movs	r2, #4
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	4618      	mov	r0, r3
 8008386:	f000 fa9e 	bl	80088c6 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	6812      	ldr	r2, [r2, #0]
 8008392:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008394:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008398:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <HAL_TIMEx_OnePulseN_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2200      	movs	r2, #0
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 fa85 	bl	80088c6 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
  __HAL_TIM_MOE_DISABLE(htim);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6a1a      	ldr	r2, [r3, #32]
 80083c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80083c6:	4013      	ands	r3, r2
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10f      	bne.n	80083ec <HAL_TIMEx_OnePulseN_Stop+0x48>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6a1a      	ldr	r2, [r3, #32]
 80083d2:	f240 4344 	movw	r3, #1092	; 0x444
 80083d6:	4013      	ands	r3, r2
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d107      	bne.n	80083ec <HAL_TIMEx_OnePulseN_Stop+0x48>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	6812      	ldr	r2, [r2, #0]
 80083e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80083e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80083ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6a1a      	ldr	r2, [r3, #32]
 80083f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80083f6:	4013      	ands	r3, r2
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10f      	bne.n	800841c <HAL_TIMEx_OnePulseN_Stop+0x78>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	6a1a      	ldr	r2, [r3, #32]
 8008402:	f240 4344 	movw	r3, #1092	; 0x444
 8008406:	4013      	ands	r3, r2
 8008408:	2b00      	cmp	r3, #0
 800840a:	d107      	bne.n	800841c <HAL_TIMEx_OnePulseN_Stop+0x78>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	6812      	ldr	r2, [r2, #0]
 8008414:	6812      	ldr	r2, [r2, #0]
 8008416:	f022 0201 	bic.w	r2, r2, #1
 800841a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <HAL_TIMEx_OnePulseN_Start_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b082      	sub	sp, #8
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
 800842e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	6812      	ldr	r2, [r2, #0]
 8008438:	68d2      	ldr	r2, [r2, #12]
 800843a:	f042 0202 	orr.w	r2, r2, #2
 800843e:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	6812      	ldr	r2, [r2, #0]
 8008448:	68d2      	ldr	r2, [r2, #12]
 800844a:	f042 0204 	orr.w	r2, r2, #4
 800844e:	60da      	str	r2, [r3, #12]

  /* Enable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2204      	movs	r2, #4
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	4618      	mov	r0, r3
 800845a:	f000 fa34 	bl	80088c6 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	6812      	ldr	r2, [r2, #0]
 8008466:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008468:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800846c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 800846e:	2300      	movs	r3, #0
  }
 8008470:	4618      	mov	r0, r3
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <HAL_TIMEx_OnePulseN_Stop_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	6812      	ldr	r2, [r2, #0]
 800848a:	68d2      	ldr	r2, [r2, #12]
 800848c:	f022 0202 	bic.w	r2, r2, #2
 8008490:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	6812      	ldr	r2, [r2, #0]
 800849a:	68d2      	ldr	r2, [r2, #12]
 800849c:	f022 0204 	bic.w	r2, r2, #4
 80084a0:	60da      	str	r2, [r3, #12]

  /* Disable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2200      	movs	r2, #0
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 fa0b 	bl	80088c6 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
  __HAL_TIM_MOE_DISABLE(htim);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6a1a      	ldr	r2, [r3, #32]
 80084b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80084ba:	4013      	ands	r3, r2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10f      	bne.n	80084e0 <HAL_TIMEx_OnePulseN_Stop_IT+0x68>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	6a1a      	ldr	r2, [r3, #32]
 80084c6:	f240 4344 	movw	r3, #1092	; 0x444
 80084ca:	4013      	ands	r3, r2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d107      	bne.n	80084e0 <HAL_TIMEx_OnePulseN_Stop_IT+0x68>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	6812      	ldr	r2, [r2, #0]
 80084d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80084da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
   __HAL_TIM_DISABLE(htim);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6a1a      	ldr	r2, [r3, #32]
 80084e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80084ea:	4013      	ands	r3, r2
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10f      	bne.n	8008510 <HAL_TIMEx_OnePulseN_Stop_IT+0x98>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6a1a      	ldr	r2, [r3, #32]
 80084f6:	f240 4344 	movw	r3, #1092	; 0x444
 80084fa:	4013      	ands	r3, r2
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d107      	bne.n	8008510 <HAL_TIMEx_OnePulseN_Stop_IT+0x98>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	6812      	ldr	r2, [r2, #0]
 8008508:	6812      	ldr	r2, [r2, #0]
 800850a:	f022 0201 	bic.w	r2, r2, #1
 800850e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <HAL_TIMEx_ConfigCommutationEvent>:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 800851a:	b480      	push	{r7}
 800851c:	b085      	sub	sp, #20
 800851e:	af00      	add	r7, sp, #0
 8008520:	60f8      	str	r0, [r7, #12]
 8008522:	60b9      	str	r1, [r7, #8]
 8008524:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800852c:	2b01      	cmp	r3, #1
 800852e:	d101      	bne.n	8008534 <HAL_TIMEx_ConfigCommutationEvent+0x1a>
 8008530:	2302      	movs	r3, #2
 8008532:	e03c      	b.n	80085ae <HAL_TIMEx_ConfigCommutationEvent+0x94>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d008      	beq.n	8008554 <HAL_TIMEx_ConfigCommutationEvent+0x3a>
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	2b10      	cmp	r3, #16
 8008546:	d005      	beq.n	8008554 <HAL_TIMEx_ConfigCommutationEvent+0x3a>
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	2b20      	cmp	r3, #32
 800854c:	d002      	beq.n	8008554 <HAL_TIMEx_ConfigCommutationEvent+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	2b30      	cmp	r3, #48	; 0x30
 8008552:	d10f      	bne.n	8008574 <HAL_TIMEx_ConfigCommutationEvent+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	6812      	ldr	r2, [r2, #0]
 800855c:	6892      	ldr	r2, [r2, #8]
 800855e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008562:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	6812      	ldr	r2, [r2, #0]
 800856c:	6891      	ldr	r1, [r2, #8]
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	430a      	orrs	r2, r1
 8008572:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	6812      	ldr	r2, [r2, #0]
 800857c:	6852      	ldr	r2, [r2, #4]
 800857e:	f042 0201 	orr.w	r2, r2, #1
 8008582:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	6812      	ldr	r2, [r2, #0]
 800858c:	6852      	ldr	r2, [r2, #4]
 800858e:	f022 0204 	bic.w	r2, r2, #4
 8008592:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	6812      	ldr	r2, [r2, #0]
 800859c:	6851      	ldr	r1, [r2, #4]
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	605a      	str	r2, [r3, #4]

  __HAL_UNLOCK(htim);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bc80      	pop	{r7}
 80085b6:	4770      	bx	lr

080085b8 <HAL_TIMEx_ConfigCommutationEvent_IT>:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d101      	bne.n	80085d2 <HAL_TIMEx_ConfigCommutationEvent_IT+0x1a>
 80085ce:	2302      	movs	r3, #2
 80085d0:	e044      	b.n	800865c <HAL_TIMEx_ConfigCommutationEvent_IT+0xa4>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d008      	beq.n	80085f2 <HAL_TIMEx_ConfigCommutationEvent_IT+0x3a>
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2b10      	cmp	r3, #16
 80085e4:	d005      	beq.n	80085f2 <HAL_TIMEx_ConfigCommutationEvent_IT+0x3a>
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2b20      	cmp	r3, #32
 80085ea:	d002      	beq.n	80085f2 <HAL_TIMEx_ConfigCommutationEvent_IT+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	2b30      	cmp	r3, #48	; 0x30
 80085f0:	d10f      	bne.n	8008612 <HAL_TIMEx_ConfigCommutationEvent_IT+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	6812      	ldr	r2, [r2, #0]
 80085fa:	6892      	ldr	r2, [r2, #8]
 80085fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008600:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	6812      	ldr	r2, [r2, #0]
 800860a:	6891      	ldr	r1, [r2, #8]
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	430a      	orrs	r2, r1
 8008610:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	6812      	ldr	r2, [r2, #0]
 800861a:	6852      	ldr	r2, [r2, #4]
 800861c:	f042 0201 	orr.w	r2, r2, #1
 8008620:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	6812      	ldr	r2, [r2, #0]
 800862a:	6852      	ldr	r2, [r2, #4]
 800862c:	f022 0204 	bic.w	r2, r2, #4
 8008630:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	6812      	ldr	r2, [r2, #0]
 800863a:	6851      	ldr	r1, [r2, #4]
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	430a      	orrs	r2, r1
 8008640:	605a      	str	r2, [r3, #4]

  /* Enable the Commutation Interrupt Request */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	6812      	ldr	r2, [r2, #0]
 800864a:	68d2      	ldr	r2, [r2, #12]
 800864c:	f042 0220 	orr.w	r2, r2, #32
 8008650:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	bc80      	pop	{r7}
 8008664:	4770      	bx	lr

08008666 <HAL_TIMEx_ConfigCommutationEvent_DMA>:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 8008666:	b480      	push	{r7}
 8008668:	b085      	sub	sp, #20
 800866a:	af00      	add	r7, sp, #0
 800866c:	60f8      	str	r0, [r7, #12]
 800866e:	60b9      	str	r1, [r7, #8]
 8008670:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008678:	2b01      	cmp	r3, #1
 800867a:	d101      	bne.n	8008680 <HAL_TIMEx_ConfigCommutationEvent_DMA+0x1a>
 800867c:	2302      	movs	r3, #2
 800867e:	e04c      	b.n	800871a <HAL_TIMEx_ConfigCommutationEvent_DMA+0xb4>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d008      	beq.n	80086a0 <HAL_TIMEx_ConfigCommutationEvent_DMA+0x3a>
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	2b10      	cmp	r3, #16
 8008692:	d005      	beq.n	80086a0 <HAL_TIMEx_ConfigCommutationEvent_DMA+0x3a>
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	2b20      	cmp	r3, #32
 8008698:	d002      	beq.n	80086a0 <HAL_TIMEx_ConfigCommutationEvent_DMA+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2b30      	cmp	r3, #48	; 0x30
 800869e:	d10f      	bne.n	80086c0 <HAL_TIMEx_ConfigCommutationEvent_DMA+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	6812      	ldr	r2, [r2, #0]
 80086a8:	6892      	ldr	r2, [r2, #8]
 80086aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80086ae:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	6812      	ldr	r2, [r2, #0]
 80086b8:	6891      	ldr	r1, [r2, #8]
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	430a      	orrs	r2, r1
 80086be:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	6812      	ldr	r2, [r2, #0]
 80086c8:	6852      	ldr	r2, [r2, #4]
 80086ca:	f042 0201 	orr.w	r2, r2, #1
 80086ce:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	6812      	ldr	r2, [r2, #0]
 80086d8:	6852      	ldr	r2, [r2, #4]
 80086da:	f022 0204 	bic.w	r2, r2, #4
 80086de:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	6812      	ldr	r2, [r2, #0]
 80086e8:	6851      	ldr	r1, [r2, #4]
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	430a      	orrs	r2, r1
 80086ee:	605a      	str	r2, [r3, #4]

  /* Enable the Commutation DMA Request */
  /* Set the DMA Commutation Callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f4:	4a0b      	ldr	r2, [pc, #44]	; (8008724 <HAL_TIMEx_ConfigCommutationEvent_DMA+0xbe>)
 80086f6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086fc:	4a0a      	ldr	r2, [pc, #40]	; (8008728 <HAL_TIMEx_ConfigCommutationEvent_DMA+0xc2>)
 80086fe:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the Commutation DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	6812      	ldr	r2, [r2, #0]
 8008708:	68d2      	ldr	r2, [r2, #12]
 800870a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800870e:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	bc80      	pop	{r7}
 8008722:	4770      	bx	lr
 8008724:	08008889 	.word	0x08008889
 8008728:	08006a4b 	.word	0x08006a4b

0800872c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8008736:	2300      	movs	r3, #0
 8008738:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008740:	2b01      	cmp	r3, #1
 8008742:	d101      	bne.n	8008748 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008744:	2302      	movs	r3, #2
 8008746:	e044      	b.n	80087d2 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	4313      	orrs	r3, r2
 800875c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	4313      	orrs	r3, r2
 800876a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	4313      	orrs	r3, r2
 8008778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4313      	orrs	r3, r2
 8008786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	4313      	orrs	r3, r2
 8008794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	695b      	ldr	r3, [r3, #20]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	699b      	ldr	r3, [r3, #24]
 80087bc:	4313      	orrs	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3714      	adds	r7, #20
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bc80      	pop	{r7}
 80087da:	4770      	bx	lr

080087dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d101      	bne.n	80087f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087f0:	2302      	movs	r3, #2
 80087f2:	e032      	b.n	800885a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2202      	movs	r2, #2
 8008800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	6812      	ldr	r2, [r2, #0]
 800880c:	6852      	ldr	r2, [r2, #4]
 800880e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008812:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	6812      	ldr	r2, [r2, #0]
 800881c:	6851      	ldr	r1, [r2, #4]
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	6812      	ldr	r2, [r2, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	6812      	ldr	r2, [r2, #0]
 800882e:	6892      	ldr	r2, [r2, #8]
 8008830:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008834:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	6812      	ldr	r2, [r2, #0]
 800883e:	6891      	ldr	r1, [r2, #8]
 8008840:	683a      	ldr	r2, [r7, #0]
 8008842:	6852      	ldr	r2, [r2, #4]
 8008844:	430a      	orrs	r2, r1
 8008846:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	370c      	adds	r7, #12
 800885e:	46bd      	mov	sp, r7
 8008860:	bc80      	pop	{r7}
 8008862:	4770      	bx	lr

08008864 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	bc80      	pop	{r7}
 8008874:	4770      	bx	lr

08008876 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008876:	b480      	push	{r7}
 8008878:	b083      	sub	sp, #12
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800887e:	bf00      	nop
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	bc80      	pop	{r7}
 8008886:	4770      	bx	lr

08008888 <TIMEx_DMACommutationCplt>:
  * @brief  TIM DMA Commutation callback.
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008894:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  HAL_TIMEx_CommutationCallback(htim);
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f7ff ffe0 	bl	8008864 <HAL_TIMEx_CommutationCallback>
}
 80088a4:	bf00      	nop
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <HAL_TIMEx_HallSensor_GetState>:
  * @brief  Return the TIM Hall Sensor interface state
  * @param  htim : TIM Hall Sensor handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  return htim->State;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ba:	b2db      	uxtb	r3, r3
}
 80088bc:	4618      	mov	r0, r3
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bc80      	pop	{r7}
 80088c4:	4770      	bx	lr

080088c6 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState : specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80088c6:	b480      	push	{r7}
 80088c8:	b087      	sub	sp, #28
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	60f8      	str	r0, [r7, #12]
 80088ce:	60b9      	str	r1, [r7, #8]
 80088d0:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80088d2:	2300      	movs	r3, #0
 80088d4:	617b      	str	r3, [r7, #20]

  tmp = TIM_CCER_CC1NE << Channel;
 80088d6:	2204      	movs	r2, #4
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	fa02 f303 	lsl.w	r3, r2, r3
 80088de:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6a1a      	ldr	r2, [r3, #32]
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	43db      	mvns	r3, r3
 80088e8:	401a      	ands	r2, r3
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6a1a      	ldr	r2, [r3, #32]
 80088f2:	6879      	ldr	r1, [r7, #4]
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	fa01 f303 	lsl.w	r3, r1, r3
 80088fa:	431a      	orrs	r2, r3
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	621a      	str	r2, [r3, #32]
}
 8008900:	bf00      	nop
 8008902:	371c      	adds	r7, #28
 8008904:	46bd      	mov	sp, r7
 8008906:	bc80      	pop	{r7}
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop

0800890c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b088      	sub	sp, #32
 8008910:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008912:	4a2c      	ldr	r2, [pc, #176]	; (80089c4 <MX_GPIO_Init+0xb8>)
 8008914:	4b2b      	ldr	r3, [pc, #172]	; (80089c4 <MX_GPIO_Init+0xb8>)
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	f043 0320 	orr.w	r3, r3, #32
 800891c:	6193      	str	r3, [r2, #24]
 800891e:	4b29      	ldr	r3, [pc, #164]	; (80089c4 <MX_GPIO_Init+0xb8>)
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	f003 0320 	and.w	r3, r3, #32
 8008926:	60fb      	str	r3, [r7, #12]
 8008928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800892a:	4a26      	ldr	r2, [pc, #152]	; (80089c4 <MX_GPIO_Init+0xb8>)
 800892c:	4b25      	ldr	r3, [pc, #148]	; (80089c4 <MX_GPIO_Init+0xb8>)
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	f043 0304 	orr.w	r3, r3, #4
 8008934:	6193      	str	r3, [r2, #24]
 8008936:	4b23      	ldr	r3, [pc, #140]	; (80089c4 <MX_GPIO_Init+0xb8>)
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	f003 0304 	and.w	r3, r3, #4
 800893e:	60bb      	str	r3, [r7, #8]
 8008940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008942:	4a20      	ldr	r2, [pc, #128]	; (80089c4 <MX_GPIO_Init+0xb8>)
 8008944:	4b1f      	ldr	r3, [pc, #124]	; (80089c4 <MX_GPIO_Init+0xb8>)
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	f043 0308 	orr.w	r3, r3, #8
 800894c:	6193      	str	r3, [r2, #24]
 800894e:	4b1d      	ldr	r3, [pc, #116]	; (80089c4 <MX_GPIO_Init+0xb8>)
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	f003 0308 	and.w	r3, r3, #8
 8008956:	607b      	str	r3, [r7, #4]
 8008958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800895a:	2200      	movs	r2, #0
 800895c:	213f      	movs	r1, #63	; 0x3f
 800895e:	481a      	ldr	r0, [pc, #104]	; (80089c8 <MX_GPIO_Init+0xbc>)
 8008960:	f7f9 fe73 	bl	800264a <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8008964:	2200      	movs	r2, #0
 8008966:	f240 31f1 	movw	r1, #1009	; 0x3f1
 800896a:	4818      	ldr	r0, [pc, #96]	; (80089cc <MX_GPIO_Init+0xc0>)
 800896c:	f7f9 fe6d 	bl	800264a <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8008970:	233f      	movs	r3, #63	; 0x3f
 8008972:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008974:	2301      	movs	r3, #1
 8008976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008978:	2302      	movs	r3, #2
 800897a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800897c:	f107 0310 	add.w	r3, r7, #16
 8008980:	4619      	mov	r1, r3
 8008982:	4811      	ldr	r0, [pc, #68]	; (80089c8 <MX_GPIO_Init+0xbc>)
 8008984:	f7f9 fc2a 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008988:	2340      	movs	r3, #64	; 0x40
 800898a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008990:	2300      	movs	r3, #0
 8008992:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008994:	f107 0310 	add.w	r3, r7, #16
 8008998:	4619      	mov	r1, r3
 800899a:	480b      	ldr	r0, [pc, #44]	; (80089c8 <MX_GPIO_Init+0xbc>)
 800899c:	f7f9 fc1e 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80089a0:	f240 33f1 	movw	r3, #1009	; 0x3f1
 80089a4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089a6:	2301      	movs	r3, #1
 80089a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089aa:	2302      	movs	r3, #2
 80089ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089ae:	f107 0310 	add.w	r3, r7, #16
 80089b2:	4619      	mov	r1, r3
 80089b4:	4805      	ldr	r0, [pc, #20]	; (80089cc <MX_GPIO_Init+0xc0>)
 80089b6:	f7f9 fc11 	bl	80021dc <HAL_GPIO_Init>

}
 80089ba:	bf00      	nop
 80089bc:	3720      	adds	r7, #32
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	40021000 	.word	0x40021000
 80089c8:	40010800 	.word	0x40010800
 80089cc:	40010c00 	.word	0x40010c00

080089d0 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80089d0:	b598      	push	{r3, r4, r7, lr}
 80089d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80089d4:	f7f7 fbba 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80089d8:	f000 f840 	bl	8008a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80089dc:	f7ff ff96 	bl	800890c <MX_GPIO_Init>
  MX_TIM3_Init();
 80089e0:	f000 fae2 	bl	8008fa8 <MX_TIM3_Init>
  MX_TIM2_Init();
 80089e4:	f000 fa4c 	bl	8008e80 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80089e8:	2100      	movs	r1, #0
 80089ea:	4818      	ldr	r0, [pc, #96]	; (8008a4c <main+0x7c>)
 80089ec:	f7fc f80f 	bl	8004a0e <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80089f0:	2104      	movs	r1, #4
 80089f2:	4816      	ldr	r0, [pc, #88]	; (8008a4c <main+0x7c>)
 80089f4:	f7fc f80b 	bl	8004a0e <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 80089f8:	2108      	movs	r1, #8
 80089fa:	4814      	ldr	r0, [pc, #80]	; (8008a4c <main+0x7c>)
 80089fc:	f7fc f807 	bl	8004a0e <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 8008a00:	210c      	movs	r1, #12
 8008a02:	4812      	ldr	r0, [pc, #72]	; (8008a4c <main+0x7c>)
 8008a04:	f7fc f803 	bl	8004a0e <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8008a08:	4811      	ldr	r0, [pc, #68]	; (8008a50 <main+0x80>)
 8008a0a:	f7fb f80a 	bl	8003a22 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uss1_delay=HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_4) - HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_3);
 8008a0e:	210c      	movs	r1, #12
 8008a10:	480e      	ldr	r0, [pc, #56]	; (8008a4c <main+0x7c>)
 8008a12:	f7fd ff45 	bl	80068a0 <HAL_TIM_ReadCapturedValue>
 8008a16:	4604      	mov	r4, r0
 8008a18:	2108      	movs	r1, #8
 8008a1a:	480c      	ldr	r0, [pc, #48]	; (8008a4c <main+0x7c>)
 8008a1c:	f7fd ff40 	bl	80068a0 <HAL_TIM_ReadCapturedValue>
 8008a20:	4603      	mov	r3, r0
 8008a22:	1ae3      	subs	r3, r4, r3
 8008a24:	4a0b      	ldr	r2, [pc, #44]	; (8008a54 <main+0x84>)
 8008a26:	6013      	str	r3, [r2, #0]
	  uss2_delay=HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1) - HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8008a28:	2100      	movs	r1, #0
 8008a2a:	4808      	ldr	r0, [pc, #32]	; (8008a4c <main+0x7c>)
 8008a2c:	f7fd ff38 	bl	80068a0 <HAL_TIM_ReadCapturedValue>
 8008a30:	4604      	mov	r4, r0
 8008a32:	2104      	movs	r1, #4
 8008a34:	4805      	ldr	r0, [pc, #20]	; (8008a4c <main+0x7c>)
 8008a36:	f7fd ff33 	bl	80068a0 <HAL_TIM_ReadCapturedValue>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	1ae3      	subs	r3, r4, r3
 8008a3e:	4a06      	ldr	r2, [pc, #24]	; (8008a58 <main+0x88>)
 8008a40:	6013      	str	r3, [r2, #0]
	  HAL_Delay(1000);
 8008a42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008a46:	f7f7 fbef 	bl	8000228 <HAL_Delay>
	  uss1_delay=HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_4) - HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_3);
 8008a4a:	e7e0      	b.n	8008a0e <main+0x3e>
 8008a4c:	20000098 	.word	0x20000098
 8008a50:	20000058 	.word	0x20000058
 8008a54:	20000028 	.word	0x20000028
 8008a58:	2000002c 	.word	0x2000002c

08008a5c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b090      	sub	sp, #64	; 0x40
 8008a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008a62:	2301      	movs	r3, #1
 8008a64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008a66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008a70:	2301      	movs	r3, #1
 8008a72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008a74:	2302      	movs	r3, #2
 8008a76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008a78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8008a7e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008a84:	f107 0318 	add.w	r3, r7, #24
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7fa f84d 	bl	8002b28 <HAL_RCC_OscConfig>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d003      	beq.n	8008a9c <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008a94:	218b      	movs	r1, #139	; 0x8b
 8008a96:	4818      	ldr	r0, [pc, #96]	; (8008af8 <SystemClock_Config+0x9c>)
 8008a98:	f000 f8bc 	bl	8008c14 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008a9c:	230f      	movs	r3, #15
 8008a9e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008aac:	2300      	movs	r3, #0
 8008aae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008ab0:	1d3b      	adds	r3, r7, #4
 8008ab2:	2101      	movs	r1, #1
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7fa fa9b 	bl	8002ff0 <HAL_RCC_ClockConfig>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d003      	beq.n	8008ac8 <SystemClock_Config+0x6c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008ac0:	2199      	movs	r1, #153	; 0x99
 8008ac2:	480d      	ldr	r0, [pc, #52]	; (8008af8 <SystemClock_Config+0x9c>)
 8008ac4:	f000 f8a6 	bl	8008c14 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8008ac8:	f7fa fc38 	bl	800333c <HAL_RCC_GetHCLKFreq>
 8008acc:	4602      	mov	r2, r0
 8008ace:	4b0b      	ldr	r3, [pc, #44]	; (8008afc <SystemClock_Config+0xa0>)
 8008ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8008ad4:	099b      	lsrs	r3, r3, #6
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7f7 fe73 	bl	80007c2 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8008adc:	2004      	movs	r0, #4
 8008ade:	f7f7 fed3 	bl	8000888 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8008aea:	f7f7 fe2c 	bl	8000746 <HAL_NVIC_SetPriority>
}
 8008aee:	bf00      	nop
 8008af0:	3740      	adds	r7, #64	; 0x40
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	08009270 	.word	0x08009270
 8008afc:	10624dd3 	.word	0x10624dd3

08008b00 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM2){
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b10:	d108      	bne.n	8008b24 <HAL_TIM_IC_CaptureCallback+0x24>
		//descida echo uss1
		if(htim->Channel==TIM_CHANNEL_4){

		}
		//subida echo uss2
		if(htim->Channel==TIM_CHANNEL_2){
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	7f1b      	ldrb	r3, [r3, #28]
 8008b16:	2b04      	cmp	r3, #4
 8008b18:	d104      	bne.n	8008b24 <HAL_TIM_IC_CaptureCallback+0x24>
			delay++;
 8008b1a:	4b05      	ldr	r3, [pc, #20]	; (8008b30 <HAL_TIM_IC_CaptureCallback+0x30>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	4a03      	ldr	r2, [pc, #12]	; (8008b30 <HAL_TIM_IC_CaptureCallback+0x30>)
 8008b22:	6013      	str	r3, [r2, #0]
		//descida echo uss2
		if(htim->Channel==TIM_CHANNEL_1){

		}
	}
}
 8008b24:	bf00      	nop
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bc80      	pop	{r7}
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	20000024 	.word	0x20000024

08008b34 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM3) //check if the interrupt comes from TIM3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a10      	ldr	r2, [pc, #64]	; (8008b84 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d11a      	bne.n	8008b7c <HAL_TIM_PeriodElapsedCallback+0x48>
    {

    	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); //USS1 trigger
 8008b46:	2201      	movs	r2, #1
 8008b48:	2120      	movs	r1, #32
 8008b4a:	480f      	ldr	r0, [pc, #60]	; (8008b88 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8008b4c:	f7f9 fd7d 	bl	800264a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET); //USS2 trigger
 8008b50:	2201      	movs	r2, #1
 8008b52:	2110      	movs	r1, #16
 8008b54:	480d      	ldr	r0, [pc, #52]	; (8008b8c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8008b56:	f7f9 fd78 	bl	800264a <HAL_GPIO_WritePin>
		Delay_Us(10);
 8008b5a:	200a      	movs	r0, #10
 8008b5c:	f000 f846 	bl	8008bec <Delay_Us>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);//USS1 trigger
 8008b60:	2200      	movs	r2, #0
 8008b62:	2120      	movs	r1, #32
 8008b64:	4808      	ldr	r0, [pc, #32]	; (8008b88 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8008b66:	f7f9 fd70 	bl	800264a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);//USS2 trigger*/
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	2110      	movs	r1, #16
 8008b6e:	4807      	ldr	r0, [pc, #28]	; (8008b8c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8008b70:	f7f9 fd6b 	bl	800264a <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COUNTER(&htim2,0);
 8008b74:	4b06      	ldr	r3, [pc, #24]	; (8008b90 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	625a      	str	r2, [r3, #36]	; 0x24
		//conta os ciclos de echo para calcular a distancia
    }
}
 8008b7c:	bf00      	nop
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	40000400 	.word	0x40000400
 8008b88:	40010800 	.word	0x40010800
 8008b8c:	40010c00 	.word	0x40010c00
 8008b90:	20000098 	.word	0x20000098

08008b94 <getUs>:
uint32_t getUs(void) {
 8008b94:	b5b0      	push	{r4, r5, r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
	uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 8008b9a:	f7fa fb6d 	bl	8003278 <HAL_RCC_GetSysClockFreq>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	4b10      	ldr	r3, [pc, #64]	; (8008be4 <getUs+0x50>)
 8008ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ba6:	0c9b      	lsrs	r3, r3, #18
 8008ba8:	607b      	str	r3, [r7, #4]
	register uint32_t ms, cycle_cnt;
	do {
		ms = HAL_GetTick();
 8008baa:	f7f7 fb33 	bl	8000214 <HAL_GetTick>
 8008bae:	4604      	mov	r4, r0
		cycle_cnt = SysTick->VAL;
 8008bb0:	4b0d      	ldr	r3, [pc, #52]	; (8008be8 <getUs+0x54>)
 8008bb2:	689d      	ldr	r5, [r3, #8]
	} while (ms != HAL_GetTick());
 8008bb4:	f7f7 fb2e 	bl	8000214 <HAL_GetTick>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	42a3      	cmp	r3, r4
 8008bbc:	d1f5      	bne.n	8008baa <getUs+0x16>

	return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8008bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008bc2:	fb03 f204 	mul.w	r2, r3, r4
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008bcc:	fb01 f303 	mul.w	r3, r1, r3
 8008bd0:	1b59      	subs	r1, r3, r5
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8008bd8:	4413      	add	r3, r2
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bdb0      	pop	{r4, r5, r7, pc}
 8008be2:	bf00      	nop
 8008be4:	431bde83 	.word	0x431bde83
 8008be8:	e000e010 	.word	0xe000e010

08008bec <Delay_Us>:

void Delay_Us(uint32_t micros) {
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
	uint32_t start = getUs();
 8008bf4:	f7ff ffce 	bl	8008b94 <getUs>
 8008bf8:	60f8      	str	r0, [r7, #12]
	while (getUs()-start < (uint32_t) micros);
 8008bfa:	bf00      	nop
 8008bfc:	f7ff ffca 	bl	8008b94 <getUs>
 8008c00:	4602      	mov	r2, r0
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	1ad2      	subs	r2, r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d3f7      	bcc.n	8008bfc <Delay_Us+0x10>
}
 8008c0c:	bf00      	nop
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8008c1e:	e7fe      	b.n	8008c1e <_Error_Handler+0xa>

08008c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008c26:	4a24      	ldr	r2, [pc, #144]	; (8008cb8 <HAL_MspInit+0x98>)
 8008c28:	4b23      	ldr	r3, [pc, #140]	; (8008cb8 <HAL_MspInit+0x98>)
 8008c2a:	699b      	ldr	r3, [r3, #24]
 8008c2c:	f043 0301 	orr.w	r3, r3, #1
 8008c30:	6193      	str	r3, [r2, #24]
 8008c32:	4b21      	ldr	r3, [pc, #132]	; (8008cb8 <HAL_MspInit+0x98>)
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	607b      	str	r3, [r7, #4]
 8008c3c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008c3e:	2003      	movs	r0, #3
 8008c40:	f7f7 fd76 	bl	8000730 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8008c44:	2200      	movs	r2, #0
 8008c46:	2100      	movs	r1, #0
 8008c48:	f06f 000b 	mvn.w	r0, #11
 8008c4c:	f7f7 fd7b 	bl	8000746 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8008c50:	2200      	movs	r2, #0
 8008c52:	2100      	movs	r1, #0
 8008c54:	f06f 000a 	mvn.w	r0, #10
 8008c58:	f7f7 fd75 	bl	8000746 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	2100      	movs	r1, #0
 8008c60:	f06f 0009 	mvn.w	r0, #9
 8008c64:	f7f7 fd6f 	bl	8000746 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8008c68:	2200      	movs	r2, #0
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	f06f 0004 	mvn.w	r0, #4
 8008c70:	f7f7 fd69 	bl	8000746 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8008c74:	2200      	movs	r2, #0
 8008c76:	2100      	movs	r1, #0
 8008c78:	f06f 0003 	mvn.w	r0, #3
 8008c7c:	f7f7 fd63 	bl	8000746 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8008c80:	2200      	movs	r2, #0
 8008c82:	2100      	movs	r1, #0
 8008c84:	f06f 0001 	mvn.w	r0, #1
 8008c88:	f7f7 fd5d 	bl	8000746 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	2100      	movs	r1, #0
 8008c90:	f04f 30ff 	mov.w	r0, #4294967295
 8008c94:	f7f7 fd57 	bl	8000746 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008c98:	4a08      	ldr	r2, [pc, #32]	; (8008cbc <HAL_MspInit+0x9c>)
 8008c9a:	4b08      	ldr	r3, [pc, #32]	; (8008cbc <HAL_MspInit+0x9c>)
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008ca2:	6053      	str	r3, [r2, #4]
 8008ca4:	4a05      	ldr	r2, [pc, #20]	; (8008cbc <HAL_MspInit+0x9c>)
 8008ca6:	4b05      	ldr	r3, [pc, #20]	; (8008cbc <HAL_MspInit+0x9c>)
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008cae:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008cb0:	bf00      	nop
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	40021000 	.word	0x40021000
 8008cbc:	40010000 	.word	0x40010000

08008cc0 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008cc4:	bf00      	nop
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bc80      	pop	{r7}
 8008cca:	4770      	bx	lr

08008ccc <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008cd0:	e7fe      	b.n	8008cd0 <HardFault_Handler+0x4>

08008cd2 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008cd6:	e7fe      	b.n	8008cd6 <MemManage_Handler+0x4>

08008cd8 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008cdc:	e7fe      	b.n	8008cdc <BusFault_Handler+0x4>

08008cde <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8008cde:	b480      	push	{r7}
 8008ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008ce2:	e7fe      	b.n	8008ce2 <UsageFault_Handler+0x4>

08008ce4 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008ce8:	bf00      	nop
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bc80      	pop	{r7}
 8008cee:	4770      	bx	lr

08008cf0 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008cf4:	bf00      	nop
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bc80      	pop	{r7}
 8008cfa:	4770      	bx	lr

08008cfc <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008d00:	bf00      	nop
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bc80      	pop	{r7}
 8008d06:	4770      	bx	lr

08008d08 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008d0c:	f7f7 fa74 	bl	80001f8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8008d10:	f7f7 fdd6 	bl	80008c0 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008d14:	bf00      	nop
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008d1c:	4802      	ldr	r0, [pc, #8]	; (8008d28 <TIM2_IRQHandler+0x10>)
 8008d1e:	f7fc fd61 	bl	80057e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008d22:	bf00      	nop
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	20000098 	.word	0x20000098

08008d2c <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008d30:	4802      	ldr	r0, [pc, #8]	; (8008d3c <TIM3_IRQHandler+0x10>)
 8008d32:	f7fc fd57 	bl	80057e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008d36:	bf00      	nop
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	20000058 	.word	0x20000058

08008d40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008d40:	b480      	push	{r7}
 8008d42:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8008d44:	4a15      	ldr	r2, [pc, #84]	; (8008d9c <SystemInit+0x5c>)
 8008d46:	4b15      	ldr	r3, [pc, #84]	; (8008d9c <SystemInit+0x5c>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f043 0301 	orr.w	r3, r3, #1
 8008d4e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8008d50:	4912      	ldr	r1, [pc, #72]	; (8008d9c <SystemInit+0x5c>)
 8008d52:	4b12      	ldr	r3, [pc, #72]	; (8008d9c <SystemInit+0x5c>)
 8008d54:	685a      	ldr	r2, [r3, #4]
 8008d56:	4b12      	ldr	r3, [pc, #72]	; (8008da0 <SystemInit+0x60>)
 8008d58:	4013      	ands	r3, r2
 8008d5a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8008d5c:	4a0f      	ldr	r2, [pc, #60]	; (8008d9c <SystemInit+0x5c>)
 8008d5e:	4b0f      	ldr	r3, [pc, #60]	; (8008d9c <SystemInit+0x5c>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d6a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008d6c:	4a0b      	ldr	r2, [pc, #44]	; (8008d9c <SystemInit+0x5c>)
 8008d6e:	4b0b      	ldr	r3, [pc, #44]	; (8008d9c <SystemInit+0x5c>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d76:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8008d78:	4a08      	ldr	r2, [pc, #32]	; (8008d9c <SystemInit+0x5c>)
 8008d7a:	4b08      	ldr	r3, [pc, #32]	; (8008d9c <SystemInit+0x5c>)
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8008d82:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8008d84:	4b05      	ldr	r3, [pc, #20]	; (8008d9c <SystemInit+0x5c>)
 8008d86:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8008d8a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8008d8c:	4b05      	ldr	r3, [pc, #20]	; (8008da4 <SystemInit+0x64>)
 8008d8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008d92:	609a      	str	r2, [r3, #8]
#endif 
}
 8008d94:	bf00      	nop
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bc80      	pop	{r7}
 8008d9a:	4770      	bx	lr
 8008d9c:	40021000 	.word	0x40021000
 8008da0:	f8ff0000 	.word	0xf8ff0000
 8008da4:	e000ed00 	.word	0xe000ed00

08008da8 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 8008dae:	2300      	movs	r3, #0
 8008db0:	60fb      	str	r3, [r7, #12]
 8008db2:	2300      	movs	r3, #0
 8008db4:	60bb      	str	r3, [r7, #8]
 8008db6:	2300      	movs	r3, #0
 8008db8:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8008dba:	4b2c      	ldr	r3, [pc, #176]	; (8008e6c <SystemCoreClockUpdate+0xc4>)
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	f003 030c 	and.w	r3, r3, #12
 8008dc2:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2b04      	cmp	r3, #4
 8008dc8:	d007      	beq.n	8008dda <SystemCoreClockUpdate+0x32>
 8008dca:	2b08      	cmp	r3, #8
 8008dcc:	d009      	beq.n	8008de2 <SystemCoreClockUpdate+0x3a>
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d133      	bne.n	8008e3a <SystemCoreClockUpdate+0x92>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8008dd2:	4b27      	ldr	r3, [pc, #156]	; (8008e70 <SystemCoreClockUpdate+0xc8>)
 8008dd4:	4a27      	ldr	r2, [pc, #156]	; (8008e74 <SystemCoreClockUpdate+0xcc>)
 8008dd6:	601a      	str	r2, [r3, #0]
      break;
 8008dd8:	e033      	b.n	8008e42 <SystemCoreClockUpdate+0x9a>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8008dda:	4b25      	ldr	r3, [pc, #148]	; (8008e70 <SystemCoreClockUpdate+0xc8>)
 8008ddc:	4a25      	ldr	r2, [pc, #148]	; (8008e74 <SystemCoreClockUpdate+0xcc>)
 8008dde:	601a      	str	r2, [r3, #0]
      break;
 8008de0:	e02f      	b.n	8008e42 <SystemCoreClockUpdate+0x9a>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8008de2:	4b22      	ldr	r3, [pc, #136]	; (8008e6c <SystemCoreClockUpdate+0xc4>)
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008dea:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8008dec:	4b1f      	ldr	r3, [pc, #124]	; (8008e6c <SystemCoreClockUpdate+0xc4>)
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008df4:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	0c9b      	lsrs	r3, r3, #18
 8008dfa:	3302      	adds	r3, #2
 8008dfc:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d106      	bne.n	8008e12 <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	4a1c      	ldr	r2, [pc, #112]	; (8008e78 <SystemCoreClockUpdate+0xd0>)
 8008e08:	fb02 f303 	mul.w	r3, r2, r3
 8008e0c:	4a18      	ldr	r2, [pc, #96]	; (8008e70 <SystemCoreClockUpdate+0xc8>)
 8008e0e:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8008e10:	e017      	b.n	8008e42 <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8008e12:	4b16      	ldr	r3, [pc, #88]	; (8008e6c <SystemCoreClockUpdate+0xc4>)
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d006      	beq.n	8008e2c <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	4a15      	ldr	r2, [pc, #84]	; (8008e78 <SystemCoreClockUpdate+0xd0>)
 8008e22:	fb02 f303 	mul.w	r3, r2, r3
 8008e26:	4a12      	ldr	r2, [pc, #72]	; (8008e70 <SystemCoreClockUpdate+0xc8>)
 8008e28:	6013      	str	r3, [r2, #0]
      break;
 8008e2a:	e00a      	b.n	8008e42 <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	4a11      	ldr	r2, [pc, #68]	; (8008e74 <SystemCoreClockUpdate+0xcc>)
 8008e30:	fb02 f303 	mul.w	r3, r2, r3
 8008e34:	4a0e      	ldr	r2, [pc, #56]	; (8008e70 <SystemCoreClockUpdate+0xc8>)
 8008e36:	6013      	str	r3, [r2, #0]
      break;
 8008e38:	e003      	b.n	8008e42 <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
 8008e3a:	4b0d      	ldr	r3, [pc, #52]	; (8008e70 <SystemCoreClockUpdate+0xc8>)
 8008e3c:	4a0d      	ldr	r2, [pc, #52]	; (8008e74 <SystemCoreClockUpdate+0xcc>)
 8008e3e:	601a      	str	r2, [r3, #0]
      break;
 8008e40:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8008e42:	4b0a      	ldr	r3, [pc, #40]	; (8008e6c <SystemCoreClockUpdate+0xc4>)
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	091b      	lsrs	r3, r3, #4
 8008e48:	f003 030f 	and.w	r3, r3, #15
 8008e4c:	4a0b      	ldr	r2, [pc, #44]	; (8008e7c <SystemCoreClockUpdate+0xd4>)
 8008e4e:	5cd3      	ldrb	r3, [r2, r3]
 8008e50:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8008e52:	4b07      	ldr	r3, [pc, #28]	; (8008e70 <SystemCoreClockUpdate+0xc8>)
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	fa22 f303 	lsr.w	r3, r2, r3
 8008e5c:	4a04      	ldr	r2, [pc, #16]	; (8008e70 <SystemCoreClockUpdate+0xc8>)
 8008e5e:	6013      	str	r3, [r2, #0]
}
 8008e60:	bf00      	nop
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bc80      	pop	{r7}
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	40021000 	.word	0x40021000
 8008e70:	20000004 	.word	0x20000004
 8008e74:	007a1200 	.word	0x007a1200
 8008e78:	003d0900 	.word	0x003d0900
 8008e7c:	08009280 	.word	0x08009280

08008e80 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b08a      	sub	sp, #40	; 0x28
 8008e84:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim2.Instance = TIM2;
 8008e86:	4b46      	ldr	r3, [pc, #280]	; (8008fa0 <MX_TIM2_Init+0x120>)
 8008e88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008e8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8008e8e:	4b44      	ldr	r3, [pc, #272]	; (8008fa0 <MX_TIM2_Init+0x120>)
 8008e90:	221f      	movs	r2, #31
 8008e92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e94:	4b42      	ldr	r3, [pc, #264]	; (8008fa0 <MX_TIM2_Init+0x120>)
 8008e96:	2200      	movs	r2, #0
 8008e98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 8008e9a:	4b41      	ldr	r3, [pc, #260]	; (8008fa0 <MX_TIM2_Init+0x120>)
 8008e9c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8008ea0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ea2:	4b3f      	ldr	r3, [pc, #252]	; (8008fa0 <MX_TIM2_Init+0x120>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008ea8:	4b3d      	ldr	r3, [pc, #244]	; (8008fa0 <MX_TIM2_Init+0x120>)
 8008eaa:	2200      	movs	r2, #0
 8008eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008eae:	483c      	ldr	r0, [pc, #240]	; (8008fa0 <MX_TIM2_Init+0x120>)
 8008eb0:	f7fa fd06 	bl	80038c0 <HAL_TIM_Base_Init>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <MX_TIM2_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008eba:	2143      	movs	r1, #67	; 0x43
 8008ebc:	4839      	ldr	r0, [pc, #228]	; (8008fa4 <MX_TIM2_Init+0x124>)
 8008ebe:	f7ff fea9 	bl	8008c14 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ec6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008ec8:	f107 0318 	add.w	r3, r7, #24
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4834      	ldr	r0, [pc, #208]	; (8008fa0 <MX_TIM2_Init+0x120>)
 8008ed0:	f7fd fb84 	bl	80065dc <HAL_TIM_ConfigClockSource>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <MX_TIM2_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008eda:	2149      	movs	r1, #73	; 0x49
 8008edc:	4831      	ldr	r0, [pc, #196]	; (8008fa4 <MX_TIM2_Init+0x124>)
 8008ede:	f7ff fe99 	bl	8008c14 <_Error_Handler>
  }

  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8008ee2:	482f      	ldr	r0, [pc, #188]	; (8008fa0 <MX_TIM2_Init+0x120>)
 8008ee4:	f7fb fce4 	bl	80048b0 <HAL_TIM_IC_Init>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d003      	beq.n	8008ef6 <MX_TIM2_Init+0x76>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008eee:	214e      	movs	r1, #78	; 0x4e
 8008ef0:	482c      	ldr	r0, [pc, #176]	; (8008fa4 <MX_TIM2_Init+0x124>)
 8008ef2:	f7ff fe8f 	bl	8008c14 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008efa:	2300      	movs	r3, #0
 8008efc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008efe:	f107 0310 	add.w	r3, r7, #16
 8008f02:	4619      	mov	r1, r3
 8008f04:	4826      	ldr	r0, [pc, #152]	; (8008fa0 <MX_TIM2_Init+0x120>)
 8008f06:	f7ff fc69 	bl	80087dc <HAL_TIMEx_MasterConfigSynchronization>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d003      	beq.n	8008f18 <MX_TIM2_Init+0x98>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008f10:	2155      	movs	r1, #85	; 0x55
 8008f12:	4824      	ldr	r0, [pc, #144]	; (8008fa4 <MX_TIM2_Init+0x124>)
 8008f14:	f7ff fe7e 	bl	8008c14 <_Error_Handler>
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8008f18:	2302      	movs	r3, #2
 8008f1a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008f20:	2300      	movs	r3, #0
 8008f22:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8008f24:	230f      	movs	r3, #15
 8008f26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008f28:	463b      	mov	r3, r7
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	481c      	ldr	r0, [pc, #112]	; (8008fa0 <MX_TIM2_Init+0x120>)
 8008f30:	f7fc fdc0 	bl	8005ab4 <HAL_TIM_IC_ConfigChannel>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d003      	beq.n	8008f42 <MX_TIM2_Init+0xc2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008f3a:	215e      	movs	r1, #94	; 0x5e
 8008f3c:	4819      	ldr	r0, [pc, #100]	; (8008fa4 <MX_TIM2_Init+0x124>)
 8008f3e:	f7ff fe69 	bl	8008c14 <_Error_Handler>
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008f42:	2300      	movs	r3, #0
 8008f44:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8008f46:	463b      	mov	r3, r7
 8008f48:	2204      	movs	r2, #4
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	4814      	ldr	r0, [pc, #80]	; (8008fa0 <MX_TIM2_Init+0x120>)
 8008f4e:	f7fc fdb1 	bl	8005ab4 <HAL_TIM_IC_ConfigChannel>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d003      	beq.n	8008f60 <MX_TIM2_Init+0xe0>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008f58:	2164      	movs	r1, #100	; 0x64
 8008f5a:	4812      	ldr	r0, [pc, #72]	; (8008fa4 <MX_TIM2_Init+0x124>)
 8008f5c:	f7ff fe5a 	bl	8008c14 <_Error_Handler>
  }

  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8008f60:	463b      	mov	r3, r7
 8008f62:	2208      	movs	r2, #8
 8008f64:	4619      	mov	r1, r3
 8008f66:	480e      	ldr	r0, [pc, #56]	; (8008fa0 <MX_TIM2_Init+0x120>)
 8008f68:	f7fc fda4 	bl	8005ab4 <HAL_TIM_IC_ConfigChannel>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <MX_TIM2_Init+0xfa>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008f72:	2169      	movs	r1, #105	; 0x69
 8008f74:	480b      	ldr	r0, [pc, #44]	; (8008fa4 <MX_TIM2_Init+0x124>)
 8008f76:	f7ff fe4d 	bl	8008c14 <_Error_Handler>
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8008f7e:	463b      	mov	r3, r7
 8008f80:	220c      	movs	r2, #12
 8008f82:	4619      	mov	r1, r3
 8008f84:	4806      	ldr	r0, [pc, #24]	; (8008fa0 <MX_TIM2_Init+0x120>)
 8008f86:	f7fc fd95 	bl	8005ab4 <HAL_TIM_IC_ConfigChannel>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d003      	beq.n	8008f98 <MX_TIM2_Init+0x118>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008f90:	216f      	movs	r1, #111	; 0x6f
 8008f92:	4804      	ldr	r0, [pc, #16]	; (8008fa4 <MX_TIM2_Init+0x124>)
 8008f94:	f7ff fe3e 	bl	8008c14 <_Error_Handler>
  }

}
 8008f98:	bf00      	nop
 8008f9a:	3728      	adds	r7, #40	; 0x28
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	20000098 	.word	0x20000098
 8008fa4:	08009298 	.word	0x08009298

08008fa8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b086      	sub	sp, #24
 8008fac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 8008fae:	4b20      	ldr	r3, [pc, #128]	; (8009030 <MX_TIM3_Init+0x88>)
 8008fb0:	4a20      	ldr	r2, [pc, #128]	; (8009034 <MX_TIM3_Init+0x8c>)
 8008fb2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31999;
 8008fb4:	4b1e      	ldr	r3, [pc, #120]	; (8009030 <MX_TIM3_Init+0x88>)
 8008fb6:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8008fba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008fbc:	4b1c      	ldr	r3, [pc, #112]	; (8009030 <MX_TIM3_Init+0x88>)
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8008fc2:	4b1b      	ldr	r3, [pc, #108]	; (8009030 <MX_TIM3_Init+0x88>)
 8008fc4:	2263      	movs	r2, #99	; 0x63
 8008fc6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008fc8:	4b19      	ldr	r3, [pc, #100]	; (8009030 <MX_TIM3_Init+0x88>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008fce:	4b18      	ldr	r3, [pc, #96]	; (8009030 <MX_TIM3_Init+0x88>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008fd4:	4816      	ldr	r0, [pc, #88]	; (8009030 <MX_TIM3_Init+0x88>)
 8008fd6:	f7fa fc73 	bl	80038c0 <HAL_TIM_Base_Init>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d003      	beq.n	8008fe8 <MX_TIM3_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008fe0:	2181      	movs	r1, #129	; 0x81
 8008fe2:	4815      	ldr	r0, [pc, #84]	; (8009038 <MX_TIM3_Init+0x90>)
 8008fe4:	f7ff fe16 	bl	8008c14 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008fee:	f107 0308 	add.w	r3, r7, #8
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	480e      	ldr	r0, [pc, #56]	; (8009030 <MX_TIM3_Init+0x88>)
 8008ff6:	f7fd faf1 	bl	80065dc <HAL_TIM_ConfigClockSource>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d003      	beq.n	8009008 <MX_TIM3_Init+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009000:	2187      	movs	r1, #135	; 0x87
 8009002:	480d      	ldr	r0, [pc, #52]	; (8009038 <MX_TIM3_Init+0x90>)
 8009004:	f7ff fe06 	bl	8008c14 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009008:	2300      	movs	r3, #0
 800900a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800900c:	2300      	movs	r3, #0
 800900e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009010:	463b      	mov	r3, r7
 8009012:	4619      	mov	r1, r3
 8009014:	4806      	ldr	r0, [pc, #24]	; (8009030 <MX_TIM3_Init+0x88>)
 8009016:	f7ff fbe1 	bl	80087dc <HAL_TIMEx_MasterConfigSynchronization>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d003      	beq.n	8009028 <MX_TIM3_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009020:	218e      	movs	r1, #142	; 0x8e
 8009022:	4805      	ldr	r0, [pc, #20]	; (8009038 <MX_TIM3_Init+0x90>)
 8009024:	f7ff fdf6 	bl	8008c14 <_Error_Handler>
  }

}
 8009028:	bf00      	nop
 800902a:	3718      	adds	r7, #24
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	20000058 	.word	0x20000058
 8009034:	40000400 	.word	0x40000400
 8009038:	08009298 	.word	0x08009298

0800903c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b088      	sub	sp, #32
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_baseHandle->Instance==TIM2)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800904c:	d13a      	bne.n	80090c4 <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800904e:	4a2c      	ldr	r2, [pc, #176]	; (8009100 <HAL_TIM_Base_MspInit+0xc4>)
 8009050:	4b2b      	ldr	r3, [pc, #172]	; (8009100 <HAL_TIM_Base_MspInit+0xc4>)
 8009052:	69db      	ldr	r3, [r3, #28]
 8009054:	f043 0301 	orr.w	r3, r3, #1
 8009058:	61d3      	str	r3, [r2, #28]
 800905a:	4b29      	ldr	r3, [pc, #164]	; (8009100 <HAL_TIM_Base_MspInit+0xc4>)
 800905c:	69db      	ldr	r3, [r3, #28]
 800905e:	f003 0301 	and.w	r3, r3, #1
 8009062:	60fb      	str	r3, [r7, #12]
 8009064:	68fb      	ldr	r3, [r7, #12]
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 8009066:	f640 4308 	movw	r3, #3080	; 0xc08
 800906a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800906c:	2300      	movs	r3, #0
 800906e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009070:	2300      	movs	r3, #0
 8009072:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009074:	f107 0310 	add.w	r3, r7, #16
 8009078:	4619      	mov	r1, r3
 800907a:	4822      	ldr	r0, [pc, #136]	; (8009104 <HAL_TIM_Base_MspInit+0xc8>)
 800907c:	f7f9 f8ae 	bl	80021dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8009080:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009084:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009086:	2300      	movs	r3, #0
 8009088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800908a:	2300      	movs	r3, #0
 800908c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800908e:	f107 0310 	add.w	r3, r7, #16
 8009092:	4619      	mov	r1, r3
 8009094:	481c      	ldr	r0, [pc, #112]	; (8009108 <HAL_TIM_Base_MspInit+0xcc>)
 8009096:	f7f9 f8a1 	bl	80021dc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_ENABLE();
 800909a:	4a1c      	ldr	r2, [pc, #112]	; (800910c <HAL_TIM_Base_MspInit+0xd0>)
 800909c:	4b1b      	ldr	r3, [pc, #108]	; (800910c <HAL_TIM_Base_MspInit+0xd0>)
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090a4:	6053      	str	r3, [r2, #4]
 80090a6:	4a19      	ldr	r2, [pc, #100]	; (800910c <HAL_TIM_Base_MspInit+0xd0>)
 80090a8:	4b18      	ldr	r3, [pc, #96]	; (800910c <HAL_TIM_Base_MspInit+0xd0>)
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80090b0:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80090b2:	2200      	movs	r2, #0
 80090b4:	2100      	movs	r1, #0
 80090b6:	201c      	movs	r0, #28
 80090b8:	f7f7 fb45 	bl	8000746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80090bc:	201c      	movs	r0, #28
 80090be:	f7f7 fb5e 	bl	800077e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80090c2:	e018      	b.n	80090f6 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM3)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a11      	ldr	r2, [pc, #68]	; (8009110 <HAL_TIM_Base_MspInit+0xd4>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d113      	bne.n	80090f6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80090ce:	4a0c      	ldr	r2, [pc, #48]	; (8009100 <HAL_TIM_Base_MspInit+0xc4>)
 80090d0:	4b0b      	ldr	r3, [pc, #44]	; (8009100 <HAL_TIM_Base_MspInit+0xc4>)
 80090d2:	69db      	ldr	r3, [r3, #28]
 80090d4:	f043 0302 	orr.w	r3, r3, #2
 80090d8:	61d3      	str	r3, [r2, #28]
 80090da:	4b09      	ldr	r3, [pc, #36]	; (8009100 <HAL_TIM_Base_MspInit+0xc4>)
 80090dc:	69db      	ldr	r3, [r3, #28]
 80090de:	f003 0302 	and.w	r3, r3, #2
 80090e2:	60bb      	str	r3, [r7, #8]
 80090e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80090e6:	2200      	movs	r2, #0
 80090e8:	2100      	movs	r1, #0
 80090ea:	201d      	movs	r0, #29
 80090ec:	f7f7 fb2b 	bl	8000746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80090f0:	201d      	movs	r0, #29
 80090f2:	f7f7 fb44 	bl	800077e <HAL_NVIC_EnableIRQ>
}
 80090f6:	bf00      	nop
 80090f8:	3720      	adds	r7, #32
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	40021000 	.word	0x40021000
 8009104:	40010c00 	.word	0x40010c00
 8009108:	40010800 	.word	0x40010800
 800910c:	40010000 	.word	0x40010000
 8009110:	40000400 	.word	0x40000400

08009114 <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009124:	d113      	bne.n	800914e <HAL_TIM_Base_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 8009126:	4a13      	ldr	r2, [pc, #76]	; (8009174 <HAL_TIM_Base_MspDeInit+0x60>)
 8009128:	4b12      	ldr	r3, [pc, #72]	; (8009174 <HAL_TIM_Base_MspDeInit+0x60>)
 800912a:	69db      	ldr	r3, [r3, #28]
 800912c:	f023 0301 	bic.w	r3, r3, #1
 8009130:	61d3      	str	r3, [r2, #28]
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3);
 8009132:	f640 4108 	movw	r1, #3080	; 0xc08
 8009136:	4810      	ldr	r0, [pc, #64]	; (8009178 <HAL_TIM_Base_MspDeInit+0x64>)
 8009138:	f7f9 f9ae 	bl	8002498 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 800913c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009140:	480e      	ldr	r0, [pc, #56]	; (800917c <HAL_TIM_Base_MspDeInit+0x68>)
 8009142:	f7f9 f9a9 	bl	8002498 <HAL_GPIO_DeInit>

    /* TIM2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8009146:	201c      	movs	r0, #28
 8009148:	f7f7 fb27 	bl	800079a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }
} 
 800914c:	e00d      	b.n	800916a <HAL_TIM_Base_MspDeInit+0x56>
  else if(tim_baseHandle->Instance==TIM3)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a0b      	ldr	r2, [pc, #44]	; (8009180 <HAL_TIM_Base_MspDeInit+0x6c>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d108      	bne.n	800916a <HAL_TIM_Base_MspDeInit+0x56>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8009158:	4a06      	ldr	r2, [pc, #24]	; (8009174 <HAL_TIM_Base_MspDeInit+0x60>)
 800915a:	4b06      	ldr	r3, [pc, #24]	; (8009174 <HAL_TIM_Base_MspDeInit+0x60>)
 800915c:	69db      	ldr	r3, [r3, #28]
 800915e:	f023 0302 	bic.w	r3, r3, #2
 8009162:	61d3      	str	r3, [r2, #28]
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8009164:	201d      	movs	r0, #29
 8009166:	f7f7 fb18 	bl	800079a <HAL_NVIC_DisableIRQ>
} 
 800916a:	bf00      	nop
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	40021000 	.word	0x40021000
 8009178:	40010c00 	.word	0x40010c00
 800917c:	40010800 	.word	0x40010800
 8009180:	40000400 	.word	0x40000400
 8009184:	080092b0 	.word	0x080092b0
 8009188:	20000000 	.word	0x20000000
 800918c:	20000008 	.word	0x20000008
 8009190:	20000008 	.word	0x20000008
 8009194:	200000d8 	.word	0x200000d8

08009198 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8009198:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800919a:	e003      	b.n	80091a4 <LoopCopyDataInit>

0800919c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800919c:	4b0b      	ldr	r3, [pc, #44]	; (80091cc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800919e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80091a0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80091a2:	3104      	adds	r1, #4

080091a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80091a4:	480a      	ldr	r0, [pc, #40]	; (80091d0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80091a6:	4b0b      	ldr	r3, [pc, #44]	; (80091d4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80091a8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80091aa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80091ac:	d3f6      	bcc.n	800919c <CopyDataInit>
  ldr r2, =_sbss
 80091ae:	4a0a      	ldr	r2, [pc, #40]	; (80091d8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80091b0:	e002      	b.n	80091b8 <LoopFillZerobss>

080091b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80091b2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80091b4:	f842 3b04 	str.w	r3, [r2], #4

080091b8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80091b8:	4b08      	ldr	r3, [pc, #32]	; (80091dc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80091ba:	429a      	cmp	r2, r3
  bcc FillZerobss
 80091bc:	d3f9      	bcc.n	80091b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80091be:	f7ff fdbf 	bl	8008d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80091c2:	f000 f80f 	bl	80091e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80091c6:	f7ff fc03 	bl	80089d0 <main>
  bx lr
 80091ca:	4770      	bx	lr
  ldr r3, =_sidata
 80091cc:	080092b0 	.word	0x080092b0
  ldr r0, =_sdata
 80091d0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80091d4:	20000008 	.word	0x20000008
  ldr r2, =_sbss
 80091d8:	20000008 	.word	0x20000008
  ldr r3, = _ebss
 80091dc:	200000d8 	.word	0x200000d8

080091e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80091e0:	e7fe      	b.n	80091e0 <ADC1_2_IRQHandler>
	...

080091e4 <__libc_init_array>:
 80091e4:	b570      	push	{r4, r5, r6, lr}
 80091e6:	2500      	movs	r5, #0
 80091e8:	4e0c      	ldr	r6, [pc, #48]	; (800921c <__libc_init_array+0x38>)
 80091ea:	4c0d      	ldr	r4, [pc, #52]	; (8009220 <__libc_init_array+0x3c>)
 80091ec:	1ba4      	subs	r4, r4, r6
 80091ee:	10a4      	asrs	r4, r4, #2
 80091f0:	42a5      	cmp	r5, r4
 80091f2:	d109      	bne.n	8009208 <__libc_init_array+0x24>
 80091f4:	f000 f81c 	bl	8009230 <_init>
 80091f8:	2500      	movs	r5, #0
 80091fa:	4e0a      	ldr	r6, [pc, #40]	; (8009224 <__libc_init_array+0x40>)
 80091fc:	4c0a      	ldr	r4, [pc, #40]	; (8009228 <__libc_init_array+0x44>)
 80091fe:	1ba4      	subs	r4, r4, r6
 8009200:	10a4      	asrs	r4, r4, #2
 8009202:	42a5      	cmp	r5, r4
 8009204:	d105      	bne.n	8009212 <__libc_init_array+0x2e>
 8009206:	bd70      	pop	{r4, r5, r6, pc}
 8009208:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800920c:	4798      	blx	r3
 800920e:	3501      	adds	r5, #1
 8009210:	e7ee      	b.n	80091f0 <__libc_init_array+0xc>
 8009212:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009216:	4798      	blx	r3
 8009218:	3501      	adds	r5, #1
 800921a:	e7f2      	b.n	8009202 <__libc_init_array+0x1e>
 800921c:	080092a8 	.word	0x080092a8
 8009220:	080092a8 	.word	0x080092a8
 8009224:	080092a8 	.word	0x080092a8
 8009228:	080092ac 	.word	0x080092ac

0800922c <__EH_FRAME_BEGIN__>:
 800922c:	00000000                                ....

08009230 <_init>:
 8009230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009232:	bf00      	nop
 8009234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009236:	bc08      	pop	{r3}
 8009238:	469e      	mov	lr, r3
 800923a:	4770      	bx	lr

0800923c <_fini>:
 800923c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923e:	bf00      	nop
 8009240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009242:	bc08      	pop	{r3}
 8009244:	469e      	mov	lr, r3
 8009246:	4770      	bx	lr
